// Generated from HiveParser.g4 by ANTLR 4.12.0
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols

import {
	ATN,
	ATNDeserializer, DecisionState, DFA, FailedPredicateException,
	RecognitionException, NoViableAltException, BailErrorStrategy,
	Parser, ParserATNSimulator,
	RuleContext, ParserRuleContext, PredictionMode, PredictionContextCache,
	TerminalNode, RuleNode,
	Token, TokenStream,
	Interval, IntervalSet
} from 'antlr4';
import HiveParserListener from "./HiveParserListener.js";
import HiveParserVisitor from "./HiveParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;

export default class HiveParser extends Parser {
	public static readonly KW_ABORT = 1;
	public static readonly KW_ACTIVATE = 2;
	public static readonly KW_ACTIVE = 3;
	public static readonly KW_ADD = 4;
	public static readonly KW_ADMIN = 5;
	public static readonly KW_AFTER = 6;
	public static readonly KW_ALL = 7;
	public static readonly KW_ALLOC_FRACTION = 8;
	public static readonly KW_ALTER = 9;
	public static readonly KW_ANALYZE = 10;
	public static readonly KW_AND = 11;
	public static readonly KW_ANTI = 12;
	public static readonly KW_ANY = 13;
	public static readonly KW_APPLICATION = 14;
	public static readonly KW_ARCHIVE = 15;
	public static readonly KW_ARRAY = 16;
	public static readonly KW_AS = 17;
	public static readonly KW_ASC = 18;
	public static readonly KW_AST = 19;
	public static readonly KW_AT = 20;
	public static readonly KW_AUTHORIZATION = 21;
	public static readonly KW_AUTOCOMMIT = 22;
	public static readonly KW_BATCH = 23;
	public static readonly KW_BEFORE = 24;
	public static readonly KW_BETWEEN = 25;
	public static readonly KW_BIGINT = 26;
	public static readonly KW_BINARY = 27;
	public static readonly KW_BOOLEAN = 28;
	public static readonly KW_BOTH = 29;
	public static readonly KW_BUCKET = 30;
	public static readonly KW_BUCKETS = 31;
	public static readonly KW_BY = 32;
	public static readonly KW_CACHE = 33;
	public static readonly KW_CASCADE = 34;
	public static readonly KW_CASE = 35;
	public static readonly KW_CAST = 36;
	public static readonly KW_CBO = 37;
	public static readonly KW_CHANGE = 38;
	public static readonly KW_CHAR = 39;
	public static readonly KW_CHECK = 40;
	public static readonly KW_CLUSTER = 41;
	public static readonly KW_CLUSTERED = 42;
	public static readonly KW_CLUSTERSTATUS = 43;
	public static readonly KW_COLLECTION = 44;
	public static readonly KW_COLUMN = 45;
	public static readonly KW_COLUMNS = 46;
	public static readonly KW_COMMENT = 47;
	public static readonly KW_COMMIT = 48;
	public static readonly KW_COMPACT = 49;
	public static readonly KW_COMPACTIONS = 50;
	public static readonly KW_COMPACT_ID = 51;
	public static readonly KW_COMPUTE = 52;
	public static readonly KW_CONCATENATE = 53;
	public static readonly KW_CONF = 54;
	public static readonly KW_CONSTRAINT = 55;
	public static readonly KW_CONTINUE = 56;
	public static readonly KW_COST = 57;
	public static readonly KW_CREATE = 58;
	public static readonly KW_CRON = 59;
	public static readonly KW_CROSS = 60;
	public static readonly KW_CUBE = 61;
	public static readonly KW_CURRENT = 62;
	public static readonly KW_CURRENT_DATE = 63;
	public static readonly KW_CURRENT_TIMESTAMP = 64;
	public static readonly KW_CURSOR = 65;
	public static readonly KW_DATA = 66;
	public static readonly KW_DATABASE = 67;
	public static readonly KW_DATABASES = 68;
	public static readonly KW_DATACONNECTOR = 69;
	public static readonly KW_DATACONNECTORS = 70;
	public static readonly KW_DATE = 71;
	public static readonly KW_DATETIME = 72;
	public static readonly KW_DAY = 73;
	public static readonly KW_DAYOFWEEK = 74;
	public static readonly KW_DBPROPERTIES = 75;
	public static readonly KW_DCPROPERTIES = 76;
	public static readonly KW_DDL = 77;
	public static readonly KW_DEBUG = 78;
	public static readonly KW_DECIMAL = 79;
	public static readonly KW_DEFAULT = 80;
	public static readonly KW_DEFERRED = 81;
	public static readonly KW_DEFINED = 82;
	public static readonly KW_DELETE = 83;
	public static readonly KW_DELIMITED = 84;
	public static readonly KW_DEPENDENCY = 85;
	public static readonly KW_DESC = 86;
	public static readonly KW_DESCRIBE = 87;
	public static readonly KW_DETAIL = 88;
	public static readonly KW_DIRECTORIES = 89;
	public static readonly KW_DIRECTORY = 90;
	public static readonly KW_DISABLE = 91;
	public static readonly KW_DISTINCT = 92;
	public static readonly KW_DISTRIBUTE = 93;
	public static readonly KW_DISTRIBUTED = 94;
	public static readonly KW_DO = 95;
	public static readonly KW_DOUBLE = 96;
	public static readonly KW_DOW = 97;
	public static readonly KW_DROP = 98;
	public static readonly KW_DUMP = 99;
	public static readonly KW_ELEM_TYPE = 100;
	public static readonly KW_ELSE = 101;
	public static readonly KW_ENABLE = 102;
	public static readonly KW_END = 103;
	public static readonly KW_ENFORCED = 104;
	public static readonly KW_ESCAPED = 105;
	public static readonly KW_EVERY = 106;
	public static readonly KW_EXCEPT = 107;
	public static readonly KW_EXCHANGE = 108;
	public static readonly KW_EXCLUSIVE = 109;
	public static readonly KW_EXECUTE = 110;
	public static readonly KW_EXECUTED = 111;
	public static readonly KW_EXISTS = 112;
	public static readonly KW_EXPIRE_SNAPSHOTS = 113;
	public static readonly KW_EXPLAIN = 114;
	public static readonly KW_EXPORT = 115;
	public static readonly KW_EXPRESSION = 116;
	public static readonly KW_EXTENDED = 117;
	public static readonly KW_EXTERNAL = 118;
	public static readonly KW_EXTRACT = 119;
	public static readonly KW_FALSE = 120;
	public static readonly KW_FETCH = 121;
	public static readonly KW_FIELDS = 122;
	public static readonly KW_FILE = 123;
	public static readonly KW_FILEFORMAT = 124;
	public static readonly KW_FIRST = 125;
	public static readonly KW_FLOAT = 126;
	public static readonly KW_FLOOR = 127;
	public static readonly KW_FOLLOWING = 128;
	public static readonly KW_FOR = 129;
	public static readonly KW_FORCE = 130;
	public static readonly KW_FOREIGN = 131;
	public static readonly KW_FORMAT = 132;
	public static readonly KW_FORMATTED = 133;
	public static readonly KW_FROM = 134;
	public static readonly KW_FULL = 135;
	public static readonly KW_FUNCTION = 136;
	public static readonly KW_FUNCTIONS = 137;
	public static readonly KW_GRANT = 138;
	public static readonly KW_GROUP = 139;
	public static readonly KW_GROUPING = 140;
	public static readonly KW_HAVING = 141;
	public static readonly KW_HOLD_DDLTIME = 142;
	public static readonly KW_HOUR = 143;
	public static readonly KW_IDXPROPERTIES = 144;
	public static readonly KW_IF = 145;
	public static readonly KW_IGNORE = 146;
	public static readonly KW_IMPORT = 147;
	public static readonly KW_IN = 148;
	public static readonly KW_INDEX = 149;
	public static readonly KW_INDEXES = 150;
	public static readonly KW_INNER = 151;
	public static readonly KW_INPATH = 152;
	public static readonly KW_INPUTDRIVER = 153;
	public static readonly KW_INPUTFORMAT = 154;
	public static readonly KW_INSERT = 155;
	public static readonly KW_INT = 156;
	public static readonly KW_INTERSECT = 157;
	public static readonly KW_INTERVAL = 158;
	public static readonly KW_INTO = 159;
	public static readonly KW_IS = 160;
	public static readonly KW_ISOLATION = 161;
	public static readonly KW_ITEMS = 162;
	public static readonly KW_JAR = 163;
	public static readonly KW_JOIN = 164;
	public static readonly KW_JOINCOST = 165;
	public static readonly KW_KEY = 166;
	public static readonly KW_KEYS = 167;
	public static readonly KW_KEY_TYPE = 168;
	public static readonly KW_KILL = 169;
	public static readonly KW_LAST = 170;
	public static readonly KW_LATERAL = 171;
	public static readonly KW_LEADING = 172;
	public static readonly KW_LEFT = 173;
	public static readonly KW_LESS = 174;
	public static readonly KW_LEVEL = 175;
	public static readonly KW_LIKE = 176;
	public static readonly KW_LIMIT = 177;
	public static readonly KW_LINES = 178;
	public static readonly KW_LOAD = 179;
	public static readonly KW_LOCAL = 180;
	public static readonly KW_LOCATION = 181;
	public static readonly KW_LOCK = 182;
	public static readonly KW_LOCKS = 183;
	public static readonly KW_LOGICAL = 184;
	public static readonly KW_LONG = 185;
	public static readonly KW_MACRO = 186;
	public static readonly KW_MANAGED = 187;
	public static readonly KW_MANAGEDLOCATION = 188;
	public static readonly KW_MANAGEMENT = 189;
	public static readonly KW_MAP = 190;
	public static readonly KW_MAPJOIN = 191;
	public static readonly KW_MAPPING = 192;
	public static readonly KW_MATCHED = 193;
	public static readonly KW_MATERIALIZED = 194;
	public static readonly KW_MERGE = 195;
	public static readonly KW_METADATA = 196;
	public static readonly KW_MINUS = 197;
	public static readonly KW_MINUTE = 198;
	public static readonly KW_MONTH = 199;
	public static readonly KW_MORE = 200;
	public static readonly KW_MOVE = 201;
	public static readonly KW_MSCK = 202;
	public static readonly KW_NONE = 203;
	public static readonly KW_NORELY = 204;
	public static readonly KW_NOSCAN = 205;
	public static readonly KW_NOT = 206;
	public static readonly KW_NOVALIDATE = 207;
	public static readonly KW_NO_DROP = 208;
	public static readonly KW_NULL = 209;
	public static readonly KW_NULLS = 210;
	public static readonly KW_OF = 211;
	public static readonly KW_OFFLINE = 212;
	public static readonly KW_OFFSET = 213;
	public static readonly KW_ON = 214;
	public static readonly KW_ONLY = 215;
	public static readonly KW_OPERATOR = 216;
	public static readonly KW_OPTION = 217;
	public static readonly KW_OR = 218;
	public static readonly KW_ORDER = 219;
	public static readonly KW_OUT = 220;
	public static readonly KW_OUTER = 221;
	public static readonly KW_OUTPUTDRIVER = 222;
	public static readonly KW_OUTPUTFORMAT = 223;
	public static readonly KW_OVER = 224;
	public static readonly KW_OVERWRITE = 225;
	public static readonly KW_OWNER = 226;
	public static readonly KW_PARTITION = 227;
	public static readonly KW_PARTITIONED = 228;
	public static readonly KW_PARTITIONS = 229;
	public static readonly KW_PATH = 230;
	public static readonly KW_PERCENT = 231;
	public static readonly KW_PKFK_JOIN = 232;
	public static readonly KW_PLAN = 233;
	public static readonly KW_PLANS = 234;
	public static readonly KW_PLUS = 235;
	public static readonly KW_POOL = 236;
	public static readonly KW_PRECEDING = 237;
	public static readonly KW_PRECISION = 238;
	public static readonly KW_PREPARE = 239;
	public static readonly KW_PRESERVE = 240;
	public static readonly KW_PRIMARY = 241;
	public static readonly KW_PRINCIPALS = 242;
	public static readonly KW_PROCEDURE = 243;
	public static readonly KW_PROTECTION = 244;
	public static readonly KW_PURGE = 245;
	public static readonly KW_QUALIFY = 246;
	public static readonly KW_QUARTER = 247;
	public static readonly KW_QUERY = 248;
	public static readonly KW_QUERY_PARALLELISM = 249;
	public static readonly KW_RANGE = 250;
	public static readonly KW_READ = 251;
	public static readonly KW_READONLY = 252;
	public static readonly KW_READS = 253;
	public static readonly KW_REAL = 254;
	public static readonly KW_REBUILD = 255;
	public static readonly KW_RECORDREADER = 256;
	public static readonly KW_RECORDWRITER = 257;
	public static readonly KW_REDUCE = 258;
	public static readonly KW_REFERENCES = 259;
	public static readonly KW_REGEXP = 260;
	public static readonly KW_RELOAD = 261;
	public static readonly KW_RELY = 262;
	public static readonly KW_REMOTE = 263;
	public static readonly KW_RENAME = 264;
	public static readonly KW_REOPTIMIZATION = 265;
	public static readonly KW_REPAIR = 266;
	public static readonly KW_REPL = 267;
	public static readonly KW_REPLACE = 268;
	public static readonly KW_REPLICATION = 269;
	public static readonly KW_RESOURCE = 270;
	public static readonly KW_RESPECT = 271;
	public static readonly KW_RESTRICT = 272;
	public static readonly KW_REVOKE = 273;
	public static readonly KW_REWRITE = 274;
	public static readonly KW_RIGHT = 275;
	public static readonly KW_RLIKE = 276;
	public static readonly KW_ROLE = 277;
	public static readonly KW_ROLES = 278;
	public static readonly KW_ROLLBACK = 279;
	public static readonly KW_ROLLUP = 280;
	public static readonly KW_ROW = 281;
	public static readonly KW_ROWS = 282;
	public static readonly KW_SCHEDULED = 283;
	public static readonly KW_SCHEDULING_POLICY = 284;
	public static readonly KW_SCHEMA = 285;
	public static readonly KW_SCHEMAS = 286;
	public static readonly KW_SECOND = 287;
	public static readonly KW_SELECT = 288;
	public static readonly KW_SEMI = 289;
	public static readonly KW_SERDE = 290;
	public static readonly KW_SERDEPROPERTIES = 291;
	public static readonly KW_SERVER = 292;
	public static readonly KW_SET = 293;
	public static readonly KW_SETS = 294;
	public static readonly KW_SET_CURRENT_SNAPSHOT = 295;
	public static readonly KW_SHARED = 296;
	public static readonly KW_SHOW = 297;
	public static readonly KW_SHOW_DATABASE = 298;
	public static readonly KW_SKEWED = 299;
	public static readonly KW_SMALLINT = 300;
	public static readonly KW_SNAPSHOT = 301;
	public static readonly KW_SOME = 302;
	public static readonly KW_SORT = 303;
	public static readonly KW_SORTED = 304;
	public static readonly KW_SPEC = 305;
	public static readonly KW_SSL = 306;
	public static readonly KW_START = 307;
	public static readonly KW_STATISTICS = 308;
	public static readonly KW_STATUS = 309;
	public static readonly KW_STORED = 310;
	public static readonly KW_STREAMTABLE = 311;
	public static readonly KW_STRING = 312;
	public static readonly KW_STRUCT = 313;
	public static readonly KW_SUMMARY = 314;
	public static readonly KW_SYNC = 315;
	public static readonly KW_SYSTEM_TIME = 316;
	public static readonly KW_SYSTEM_VERSION = 317;
	public static readonly KW_TABLE = 318;
	public static readonly KW_TABLES = 319;
	public static readonly KW_TABLESAMPLE = 320;
	public static readonly KW_TBLPROPERTIES = 321;
	public static readonly KW_TEMPORARY = 322;
	public static readonly KW_TERMINATED = 323;
	public static readonly KW_THEN = 324;
	public static readonly KW_TIME = 325;
	public static readonly KW_TIMESTAMP = 326;
	public static readonly KW_TIMESTAMPLOCALTZ = 327;
	public static readonly KW_TIMESTAMPTZ = 328;
	public static readonly KW_TINYINT = 329;
	public static readonly KW_TO = 330;
	public static readonly KW_TOUCH = 331;
	public static readonly KW_TRAILING = 332;
	public static readonly KW_TRANSACTION = 333;
	public static readonly KW_TRANSACTIONAL = 334;
	public static readonly KW_TRANSACTIONS = 335;
	public static readonly KW_TRANSFORM = 336;
	public static readonly KW_TRIGGER = 337;
	public static readonly KW_TRIM = 338;
	public static readonly KW_TRUE = 339;
	public static readonly KW_TRUNCATE = 340;
	public static readonly KW_TYPE = 341;
	public static readonly KW_UNARCHIVE = 342;
	public static readonly KW_UNBOUNDED = 343;
	public static readonly KW_UNDO = 344;
	public static readonly KW_UNION = 345;
	public static readonly KW_UNIONTYPE = 346;
	public static readonly KW_UNIQUE = 347;
	public static readonly KW_UNIQUEJOIN = 348;
	public static readonly KW_UNKNOWN = 349;
	public static readonly KW_UNLOCK = 350;
	public static readonly KW_UNMANAGED = 351;
	public static readonly KW_UNSET = 352;
	public static readonly KW_UNSIGNED = 353;
	public static readonly KW_UPDATE = 354;
	public static readonly KW_URI = 355;
	public static readonly KW_URL = 356;
	public static readonly KW_USE = 357;
	public static readonly KW_USER = 358;
	public static readonly KW_USING = 359;
	public static readonly KW_UTC = 360;
	public static readonly KW_UTCTIMESTAMP = 361;
	public static readonly KW_VALIDATE = 362;
	public static readonly KW_VALUES = 363;
	public static readonly KW_VALUE_TYPE = 364;
	public static readonly KW_VARCHAR = 365;
	public static readonly KW_VECTORIZATION = 366;
	public static readonly KW_VIEW = 367;
	public static readonly KW_VIEWS = 368;
	public static readonly KW_WAIT = 369;
	public static readonly KW_WEEK = 370;
	public static readonly KW_WHEN = 371;
	public static readonly KW_WHERE = 372;
	public static readonly KW_WHILE = 373;
	public static readonly KW_WINDOW = 374;
	public static readonly KW_WITH = 375;
	public static readonly KW_WITHIN = 376;
	public static readonly KW_WORK = 377;
	public static readonly KW_WORKLOAD = 378;
	public static readonly KW_WRITE = 379;
	public static readonly KW_YEAR = 380;
	public static readonly KW_ZONE = 381;
	public static readonly DOT = 382;
	public static readonly COLON = 383;
	public static readonly COMMA = 384;
	public static readonly SEMICOLON = 385;
	public static readonly LPAREN = 386;
	public static readonly RPAREN = 387;
	public static readonly LSQUARE = 388;
	public static readonly RSQUARE = 389;
	public static readonly LCURLY = 390;
	public static readonly RCURLY = 391;
	public static readonly EQUAL = 392;
	public static readonly EQUAL_NS = 393;
	public static readonly NOTEQUAL = 394;
	public static readonly LESSTHANOREQUALTO = 395;
	public static readonly LESSTHAN = 396;
	public static readonly GREATERTHANOREQUALTO = 397;
	public static readonly GREATERTHAN = 398;
	public static readonly DIVIDE = 399;
	public static readonly PLUS = 400;
	public static readonly MINUS = 401;
	public static readonly STAR = 402;
	public static readonly MOD = 403;
	public static readonly DIV = 404;
	public static readonly AMPERSAND = 405;
	public static readonly TILDE = 406;
	public static readonly BITWISEOR = 407;
	public static readonly CONCATENATE = 408;
	public static readonly BITWISEXOR = 409;
	public static readonly QUESTION = 410;
	public static readonly DOLLAR = 411;
	public static readonly StringLiteral = 412;
	public static readonly CharSetLiteral = 413;
	public static readonly IntegralLiteral = 414;
	public static readonly NumberLiteral = 415;
	public static readonly ByteLengthLiteral = 416;
	public static readonly Number = 417;
	public static readonly Identifier = 418;
	public static readonly CharSetName = 419;
	public static readonly WHITE_SPACE = 420;
	public static readonly LINE_COMMENT = 421;
	public static readonly QUERY_HINT = 422;
	public static readonly SHOW_HINT = 423;
	public static readonly HIDDEN_HINT = 424;
	public static readonly EOF = Token.EOF;
	public static readonly RULE_statement = 0;
	public static readonly RULE_explainStatement = 1;
	public static readonly RULE_explainOption = 2;
	public static readonly RULE_vectorizationOnly = 3;
	public static readonly RULE_vectorizatonDetail = 4;
	public static readonly RULE_execStatement = 5;
	public static readonly RULE_loadStatement = 6;
	public static readonly RULE_replicationClause = 7;
	public static readonly RULE_exportStatement = 8;
	public static readonly RULE_importStatement = 9;
	public static readonly RULE_replDumpStatement = 10;
	public static readonly RULE_replDbPolicy = 11;
	public static readonly RULE_replLoadStatement = 12;
	public static readonly RULE_replConfigs = 13;
	public static readonly RULE_replConfigsList = 14;
	public static readonly RULE_replTableLevelPolicy = 15;
	public static readonly RULE_replStatusStatement = 16;
	public static readonly RULE_ddlStatement = 17;
	public static readonly RULE_ifExists = 18;
	public static readonly RULE_restrictOrCascade = 19;
	public static readonly RULE_ifNotExists = 20;
	public static readonly RULE_force = 21;
	public static readonly RULE_rewriteEnabled = 22;
	public static readonly RULE_rewriteDisabled = 23;
	public static readonly RULE_storedAsDirs = 24;
	public static readonly RULE_orReplace = 25;
	public static readonly RULE_createDatabaseStatement = 26;
	public static readonly RULE_dbLocation = 27;
	public static readonly RULE_dbManagedLocation = 28;
	public static readonly RULE_dbProperties = 29;
	public static readonly RULE_dbPropertiesList = 30;
	public static readonly RULE_dbConnectorName = 31;
	public static readonly RULE_switchDatabaseStatement = 32;
	public static readonly RULE_dropDatabaseStatement = 33;
	public static readonly RULE_databaseComment = 34;
	public static readonly RULE_truncateTableStatement = 35;
	public static readonly RULE_dropTableStatement = 36;
	public static readonly RULE_inputFileFormat = 37;
	public static readonly RULE_tabTypeExpr = 38;
	public static readonly RULE_partTypeExpr = 39;
	public static readonly RULE_tabPartColTypeExpr = 40;
	public static readonly RULE_descStatement = 41;
	public static readonly RULE_analyzeStatement = 42;
	public static readonly RULE_from_in = 43;
	public static readonly RULE_db_schema = 44;
	public static readonly RULE_showStatement = 45;
	public static readonly RULE_showTablesFilterExpr = 46;
	public static readonly RULE_lockStatement = 47;
	public static readonly RULE_lockDatabase = 48;
	public static readonly RULE_lockMode = 49;
	public static readonly RULE_unlockStatement = 50;
	public static readonly RULE_unlockDatabase = 51;
	public static readonly RULE_createRoleStatement = 52;
	public static readonly RULE_dropRoleStatement = 53;
	public static readonly RULE_grantPrivileges = 54;
	public static readonly RULE_revokePrivileges = 55;
	public static readonly RULE_grantRole = 56;
	public static readonly RULE_revokeRole = 57;
	public static readonly RULE_showRoleGrants = 58;
	public static readonly RULE_showRoles = 59;
	public static readonly RULE_showCurrentRole = 60;
	public static readonly RULE_setRole = 61;
	public static readonly RULE_showGrants = 62;
	public static readonly RULE_showRolePrincipals = 63;
	public static readonly RULE_privilegeIncludeColObject = 64;
	public static readonly RULE_privilegeObject = 65;
	public static readonly RULE_privObject = 66;
	public static readonly RULE_privObjectCols = 67;
	public static readonly RULE_privilegeList = 68;
	public static readonly RULE_privlegeDef = 69;
	public static readonly RULE_privilegeType = 70;
	public static readonly RULE_principalSpecification = 71;
	public static readonly RULE_principalName = 72;
	public static readonly RULE_withGrantOption = 73;
	public static readonly RULE_grantOptionFor = 74;
	public static readonly RULE_adminOptionFor = 75;
	public static readonly RULE_withAdminOption = 76;
	public static readonly RULE_metastoreCheck = 77;
	public static readonly RULE_resourceList = 78;
	public static readonly RULE_resource = 79;
	public static readonly RULE_resourceType = 80;
	public static readonly RULE_createFunctionStatement = 81;
	public static readonly RULE_dropFunctionStatement = 82;
	public static readonly RULE_reloadFunctionsStatement = 83;
	public static readonly RULE_createMacroStatement = 84;
	public static readonly RULE_dropMacroStatement = 85;
	public static readonly RULE_createViewStatement = 86;
	public static readonly RULE_viewPartition = 87;
	public static readonly RULE_viewOrganization = 88;
	public static readonly RULE_viewClusterSpec = 89;
	public static readonly RULE_viewComplexSpec = 90;
	public static readonly RULE_viewDistSpec = 91;
	public static readonly RULE_viewSortSpec = 92;
	public static readonly RULE_dropViewStatement = 93;
	public static readonly RULE_createMaterializedViewStatement = 94;
	public static readonly RULE_dropMaterializedViewStatement = 95;
	public static readonly RULE_createScheduledQueryStatement = 96;
	public static readonly RULE_dropScheduledQueryStatement = 97;
	public static readonly RULE_alterScheduledQueryStatement = 98;
	public static readonly RULE_alterScheduledQueryChange = 99;
	public static readonly RULE_scheduleSpec = 100;
	public static readonly RULE_executedAsSpec = 101;
	public static readonly RULE_definedAsSpec = 102;
	public static readonly RULE_showFunctionIdentifier = 103;
	public static readonly RULE_showStmtIdentifier = 104;
	public static readonly RULE_tableComment = 105;
	public static readonly RULE_createTablePartitionSpec = 106;
	public static readonly RULE_createTablePartitionColumnTypeSpec = 107;
	public static readonly RULE_createTablePartitionColumnSpec = 108;
	public static readonly RULE_partitionTransformSpec = 109;
	public static readonly RULE_columnNameTransformConstraint = 110;
	public static readonly RULE_partitionTransformType = 111;
	public static readonly RULE_tableBuckets = 112;
	public static readonly RULE_tableImplBuckets = 113;
	public static readonly RULE_tableSkewed = 114;
	public static readonly RULE_rowFormat = 115;
	public static readonly RULE_recordReader = 116;
	public static readonly RULE_recordWriter = 117;
	public static readonly RULE_rowFormatSerde = 118;
	public static readonly RULE_rowFormatDelimited = 119;
	public static readonly RULE_tableRowFormat = 120;
	public static readonly RULE_tablePropertiesPrefixed = 121;
	public static readonly RULE_tableProperties = 122;
	public static readonly RULE_tablePropertiesList = 123;
	public static readonly RULE_keyValueProperty = 124;
	public static readonly RULE_keyProperty = 125;
	public static readonly RULE_tableRowFormatFieldIdentifier = 126;
	public static readonly RULE_tableRowFormatCollItemsIdentifier = 127;
	public static readonly RULE_tableRowFormatMapKeysIdentifier = 128;
	public static readonly RULE_tableRowFormatLinesIdentifier = 129;
	public static readonly RULE_tableRowNullFormat = 130;
	public static readonly RULE_tableFileFormat = 131;
	public static readonly RULE_tableLocation = 132;
	public static readonly RULE_columnNameTypeList = 133;
	public static readonly RULE_columnNameTypeOrConstraintList = 134;
	public static readonly RULE_columnNameColonTypeList = 135;
	public static readonly RULE_columnNameList = 136;
	public static readonly RULE_columnName = 137;
	public static readonly RULE_extColumnName = 138;
	public static readonly RULE_columnNameOrderList = 139;
	public static readonly RULE_columnParenthesesList = 140;
	public static readonly RULE_enableValidateSpecification = 141;
	public static readonly RULE_enableSpecification = 142;
	public static readonly RULE_validateSpecification = 143;
	public static readonly RULE_enforcedSpecification = 144;
	public static readonly RULE_relySpecification = 145;
	public static readonly RULE_createConstraint = 146;
	public static readonly RULE_alterConstraintWithName = 147;
	public static readonly RULE_tableLevelConstraint = 148;
	public static readonly RULE_pkUkConstraint = 149;
	public static readonly RULE_checkConstraint = 150;
	public static readonly RULE_createForeignKey = 151;
	public static readonly RULE_alterForeignKeyWithName = 152;
	public static readonly RULE_skewedValueElement = 153;
	public static readonly RULE_skewedColumnValuePairList = 154;
	public static readonly RULE_skewedColumnValuePair = 155;
	public static readonly RULE_skewedColumnValues = 156;
	public static readonly RULE_skewedColumnValue = 157;
	public static readonly RULE_skewedValueLocationElement = 158;
	public static readonly RULE_orderSpecification = 159;
	public static readonly RULE_nullOrdering = 160;
	public static readonly RULE_columnNameOrder = 161;
	public static readonly RULE_columnNameCommentList = 162;
	public static readonly RULE_columnNameComment = 163;
	public static readonly RULE_orderSpecificationRewrite = 164;
	public static readonly RULE_columnRefOrder = 165;
	public static readonly RULE_columnNameType = 166;
	public static readonly RULE_columnNameTypeOrConstraint = 167;
	public static readonly RULE_tableConstraint = 168;
	public static readonly RULE_columnNameTypeConstraint = 169;
	public static readonly RULE_columnConstraint = 170;
	public static readonly RULE_foreignKeyConstraint = 171;
	public static readonly RULE_colConstraint = 172;
	public static readonly RULE_alterColumnConstraint = 173;
	public static readonly RULE_alterForeignKeyConstraint = 174;
	public static readonly RULE_alterColConstraint = 175;
	public static readonly RULE_columnConstraintType = 176;
	public static readonly RULE_defaultVal = 177;
	public static readonly RULE_tableConstraintType = 178;
	public static readonly RULE_constraintOptsCreate = 179;
	public static readonly RULE_constraintOptsAlter = 180;
	public static readonly RULE_columnNameColonType = 181;
	public static readonly RULE_colType = 182;
	public static readonly RULE_colTypeList = 183;
	public static readonly RULE_type = 184;
	public static readonly RULE_primitiveType = 185;
	public static readonly RULE_listType = 186;
	public static readonly RULE_structType = 187;
	public static readonly RULE_mapType = 188;
	public static readonly RULE_unionType = 189;
	public static readonly RULE_setOperator = 190;
	public static readonly RULE_queryStatementExpression = 191;
	public static readonly RULE_queryStatementExpressionBody = 192;
	public static readonly RULE_withClause = 193;
	public static readonly RULE_cteStatement = 194;
	public static readonly RULE_fromStatement = 195;
	public static readonly RULE_singleFromStatement = 196;
	public static readonly RULE_regularBody = 197;
	public static readonly RULE_atomSelectStatement = 198;
	public static readonly RULE_selectStatement = 199;
	public static readonly RULE_setOpSelectStatement = 200;
	public static readonly RULE_selectStatementWithCTE = 201;
	public static readonly RULE_body = 202;
	public static readonly RULE_insertClause = 203;
	public static readonly RULE_destination = 204;
	public static readonly RULE_limitClause = 205;
	public static readonly RULE_deleteStatement = 206;
	public static readonly RULE_columnAssignmentClause = 207;
	public static readonly RULE_precedencePlusExpressionOrDefault = 208;
	public static readonly RULE_setColumnsClause = 209;
	public static readonly RULE_updateStatement = 210;
	public static readonly RULE_sqlTransactionStatement = 211;
	public static readonly RULE_startTransactionStatement = 212;
	public static readonly RULE_transactionMode = 213;
	public static readonly RULE_transactionAccessMode = 214;
	public static readonly RULE_isolationLevel = 215;
	public static readonly RULE_levelOfIsolation = 216;
	public static readonly RULE_commitStatement = 217;
	public static readonly RULE_rollbackStatement = 218;
	public static readonly RULE_setAutoCommitStatement = 219;
	public static readonly RULE_abortTransactionStatement = 220;
	public static readonly RULE_abortCompactionStatement = 221;
	public static readonly RULE_mergeStatement = 222;
	public static readonly RULE_whenClauses = 223;
	public static readonly RULE_whenNotMatchedClause = 224;
	public static readonly RULE_whenMatchedAndClause = 225;
	public static readonly RULE_whenMatchedThenClause = 226;
	public static readonly RULE_updateOrDelete = 227;
	public static readonly RULE_killQueryStatement = 228;
	public static readonly RULE_compactionId = 229;
	public static readonly RULE_compactionPool = 230;
	public static readonly RULE_compactionType = 231;
	public static readonly RULE_compactionStatus = 232;
	public static readonly RULE_alterStatement = 233;
	public static readonly RULE_alterTableStatementSuffix = 234;
	public static readonly RULE_alterTblPartitionStatementSuffix = 235;
	public static readonly RULE_alterStatementPartitionKeyType = 236;
	public static readonly RULE_alterViewStatementSuffix = 237;
	public static readonly RULE_alterMaterializedViewStatementSuffix = 238;
	public static readonly RULE_alterMaterializedViewSuffixRewrite = 239;
	public static readonly RULE_alterMaterializedViewSuffixRebuild = 240;
	public static readonly RULE_alterDatabaseStatementSuffix = 241;
	public static readonly RULE_alterDatabaseSuffixProperties = 242;
	public static readonly RULE_alterDatabaseSuffixSetOwner = 243;
	public static readonly RULE_alterDatabaseSuffixSetLocation = 244;
	public static readonly RULE_alterDatabaseSuffixSetManagedLocation = 245;
	public static readonly RULE_alterStatementSuffixRename = 246;
	public static readonly RULE_alterStatementSuffixAddCol = 247;
	public static readonly RULE_alterStatementSuffixAddConstraint = 248;
	public static readonly RULE_alterStatementSuffixUpdateColumns = 249;
	public static readonly RULE_alterStatementSuffixDropConstraint = 250;
	public static readonly RULE_alterStatementSuffixRenameCol = 251;
	public static readonly RULE_alterStatementSuffixUpdateStatsCol = 252;
	public static readonly RULE_alterStatementSuffixUpdateStats = 253;
	public static readonly RULE_alterStatementChangeColPosition = 254;
	public static readonly RULE_alterStatementSuffixAddPartitions = 255;
	public static readonly RULE_alterStatementSuffixAddPartitionsElement = 256;
	public static readonly RULE_alterStatementSuffixTouch = 257;
	public static readonly RULE_alterStatementSuffixArchive = 258;
	public static readonly RULE_alterStatementSuffixUnArchive = 259;
	public static readonly RULE_partitionLocation = 260;
	public static readonly RULE_alterStatementSuffixDropPartitions = 261;
	public static readonly RULE_alterStatementSuffixProperties = 262;
	public static readonly RULE_alterViewSuffixProperties = 263;
	public static readonly RULE_alterStatementSuffixSerdeProperties = 264;
	public static readonly RULE_tablePartitionPrefix = 265;
	public static readonly RULE_alterStatementSuffixFileFormat = 266;
	public static readonly RULE_alterStatementSuffixClusterbySortby = 267;
	public static readonly RULE_alterTblPartitionStatementSuffixSkewedLocation = 268;
	public static readonly RULE_skewedLocations = 269;
	public static readonly RULE_skewedLocationsList = 270;
	public static readonly RULE_skewedLocationMap = 271;
	public static readonly RULE_alterStatementSuffixLocation = 272;
	public static readonly RULE_alterStatementSuffixSkewedby = 273;
	public static readonly RULE_alterStatementSuffixExchangePartition = 274;
	public static readonly RULE_alterStatementSuffixRenamePart = 275;
	public static readonly RULE_alterStatementSuffixStatsPart = 276;
	public static readonly RULE_alterStatementSuffixMergeFiles = 277;
	public static readonly RULE_alterStatementSuffixBucketNum = 278;
	public static readonly RULE_blocking = 279;
	public static readonly RULE_compactPool = 280;
	public static readonly RULE_alterStatementSuffixCompact = 281;
	public static readonly RULE_alterStatementSuffixSetOwner = 282;
	public static readonly RULE_alterStatementSuffixSetPartSpec = 283;
	public static readonly RULE_alterStatementSuffixExecute = 284;
	public static readonly RULE_fileFormat = 285;
	public static readonly RULE_alterDataConnectorStatementSuffix = 286;
	public static readonly RULE_alterDataConnectorSuffixProperties = 287;
	public static readonly RULE_alterDataConnectorSuffixSetOwner = 288;
	public static readonly RULE_alterDataConnectorSuffixSetUrl = 289;
	public static readonly RULE_likeTableOrFile = 290;
	public static readonly RULE_createTableStatement = 291;
	public static readonly RULE_createDataConnectorStatement = 292;
	public static readonly RULE_dataConnectorComment = 293;
	public static readonly RULE_dataConnectorUrl = 294;
	public static readonly RULE_dataConnectorType = 295;
	public static readonly RULE_dcProperties = 296;
	public static readonly RULE_dropDataConnectorStatement = 297;
	public static readonly RULE_tableAllColumns = 298;
	public static readonly RULE_tableOrColumn = 299;
	public static readonly RULE_defaultValue = 300;
	public static readonly RULE_expressionList = 301;
	public static readonly RULE_aliasList = 302;
	public static readonly RULE_fromClause = 303;
	public static readonly RULE_fromSource = 304;
	public static readonly RULE_atomjoinSource = 305;
	public static readonly RULE_joinSource = 306;
	public static readonly RULE_joinSourcePart = 307;
	public static readonly RULE_uniqueJoinSource = 308;
	public static readonly RULE_uniqueJoinExpr = 309;
	public static readonly RULE_uniqueJoinToken = 310;
	public static readonly RULE_joinToken = 311;
	public static readonly RULE_lateralView = 312;
	public static readonly RULE_tableAlias = 313;
	public static readonly RULE_tableBucketSample = 314;
	public static readonly RULE_splitSample = 315;
	public static readonly RULE_tableSample = 316;
	public static readonly RULE_tableSource = 317;
	public static readonly RULE_asOfClause = 318;
	public static readonly RULE_uniqueJoinTableSource = 319;
	public static readonly RULE_tableName = 320;
	public static readonly RULE_viewName = 321;
	public static readonly RULE_subQuerySource = 322;
	public static readonly RULE_partitioningSpec = 323;
	public static readonly RULE_partitionTableFunctionSource = 324;
	public static readonly RULE_partitionedTableFunction = 325;
	public static readonly RULE_whereClause = 326;
	public static readonly RULE_searchCondition = 327;
	public static readonly RULE_valuesSource = 328;
	public static readonly RULE_valuesClause = 329;
	public static readonly RULE_valuesTableConstructor = 330;
	public static readonly RULE_valueRowConstructor = 331;
	public static readonly RULE_firstValueRowConstructor = 332;
	public static readonly RULE_virtualTableSource = 333;
	public static readonly RULE_selectClause = 334;
	public static readonly RULE_all_distinct = 335;
	public static readonly RULE_selectList = 336;
	public static readonly RULE_selectTrfmClause = 337;
	public static readonly RULE_selectItem = 338;
	public static readonly RULE_trfmClause = 339;
	public static readonly RULE_selectExpression = 340;
	public static readonly RULE_selectExpressionList = 341;
	public static readonly RULE_window_clause = 342;
	public static readonly RULE_window_defn = 343;
	public static readonly RULE_window_specification = 344;
	public static readonly RULE_window_frame = 345;
	public static readonly RULE_window_range_expression = 346;
	public static readonly RULE_window_value_expression = 347;
	public static readonly RULE_window_frame_start_boundary = 348;
	public static readonly RULE_window_frame_boundary = 349;
	public static readonly RULE_groupByClause = 350;
	public static readonly RULE_groupby_expression = 351;
	public static readonly RULE_groupByEmpty = 352;
	public static readonly RULE_rollupStandard = 353;
	public static readonly RULE_rollupOldSyntax = 354;
	public static readonly RULE_groupingSetExpression = 355;
	public static readonly RULE_groupingSetExpressionMultiple = 356;
	public static readonly RULE_groupingExpressionSingle = 357;
	public static readonly RULE_havingClause = 358;
	public static readonly RULE_qualifyClause = 359;
	public static readonly RULE_havingCondition = 360;
	public static readonly RULE_expressionsInParenthesis = 361;
	public static readonly RULE_expressionsNotInParenthesis = 362;
	public static readonly RULE_expressionPart = 363;
	public static readonly RULE_expressionOrDefault = 364;
	public static readonly RULE_firstExpressionsWithAlias = 365;
	public static readonly RULE_expressionWithAlias = 366;
	public static readonly RULE_expressions = 367;
	public static readonly RULE_columnRefOrderInParenthesis = 368;
	public static readonly RULE_columnRefOrderNotInParenthesis = 369;
	public static readonly RULE_orderByClause = 370;
	public static readonly RULE_clusterByClause = 371;
	public static readonly RULE_partitionByClause = 372;
	public static readonly RULE_distributeByClause = 373;
	public static readonly RULE_sortByClause = 374;
	public static readonly RULE_trimFunction = 375;
	public static readonly RULE_function_ = 376;
	public static readonly RULE_null_treatment = 377;
	public static readonly RULE_functionName = 378;
	public static readonly RULE_castExpression = 379;
	public static readonly RULE_caseExpression = 380;
	public static readonly RULE_whenExpression = 381;
	public static readonly RULE_floorExpression = 382;
	public static readonly RULE_floorDateQualifiers = 383;
	public static readonly RULE_extractExpression = 384;
	public static readonly RULE_timeQualifiers = 385;
	public static readonly RULE_constant = 386;
	public static readonly RULE_prepareStmtParam = 387;
	public static readonly RULE_parameterIdx = 388;
	public static readonly RULE_stringLiteralSequence = 389;
	public static readonly RULE_charSetStringLiteral = 390;
	public static readonly RULE_dateLiteral = 391;
	public static readonly RULE_timestampLiteral = 392;
	public static readonly RULE_timestampLocalTZLiteral = 393;
	public static readonly RULE_intervalValue = 394;
	public static readonly RULE_intervalLiteral = 395;
	public static readonly RULE_intervalExpression = 396;
	public static readonly RULE_intervalQualifiers = 397;
	public static readonly RULE_expression = 398;
	public static readonly RULE_atomExpression = 399;
	public static readonly RULE_precedenceFieldExpression = 400;
	public static readonly RULE_precedenceUnaryOperator = 401;
	public static readonly RULE_precedenceUnaryPrefixExpression = 402;
	public static readonly RULE_precedenceBitwiseXorOperator = 403;
	public static readonly RULE_precedenceBitwiseXorExpression = 404;
	public static readonly RULE_precedenceStarOperator = 405;
	public static readonly RULE_precedenceStarExpression = 406;
	public static readonly RULE_precedencePlusOperator = 407;
	public static readonly RULE_precedencePlusExpression = 408;
	public static readonly RULE_precedenceConcatenateOperator = 409;
	public static readonly RULE_precedenceConcatenateExpression = 410;
	public static readonly RULE_precedenceAmpersandOperator = 411;
	public static readonly RULE_precedenceAmpersandExpression = 412;
	public static readonly RULE_precedenceBitwiseOrOperator = 413;
	public static readonly RULE_precedenceBitwiseOrExpression = 414;
	public static readonly RULE_precedenceRegexpOperator = 415;
	public static readonly RULE_precedenceSimilarOperator = 416;
	public static readonly RULE_subQueryExpression = 417;
	public static readonly RULE_precedenceSimilarExpression = 418;
	public static readonly RULE_precedenceSimilarExpressionMain = 419;
	public static readonly RULE_precedenceSimilarExpressionPart = 420;
	public static readonly RULE_precedenceSimilarExpressionAtom = 421;
	public static readonly RULE_precedenceSimilarExpressionQuantifierPredicate = 422;
	public static readonly RULE_quantifierType = 423;
	public static readonly RULE_precedenceSimilarExpressionIn = 424;
	public static readonly RULE_precedenceSimilarExpressionPartNot = 425;
	public static readonly RULE_precedenceDistinctOperator = 426;
	public static readonly RULE_precedenceEqualOperator = 427;
	public static readonly RULE_precedenceEqualExpression = 428;
	public static readonly RULE_isCondition = 429;
	public static readonly RULE_precedenceUnarySuffixExpression = 430;
	public static readonly RULE_precedenceNotOperator = 431;
	public static readonly RULE_precedenceNotExpression = 432;
	public static readonly RULE_precedenceAndOperator = 433;
	public static readonly RULE_precedenceAndExpression = 434;
	public static readonly RULE_precedenceOrOperator = 435;
	public static readonly RULE_precedenceOrExpression = 436;
	public static readonly RULE_booleanValue = 437;
	public static readonly RULE_booleanValueTok = 438;
	public static readonly RULE_tableOrPartition = 439;
	public static readonly RULE_partitionSpec = 440;
	public static readonly RULE_partitionVal = 441;
	public static readonly RULE_partitionSelectorSpec = 442;
	public static readonly RULE_partitionSelectorVal = 443;
	public static readonly RULE_partitionSelectorOperator = 444;
	public static readonly RULE_subQuerySelectorOperator = 445;
	public static readonly RULE_sysFuncNames = 446;
	public static readonly RULE_descFuncNames = 447;
	public static readonly RULE_id_ = 448;
	public static readonly RULE_functionIdentifier = 449;
	public static readonly RULE_principalIdentifier = 450;
	public static readonly RULE_nonReserved = 451;
	public static readonly RULE_sql11ReservedKeywordsUsedAsFunctionName = 452;
	public static readonly RULE_hint = 453;
	public static readonly RULE_hintList = 454;
	public static readonly RULE_hintItem = 455;
	public static readonly RULE_hintName = 456;
	public static readonly RULE_hintArgs = 457;
	public static readonly RULE_hintArgName = 458;
	public static readonly RULE_prepareStatement = 459;
	public static readonly RULE_executeStatement = 460;
	public static readonly RULE_executeParamList = 461;
	public static readonly RULE_resourcePlanDdlStatements = 462;
	public static readonly RULE_rpAssign = 463;
	public static readonly RULE_rpAssignList = 464;
	public static readonly RULE_rpUnassign = 465;
	public static readonly RULE_rpUnassignList = 466;
	public static readonly RULE_createResourcePlanStatement = 467;
	public static readonly RULE_withReplace = 468;
	public static readonly RULE_activate = 469;
	public static readonly RULE_enable = 470;
	public static readonly RULE_disable = 471;
	public static readonly RULE_unmanaged = 472;
	public static readonly RULE_alterResourcePlanStatement = 473;
	public static readonly RULE_globalWmStatement = 474;
	public static readonly RULE_replaceResourcePlanStatement = 475;
	public static readonly RULE_dropResourcePlanStatement = 476;
	public static readonly RULE_poolPath = 477;
	public static readonly RULE_triggerExpression = 478;
	public static readonly RULE_triggerExpressionStandalone = 479;
	public static readonly RULE_triggerOrExpression = 480;
	public static readonly RULE_triggerAndExpression = 481;
	public static readonly RULE_triggerAtomExpression = 482;
	public static readonly RULE_triggerLiteral = 483;
	public static readonly RULE_comparisionOperator = 484;
	public static readonly RULE_triggerActionExpression = 485;
	public static readonly RULE_triggerActionExpressionStandalone = 486;
	public static readonly RULE_createTriggerStatement = 487;
	public static readonly RULE_alterTriggerStatement = 488;
	public static readonly RULE_dropTriggerStatement = 489;
	public static readonly RULE_poolAssign = 490;
	public static readonly RULE_poolAssignList = 491;
	public static readonly RULE_createPoolStatement = 492;
	public static readonly RULE_alterPoolStatement = 493;
	public static readonly RULE_dropPoolStatement = 494;
	public static readonly RULE_createMappingStatement = 495;
	public static readonly RULE_alterMappingStatement = 496;
	public static readonly RULE_dropMappingStatement = 497;
	public static readonly literalNames: (string | null)[] = [ null, "'ABORT'", 
                                                            "'ACTIVATE'", 
                                                            "'ACTIVE'", 
                                                            "'ADD'", "'ADMIN'", 
                                                            "'AFTER'", "'ALL'", 
                                                            "'ALLOC_FRACTION'", 
                                                            "'ALTER'", "'ANALYZE'", 
                                                            "'AND'", "'ANTI'", 
                                                            "'ANY'", "'APPLICATION'", 
                                                            "'ARCHIVE'", 
                                                            "'ARRAY'", "'AS'", 
                                                            "'ASC'", "'AST'", 
                                                            "'AT'", "'AUTHORIZATION'", 
                                                            "'AUTOCOMMIT'", 
                                                            "'KW_BATCH'", 
                                                            "'BEFORE'", 
                                                            "'BETWEEN'", 
                                                            "'BIGINT'", 
                                                            "'BINARY'", 
                                                            "'BOOLEAN'", 
                                                            "'BOTH'", "'BUCKET'", 
                                                            "'BUCKETS'", 
                                                            "'BY'", "'CACHE'", 
                                                            "'CASCADE'", 
                                                            "'CASE'", "'CAST'", 
                                                            "'CBO'", "'CHANGE'", 
                                                            "'CHAR'", "'CHECK'", 
                                                            "'CLUSTER'", 
                                                            "'CLUSTERED'", 
                                                            "'CLUSTERSTATUS'", 
                                                            "'COLLECTION'", 
                                                            "'COLUMN'", 
                                                            "'COLUMNS'", 
                                                            "'COMMENT'", 
                                                            "'COMMIT'", 
                                                            "'COMPACT'", 
                                                            "'COMPACTIONS'", 
                                                            "'COMPACTIONID'", 
                                                            "'COMPUTE'", 
                                                            "'CONCATENATE'", 
                                                            "'CONF'", "'CONSTRAINT'", 
                                                            "'CONTINUE'", 
                                                            "'COST'", "'CREATE'", 
                                                            "'CRON'", "'CROSS'", 
                                                            "'CUBE'", "'CURRENT'", 
                                                            "'CURRENT_DATE'", 
                                                            "'CURRENT_TIMESTAMP'", 
                                                            "'CURSOR'", 
                                                            "'DATA'", "'DATABASE'", 
                                                            "'DATABASES'", 
                                                            "'CONNECTOR'", 
                                                            "'CONNECTORS'", 
                                                            "'DATE'", "'DATETIME'", 
                                                            null, "'KW_DAYOFWEEK'", 
                                                            "'DBPROPERTIES'", 
                                                            "'DCPROPERTIES'", 
                                                            "'DDL'", "'DEBUG'", 
                                                            null, "'DEFAULT'", 
                                                            "'DEFERRED'", 
                                                            "'DEFINED'", 
                                                            "'DELETE'", 
                                                            "'DELIMITED'", 
                                                            "'DEPENDENCY'", 
                                                            "'DESC'", "'DESCRIBE'", 
                                                            "'DETAIL'", 
                                                            "'DIRECTORIES'", 
                                                            "'DIRECTORY'", 
                                                            null, "'DISTINCT'", 
                                                            "'DISTRIBUTE'", 
                                                            "'DISTRIBUTED'", 
                                                            "'DO'", "'DOUBLE'", 
                                                            "'DAYOFWEEK'", 
                                                            "'DROP'", "'DUMP'", 
                                                            "'$ELEM$'", 
                                                            "'ELSE'", null, 
                                                            "'END'", "'ENFORCED'", 
                                                            "'ESCAPED'", 
                                                            "'EVERY'", "'EXCEPT'", 
                                                            "'EXCHANGE'", 
                                                            "'EXCLUSIVE'", 
                                                            "'EXECUTE'", 
                                                            "'EXECUTED'", 
                                                            "'EXISTS'", 
                                                            "'EXPIRE_SNAPSHOTS'", 
                                                            "'EXPLAIN'", 
                                                            "'EXPORT'", 
                                                            "'EXPRESSION'", 
                                                            "'EXTENDED'", 
                                                            "'EXTERNAL'", 
                                                            "'EXTRACT'", 
                                                            "'FALSE'", "'FETCH'", 
                                                            "'FIELDS'", 
                                                            "'FILE'", "'FILEFORMAT'", 
                                                            "'FIRST'", "'FLOAT'", 
                                                            "'FLOOR'", "'FOLLOWING'", 
                                                            "'FOR'", "'FORCE'", 
                                                            "'FOREIGN'", 
                                                            "'FORMAT'", 
                                                            "'FORMATTED'", 
                                                            "'FROM'", "'FULL'", 
                                                            "'FUNCTION'", 
                                                            "'FUNCTIONS'", 
                                                            "'GRANT'", "'GROUP'", 
                                                            "'GROUPING'", 
                                                            "'HAVING'", 
                                                            "'KW_HOLD_DDLTIME'", 
                                                            null, "'IDXPROPERTIES'", 
                                                            "'IF'", "'IGNORE'", 
                                                            "'IMPORT'", 
                                                            "'IN'", "'INDEX'", 
                                                            "'INDEXES'", 
                                                            "'INNER'", "'INPATH'", 
                                                            "'INPUTDRIVER'", 
                                                            "'INPUTFORMAT'", 
                                                            "'INSERT'", 
                                                            null, "'INTERSECT'", 
                                                            "'INTERVAL'", 
                                                            "'INTO'", "'IS'", 
                                                            "'ISOLATION'", 
                                                            "'ITEMS'", "'JAR'", 
                                                            "'JOIN'", "'JOINCOST'", 
                                                            "'KEY'", "'KEYS'", 
                                                            "'$KEY$'", "'KILL'", 
                                                            "'LAST'", "'LATERAL'", 
                                                            "'LEADING'", 
                                                            "'LEFT'", "'LESS'", 
                                                            "'LEVEL'", "'LIKE'", 
                                                            "'LIMIT'", "'LINES'", 
                                                            "'LOAD'", "'LOCAL'", 
                                                            "'LOCATION'", 
                                                            "'LOCK'", "'LOCKS'", 
                                                            "'LOGICAL'", 
                                                            "'LONG'", "'MACRO'", 
                                                            "'MANAGED'", 
                                                            "'MANAGEDLOCATION'", 
                                                            "'MANAGEMENT'", 
                                                            "'MAP'", "'MAPJOIN'", 
                                                            "'MAPPING'", 
                                                            "'MATCHED'", 
                                                            "'MATERIALIZED'", 
                                                            "'MERGE'", "'METADATA'", 
                                                            "'MINUS'", null, 
                                                            null, "'MORE'", 
                                                            "'MOVE'", "'MSCK'", 
                                                            "'NONE'", "'NORELY'", 
                                                            "'NOSCAN'", 
                                                            null, "'NOVALIDATE'", 
                                                            "'KW_NO_DROP'", 
                                                            "'NULL'", "'NULLS'", 
                                                            "'OF'", "'KW_OFFLINE'", 
                                                            "'OFFSET'", 
                                                            "'ON'", "'ONLY'", 
                                                            "'OPERATOR'", 
                                                            "'OPTION'", 
                                                            "'OR'", "'ORDER'", 
                                                            "'OUT'", "'OUTER'", 
                                                            "'OUTPUTDRIVER'", 
                                                            "'OUTPUTFORMAT'", 
                                                            "'OVER'", "'OVERWRITE'", 
                                                            "'OWNER'", "'PARTITION'", 
                                                            "'PARTITIONED'", 
                                                            "'PARTITIONS'", 
                                                            "'PATH'", "'PERCENT'", 
                                                            "'PKFK_JOIN'", 
                                                            "'PLAN'", "'PLANS'", 
                                                            "'PLUS'", "'POOL'", 
                                                            "'PRECEDING'", 
                                                            "'PRECISION'", 
                                                            "'PREPARE'", 
                                                            "'PRESERVE'", 
                                                            "'PRIMARY'", 
                                                            "'PRINCIPALS'", 
                                                            "'PROCEDURE'", 
                                                            "'KW_PROTECTION'", 
                                                            "'PURGE'", "'QUALIFY'", 
                                                            "'QUARTER'", 
                                                            "'QUERY'", "'QUERY_PARALLELISM'", 
                                                            "'RANGE'", "'READ'", 
                                                            "'KW_READONLY'", 
                                                            "'READS'", "'REAL'", 
                                                            "'REBUILD'", 
                                                            "'RECORDREADER'", 
                                                            "'RECORDWRITER'", 
                                                            "'REDUCE'", 
                                                            "'REFERENCES'", 
                                                            "'REGEXP'", 
                                                            "'RELOAD'", 
                                                            "'RELY'", "'REMOTE'", 
                                                            "'RENAME'", 
                                                            "'REOPTIMIZATION'", 
                                                            "'REPAIR'", 
                                                            "'REPL'", "'REPLACE'", 
                                                            "'REPLICATION'", 
                                                            "'RESOURCE'", 
                                                            "'RESPECT'", 
                                                            "'RESTRICT'", 
                                                            "'REVOKE'", 
                                                            "'REWRITE'", 
                                                            "'RIGHT'", "'RLIKE'", 
                                                            "'ROLE'", "'ROLES'", 
                                                            "'ROLLBACK'", 
                                                            "'ROLLUP'", 
                                                            "'ROW'", "'ROWS'", 
                                                            "'SCHEDULED'", 
                                                            "'SCHEDULING_POLICY'", 
                                                            "'SCHEMA'", 
                                                            "'SCHEMAS'", 
                                                            null, "'SELECT'", 
                                                            "'SEMI'", "'SERDE'", 
                                                            "'SERDEPROPERTIES'", 
                                                            "'SERVER'", 
                                                            "'SET'", "'SETS'", 
                                                            "'SET_CURRENT_SNAPSHOT'", 
                                                            "'SHARED'", 
                                                            "'SHOW'", "'SHOW_DATABASE'", 
                                                            "'SKEWED'", 
                                                            "'SMALLINT'", 
                                                            "'SNAPSHOT'", 
                                                            "'SOME'", "'SORT'", 
                                                            "'SORTED'", 
                                                            "'SPEC'", "'SSL'", 
                                                            "'START'", "'STATISTICS'", 
                                                            "'STATUS'", 
                                                            "'STORED'", 
                                                            "'STREAMTABLE'", 
                                                            "'STRING'", 
                                                            "'STRUCT'", 
                                                            "'SUMMARY'", 
                                                            "'SYNC'", "'SYSTEM_TIME'", 
                                                            "'SYSTEM_VERSION'", 
                                                            "'TABLE'", "'TABLES'", 
                                                            "'TABLESAMPLE'", 
                                                            "'TBLPROPERTIES'", 
                                                            "'TEMPORARY'", 
                                                            "'TERMINATED'", 
                                                            "'THEN'", "'TIME'", 
                                                            "'TIMESTAMP'", 
                                                            "'TIMESTAMPLOCALTZ'", 
                                                            "'KW_TIMESTAMPTZ'", 
                                                            "'TINYINT'", 
                                                            "'TO'", "'TOUCH'", 
                                                            "'TRAILING'", 
                                                            "'TRANSACTION'", 
                                                            "'TRANSACTIONAL'", 
                                                            "'TRANSACTIONS'", 
                                                            "'TRANSFORM'", 
                                                            "'TRIGGER'", 
                                                            "'TRIM'", "'TRUE'", 
                                                            "'TRUNCATE'", 
                                                            "'TYPE'", "'UNARCHIVE'", 
                                                            "'UNBOUNDED'", 
                                                            "'UNDO'", "'UNION'", 
                                                            "'UNIONTYPE'", 
                                                            "'UNIQUE'", 
                                                            "'UNIQUEJOIN'", 
                                                            "'UNKNOWN'", 
                                                            "'UNLOCK'", 
                                                            "'UNMANAGED'", 
                                                            "'UNSET'", "'UNSIGNED'", 
                                                            "'UPDATE'", 
                                                            "'URI'", "'URL'", 
                                                            "'USE'", "'USER'", 
                                                            "'USING'", "'UTC'", 
                                                            "'UTC_TMESTAMP'", 
                                                            "'VALIDATE'", 
                                                            "'VALUES'", 
                                                            "'$VALUE$'", 
                                                            "'VARCHAR'", 
                                                            "'VECTORIZATION'", 
                                                            "'VIEW'", "'VIEWS'", 
                                                            "'WAIT'", null, 
                                                            "'WHEN'", "'WHERE'", 
                                                            "'WHILE'", "'WINDOW'", 
                                                            "'WITH'", "'WITHIN'", 
                                                            "'WORK'", "'WORKLOAD'", 
                                                            "'WRITE'", null, 
                                                            "'ZONE'", "'.'", 
                                                            "':'", "','", 
                                                            "';'", "'('", 
                                                            "')'", "'['", 
                                                            "']'", "'{'", 
                                                            "'}'", null, 
                                                            "'<=>'", null, 
                                                            "'<='", "'<'", 
                                                            "'>='", "'>'", 
                                                            "'/'", "'+'", 
                                                            "'-'", "'*'", 
                                                            "'%'", "'DIV'", 
                                                            "'&'", "'~'", 
                                                            "'|'", "'||'", 
                                                            "'^'", "'?'", 
                                                            "'$'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "KW_ABORT", 
                                                             "KW_ACTIVATE", 
                                                             "KW_ACTIVE", 
                                                             "KW_ADD", "KW_ADMIN", 
                                                             "KW_AFTER", 
                                                             "KW_ALL", "KW_ALLOC_FRACTION", 
                                                             "KW_ALTER", 
                                                             "KW_ANALYZE", 
                                                             "KW_AND", "KW_ANTI", 
                                                             "KW_ANY", "KW_APPLICATION", 
                                                             "KW_ARCHIVE", 
                                                             "KW_ARRAY", 
                                                             "KW_AS", "KW_ASC", 
                                                             "KW_AST", "KW_AT", 
                                                             "KW_AUTHORIZATION", 
                                                             "KW_AUTOCOMMIT", 
                                                             "KW_BATCH", 
                                                             "KW_BEFORE", 
                                                             "KW_BETWEEN", 
                                                             "KW_BIGINT", 
                                                             "KW_BINARY", 
                                                             "KW_BOOLEAN", 
                                                             "KW_BOTH", 
                                                             "KW_BUCKET", 
                                                             "KW_BUCKETS", 
                                                             "KW_BY", "KW_CACHE", 
                                                             "KW_CASCADE", 
                                                             "KW_CASE", 
                                                             "KW_CAST", 
                                                             "KW_CBO", "KW_CHANGE", 
                                                             "KW_CHAR", 
                                                             "KW_CHECK", 
                                                             "KW_CLUSTER", 
                                                             "KW_CLUSTERED", 
                                                             "KW_CLUSTERSTATUS", 
                                                             "KW_COLLECTION", 
                                                             "KW_COLUMN", 
                                                             "KW_COLUMNS", 
                                                             "KW_COMMENT", 
                                                             "KW_COMMIT", 
                                                             "KW_COMPACT", 
                                                             "KW_COMPACTIONS", 
                                                             "KW_COMPACT_ID", 
                                                             "KW_COMPUTE", 
                                                             "KW_CONCATENATE", 
                                                             "KW_CONF", 
                                                             "KW_CONSTRAINT", 
                                                             "KW_CONTINUE", 
                                                             "KW_COST", 
                                                             "KW_CREATE", 
                                                             "KW_CRON", 
                                                             "KW_CROSS", 
                                                             "KW_CUBE", 
                                                             "KW_CURRENT", 
                                                             "KW_CURRENT_DATE", 
                                                             "KW_CURRENT_TIMESTAMP", 
                                                             "KW_CURSOR", 
                                                             "KW_DATA", 
                                                             "KW_DATABASE", 
                                                             "KW_DATABASES", 
                                                             "KW_DATACONNECTOR", 
                                                             "KW_DATACONNECTORS", 
                                                             "KW_DATE", 
                                                             "KW_DATETIME", 
                                                             "KW_DAY", "KW_DAYOFWEEK", 
                                                             "KW_DBPROPERTIES", 
                                                             "KW_DCPROPERTIES", 
                                                             "KW_DDL", "KW_DEBUG", 
                                                             "KW_DECIMAL", 
                                                             "KW_DEFAULT", 
                                                             "KW_DEFERRED", 
                                                             "KW_DEFINED", 
                                                             "KW_DELETE", 
                                                             "KW_DELIMITED", 
                                                             "KW_DEPENDENCY", 
                                                             "KW_DESC", 
                                                             "KW_DESCRIBE", 
                                                             "KW_DETAIL", 
                                                             "KW_DIRECTORIES", 
                                                             "KW_DIRECTORY", 
                                                             "KW_DISABLE", 
                                                             "KW_DISTINCT", 
                                                             "KW_DISTRIBUTE", 
                                                             "KW_DISTRIBUTED", 
                                                             "KW_DO", "KW_DOUBLE", 
                                                             "KW_DOW", "KW_DROP", 
                                                             "KW_DUMP", 
                                                             "KW_ELEM_TYPE", 
                                                             "KW_ELSE", 
                                                             "KW_ENABLE", 
                                                             "KW_END", "KW_ENFORCED", 
                                                             "KW_ESCAPED", 
                                                             "KW_EVERY", 
                                                             "KW_EXCEPT", 
                                                             "KW_EXCHANGE", 
                                                             "KW_EXCLUSIVE", 
                                                             "KW_EXECUTE", 
                                                             "KW_EXECUTED", 
                                                             "KW_EXISTS", 
                                                             "KW_EXPIRE_SNAPSHOTS", 
                                                             "KW_EXPLAIN", 
                                                             "KW_EXPORT", 
                                                             "KW_EXPRESSION", 
                                                             "KW_EXTENDED", 
                                                             "KW_EXTERNAL", 
                                                             "KW_EXTRACT", 
                                                             "KW_FALSE", 
                                                             "KW_FETCH", 
                                                             "KW_FIELDS", 
                                                             "KW_FILE", 
                                                             "KW_FILEFORMAT", 
                                                             "KW_FIRST", 
                                                             "KW_FLOAT", 
                                                             "KW_FLOOR", 
                                                             "KW_FOLLOWING", 
                                                             "KW_FOR", "KW_FORCE", 
                                                             "KW_FOREIGN", 
                                                             "KW_FORMAT", 
                                                             "KW_FORMATTED", 
                                                             "KW_FROM", 
                                                             "KW_FULL", 
                                                             "KW_FUNCTION", 
                                                             "KW_FUNCTIONS", 
                                                             "KW_GRANT", 
                                                             "KW_GROUP", 
                                                             "KW_GROUPING", 
                                                             "KW_HAVING", 
                                                             "KW_HOLD_DDLTIME", 
                                                             "KW_HOUR", 
                                                             "KW_IDXPROPERTIES", 
                                                             "KW_IF", "KW_IGNORE", 
                                                             "KW_IMPORT", 
                                                             "KW_IN", "KW_INDEX", 
                                                             "KW_INDEXES", 
                                                             "KW_INNER", 
                                                             "KW_INPATH", 
                                                             "KW_INPUTDRIVER", 
                                                             "KW_INPUTFORMAT", 
                                                             "KW_INSERT", 
                                                             "KW_INT", "KW_INTERSECT", 
                                                             "KW_INTERVAL", 
                                                             "KW_INTO", 
                                                             "KW_IS", "KW_ISOLATION", 
                                                             "KW_ITEMS", 
                                                             "KW_JAR", "KW_JOIN", 
                                                             "KW_JOINCOST", 
                                                             "KW_KEY", "KW_KEYS", 
                                                             "KW_KEY_TYPE", 
                                                             "KW_KILL", 
                                                             "KW_LAST", 
                                                             "KW_LATERAL", 
                                                             "KW_LEADING", 
                                                             "KW_LEFT", 
                                                             "KW_LESS", 
                                                             "KW_LEVEL", 
                                                             "KW_LIKE", 
                                                             "KW_LIMIT", 
                                                             "KW_LINES", 
                                                             "KW_LOAD", 
                                                             "KW_LOCAL", 
                                                             "KW_LOCATION", 
                                                             "KW_LOCK", 
                                                             "KW_LOCKS", 
                                                             "KW_LOGICAL", 
                                                             "KW_LONG", 
                                                             "KW_MACRO", 
                                                             "KW_MANAGED", 
                                                             "KW_MANAGEDLOCATION", 
                                                             "KW_MANAGEMENT", 
                                                             "KW_MAP", "KW_MAPJOIN", 
                                                             "KW_MAPPING", 
                                                             "KW_MATCHED", 
                                                             "KW_MATERIALIZED", 
                                                             "KW_MERGE", 
                                                             "KW_METADATA", 
                                                             "KW_MINUS", 
                                                             "KW_MINUTE", 
                                                             "KW_MONTH", 
                                                             "KW_MORE", 
                                                             "KW_MOVE", 
                                                             "KW_MSCK", 
                                                             "KW_NONE", 
                                                             "KW_NORELY", 
                                                             "KW_NOSCAN", 
                                                             "KW_NOT", "KW_NOVALIDATE", 
                                                             "KW_NO_DROP", 
                                                             "KW_NULL", 
                                                             "KW_NULLS", 
                                                             "KW_OF", "KW_OFFLINE", 
                                                             "KW_OFFSET", 
                                                             "KW_ON", "KW_ONLY", 
                                                             "KW_OPERATOR", 
                                                             "KW_OPTION", 
                                                             "KW_OR", "KW_ORDER", 
                                                             "KW_OUT", "KW_OUTER", 
                                                             "KW_OUTPUTDRIVER", 
                                                             "KW_OUTPUTFORMAT", 
                                                             "KW_OVER", 
                                                             "KW_OVERWRITE", 
                                                             "KW_OWNER", 
                                                             "KW_PARTITION", 
                                                             "KW_PARTITIONED", 
                                                             "KW_PARTITIONS", 
                                                             "KW_PATH", 
                                                             "KW_PERCENT", 
                                                             "KW_PKFK_JOIN", 
                                                             "KW_PLAN", 
                                                             "KW_PLANS", 
                                                             "KW_PLUS", 
                                                             "KW_POOL", 
                                                             "KW_PRECEDING", 
                                                             "KW_PRECISION", 
                                                             "KW_PREPARE", 
                                                             "KW_PRESERVE", 
                                                             "KW_PRIMARY", 
                                                             "KW_PRINCIPALS", 
                                                             "KW_PROCEDURE", 
                                                             "KW_PROTECTION", 
                                                             "KW_PURGE", 
                                                             "KW_QUALIFY", 
                                                             "KW_QUARTER", 
                                                             "KW_QUERY", 
                                                             "KW_QUERY_PARALLELISM", 
                                                             "KW_RANGE", 
                                                             "KW_READ", 
                                                             "KW_READONLY", 
                                                             "KW_READS", 
                                                             "KW_REAL", 
                                                             "KW_REBUILD", 
                                                             "KW_RECORDREADER", 
                                                             "KW_RECORDWRITER", 
                                                             "KW_REDUCE", 
                                                             "KW_REFERENCES", 
                                                             "KW_REGEXP", 
                                                             "KW_RELOAD", 
                                                             "KW_RELY", 
                                                             "KW_REMOTE", 
                                                             "KW_RENAME", 
                                                             "KW_REOPTIMIZATION", 
                                                             "KW_REPAIR", 
                                                             "KW_REPL", 
                                                             "KW_REPLACE", 
                                                             "KW_REPLICATION", 
                                                             "KW_RESOURCE", 
                                                             "KW_RESPECT", 
                                                             "KW_RESTRICT", 
                                                             "KW_REVOKE", 
                                                             "KW_REWRITE", 
                                                             "KW_RIGHT", 
                                                             "KW_RLIKE", 
                                                             "KW_ROLE", 
                                                             "KW_ROLES", 
                                                             "KW_ROLLBACK", 
                                                             "KW_ROLLUP", 
                                                             "KW_ROW", "KW_ROWS", 
                                                             "KW_SCHEDULED", 
                                                             "KW_SCHEDULING_POLICY", 
                                                             "KW_SCHEMA", 
                                                             "KW_SCHEMAS", 
                                                             "KW_SECOND", 
                                                             "KW_SELECT", 
                                                             "KW_SEMI", 
                                                             "KW_SERDE", 
                                                             "KW_SERDEPROPERTIES", 
                                                             "KW_SERVER", 
                                                             "KW_SET", "KW_SETS", 
                                                             "KW_SET_CURRENT_SNAPSHOT", 
                                                             "KW_SHARED", 
                                                             "KW_SHOW", 
                                                             "KW_SHOW_DATABASE", 
                                                             "KW_SKEWED", 
                                                             "KW_SMALLINT", 
                                                             "KW_SNAPSHOT", 
                                                             "KW_SOME", 
                                                             "KW_SORT", 
                                                             "KW_SORTED", 
                                                             "KW_SPEC", 
                                                             "KW_SSL", "KW_START", 
                                                             "KW_STATISTICS", 
                                                             "KW_STATUS", 
                                                             "KW_STORED", 
                                                             "KW_STREAMTABLE", 
                                                             "KW_STRING", 
                                                             "KW_STRUCT", 
                                                             "KW_SUMMARY", 
                                                             "KW_SYNC", 
                                                             "KW_SYSTEM_TIME", 
                                                             "KW_SYSTEM_VERSION", 
                                                             "KW_TABLE", 
                                                             "KW_TABLES", 
                                                             "KW_TABLESAMPLE", 
                                                             "KW_TBLPROPERTIES", 
                                                             "KW_TEMPORARY", 
                                                             "KW_TERMINATED", 
                                                             "KW_THEN", 
                                                             "KW_TIME", 
                                                             "KW_TIMESTAMP", 
                                                             "KW_TIMESTAMPLOCALTZ", 
                                                             "KW_TIMESTAMPTZ", 
                                                             "KW_TINYINT", 
                                                             "KW_TO", "KW_TOUCH", 
                                                             "KW_TRAILING", 
                                                             "KW_TRANSACTION", 
                                                             "KW_TRANSACTIONAL", 
                                                             "KW_TRANSACTIONS", 
                                                             "KW_TRANSFORM", 
                                                             "KW_TRIGGER", 
                                                             "KW_TRIM", 
                                                             "KW_TRUE", 
                                                             "KW_TRUNCATE", 
                                                             "KW_TYPE", 
                                                             "KW_UNARCHIVE", 
                                                             "KW_UNBOUNDED", 
                                                             "KW_UNDO", 
                                                             "KW_UNION", 
                                                             "KW_UNIONTYPE", 
                                                             "KW_UNIQUE", 
                                                             "KW_UNIQUEJOIN", 
                                                             "KW_UNKNOWN", 
                                                             "KW_UNLOCK", 
                                                             "KW_UNMANAGED", 
                                                             "KW_UNSET", 
                                                             "KW_UNSIGNED", 
                                                             "KW_UPDATE", 
                                                             "KW_URI", "KW_URL", 
                                                             "KW_USE", "KW_USER", 
                                                             "KW_USING", 
                                                             "KW_UTC", "KW_UTCTIMESTAMP", 
                                                             "KW_VALIDATE", 
                                                             "KW_VALUES", 
                                                             "KW_VALUE_TYPE", 
                                                             "KW_VARCHAR", 
                                                             "KW_VECTORIZATION", 
                                                             "KW_VIEW", 
                                                             "KW_VIEWS", 
                                                             "KW_WAIT", 
                                                             "KW_WEEK", 
                                                             "KW_WHEN", 
                                                             "KW_WHERE", 
                                                             "KW_WHILE", 
                                                             "KW_WINDOW", 
                                                             "KW_WITH", 
                                                             "KW_WITHIN", 
                                                             "KW_WORK", 
                                                             "KW_WORKLOAD", 
                                                             "KW_WRITE", 
                                                             "KW_YEAR", 
                                                             "KW_ZONE", 
                                                             "DOT", "COLON", 
                                                             "COMMA", "SEMICOLON", 
                                                             "LPAREN", "RPAREN", 
                                                             "LSQUARE", 
                                                             "RSQUARE", 
                                                             "LCURLY", "RCURLY", 
                                                             "EQUAL", "EQUAL_NS", 
                                                             "NOTEQUAL", 
                                                             "LESSTHANOREQUALTO", 
                                                             "LESSTHAN", 
                                                             "GREATERTHANOREQUALTO", 
                                                             "GREATERTHAN", 
                                                             "DIVIDE", "PLUS", 
                                                             "MINUS", "STAR", 
                                                             "MOD", "DIV", 
                                                             "AMPERSAND", 
                                                             "TILDE", "BITWISEOR", 
                                                             "CONCATENATE", 
                                                             "BITWISEXOR", 
                                                             "QUESTION", 
                                                             "DOLLAR", "StringLiteral", 
                                                             "CharSetLiteral", 
                                                             "IntegralLiteral", 
                                                             "NumberLiteral", 
                                                             "ByteLengthLiteral", 
                                                             "Number", "Identifier", 
                                                             "CharSetName", 
                                                             "WHITE_SPACE", 
                                                             "LINE_COMMENT", 
                                                             "QUERY_HINT", 
                                                             "SHOW_HINT", 
                                                             "HIDDEN_HINT" ];
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"statement", "explainStatement", "explainOption", "vectorizationOnly", 
		"vectorizatonDetail", "execStatement", "loadStatement", "replicationClause", 
		"exportStatement", "importStatement", "replDumpStatement", "replDbPolicy", 
		"replLoadStatement", "replConfigs", "replConfigsList", "replTableLevelPolicy", 
		"replStatusStatement", "ddlStatement", "ifExists", "restrictOrCascade", 
		"ifNotExists", "force", "rewriteEnabled", "rewriteDisabled", "storedAsDirs", 
		"orReplace", "createDatabaseStatement", "dbLocation", "dbManagedLocation", 
		"dbProperties", "dbPropertiesList", "dbConnectorName", "switchDatabaseStatement", 
		"dropDatabaseStatement", "databaseComment", "truncateTableStatement", 
		"dropTableStatement", "inputFileFormat", "tabTypeExpr", "partTypeExpr", 
		"tabPartColTypeExpr", "descStatement", "analyzeStatement", "from_in", 
		"db_schema", "showStatement", "showTablesFilterExpr", "lockStatement", 
		"lockDatabase", "lockMode", "unlockStatement", "unlockDatabase", "createRoleStatement", 
		"dropRoleStatement", "grantPrivileges", "revokePrivileges", "grantRole", 
		"revokeRole", "showRoleGrants", "showRoles", "showCurrentRole", "setRole", 
		"showGrants", "showRolePrincipals", "privilegeIncludeColObject", "privilegeObject", 
		"privObject", "privObjectCols", "privilegeList", "privlegeDef", "privilegeType", 
		"principalSpecification", "principalName", "withGrantOption", "grantOptionFor", 
		"adminOptionFor", "withAdminOption", "metastoreCheck", "resourceList", 
		"resource", "resourceType", "createFunctionStatement", "dropFunctionStatement", 
		"reloadFunctionsStatement", "createMacroStatement", "dropMacroStatement", 
		"createViewStatement", "viewPartition", "viewOrganization", "viewClusterSpec", 
		"viewComplexSpec", "viewDistSpec", "viewSortSpec", "dropViewStatement", 
		"createMaterializedViewStatement", "dropMaterializedViewStatement", "createScheduledQueryStatement", 
		"dropScheduledQueryStatement", "alterScheduledQueryStatement", "alterScheduledQueryChange", 
		"scheduleSpec", "executedAsSpec", "definedAsSpec", "showFunctionIdentifier", 
		"showStmtIdentifier", "tableComment", "createTablePartitionSpec", "createTablePartitionColumnTypeSpec", 
		"createTablePartitionColumnSpec", "partitionTransformSpec", "columnNameTransformConstraint", 
		"partitionTransformType", "tableBuckets", "tableImplBuckets", "tableSkewed", 
		"rowFormat", "recordReader", "recordWriter", "rowFormatSerde", "rowFormatDelimited", 
		"tableRowFormat", "tablePropertiesPrefixed", "tableProperties", "tablePropertiesList", 
		"keyValueProperty", "keyProperty", "tableRowFormatFieldIdentifier", "tableRowFormatCollItemsIdentifier", 
		"tableRowFormatMapKeysIdentifier", "tableRowFormatLinesIdentifier", "tableRowNullFormat", 
		"tableFileFormat", "tableLocation", "columnNameTypeList", "columnNameTypeOrConstraintList", 
		"columnNameColonTypeList", "columnNameList", "columnName", "extColumnName", 
		"columnNameOrderList", "columnParenthesesList", "enableValidateSpecification", 
		"enableSpecification", "validateSpecification", "enforcedSpecification", 
		"relySpecification", "createConstraint", "alterConstraintWithName", "tableLevelConstraint", 
		"pkUkConstraint", "checkConstraint", "createForeignKey", "alterForeignKeyWithName", 
		"skewedValueElement", "skewedColumnValuePairList", "skewedColumnValuePair", 
		"skewedColumnValues", "skewedColumnValue", "skewedValueLocationElement", 
		"orderSpecification", "nullOrdering", "columnNameOrder", "columnNameCommentList", 
		"columnNameComment", "orderSpecificationRewrite", "columnRefOrder", "columnNameType", 
		"columnNameTypeOrConstraint", "tableConstraint", "columnNameTypeConstraint", 
		"columnConstraint", "foreignKeyConstraint", "colConstraint", "alterColumnConstraint", 
		"alterForeignKeyConstraint", "alterColConstraint", "columnConstraintType", 
		"defaultVal", "tableConstraintType", "constraintOptsCreate", "constraintOptsAlter", 
		"columnNameColonType", "colType", "colTypeList", "type", "primitiveType", 
		"listType", "structType", "mapType", "unionType", "setOperator", "queryStatementExpression", 
		"queryStatementExpressionBody", "withClause", "cteStatement", "fromStatement", 
		"singleFromStatement", "regularBody", "atomSelectStatement", "selectStatement", 
		"setOpSelectStatement", "selectStatementWithCTE", "body", "insertClause", 
		"destination", "limitClause", "deleteStatement", "columnAssignmentClause", 
		"precedencePlusExpressionOrDefault", "setColumnsClause", "updateStatement", 
		"sqlTransactionStatement", "startTransactionStatement", "transactionMode", 
		"transactionAccessMode", "isolationLevel", "levelOfIsolation", "commitStatement", 
		"rollbackStatement", "setAutoCommitStatement", "abortTransactionStatement", 
		"abortCompactionStatement", "mergeStatement", "whenClauses", "whenNotMatchedClause", 
		"whenMatchedAndClause", "whenMatchedThenClause", "updateOrDelete", "killQueryStatement", 
		"compactionId", "compactionPool", "compactionType", "compactionStatus", 
		"alterStatement", "alterTableStatementSuffix", "alterTblPartitionStatementSuffix", 
		"alterStatementPartitionKeyType", "alterViewStatementSuffix", "alterMaterializedViewStatementSuffix", 
		"alterMaterializedViewSuffixRewrite", "alterMaterializedViewSuffixRebuild", 
		"alterDatabaseStatementSuffix", "alterDatabaseSuffixProperties", "alterDatabaseSuffixSetOwner", 
		"alterDatabaseSuffixSetLocation", "alterDatabaseSuffixSetManagedLocation", 
		"alterStatementSuffixRename", "alterStatementSuffixAddCol", "alterStatementSuffixAddConstraint", 
		"alterStatementSuffixUpdateColumns", "alterStatementSuffixDropConstraint", 
		"alterStatementSuffixRenameCol", "alterStatementSuffixUpdateStatsCol", 
		"alterStatementSuffixUpdateStats", "alterStatementChangeColPosition", 
		"alterStatementSuffixAddPartitions", "alterStatementSuffixAddPartitionsElement", 
		"alterStatementSuffixTouch", "alterStatementSuffixArchive", "alterStatementSuffixUnArchive", 
		"partitionLocation", "alterStatementSuffixDropPartitions", "alterStatementSuffixProperties", 
		"alterViewSuffixProperties", "alterStatementSuffixSerdeProperties", "tablePartitionPrefix", 
		"alterStatementSuffixFileFormat", "alterStatementSuffixClusterbySortby", 
		"alterTblPartitionStatementSuffixSkewedLocation", "skewedLocations", "skewedLocationsList", 
		"skewedLocationMap", "alterStatementSuffixLocation", "alterStatementSuffixSkewedby", 
		"alterStatementSuffixExchangePartition", "alterStatementSuffixRenamePart", 
		"alterStatementSuffixStatsPart", "alterStatementSuffixMergeFiles", "alterStatementSuffixBucketNum", 
		"blocking", "compactPool", "alterStatementSuffixCompact", "alterStatementSuffixSetOwner", 
		"alterStatementSuffixSetPartSpec", "alterStatementSuffixExecute", "fileFormat", 
		"alterDataConnectorStatementSuffix", "alterDataConnectorSuffixProperties", 
		"alterDataConnectorSuffixSetOwner", "alterDataConnectorSuffixSetUrl", 
		"likeTableOrFile", "createTableStatement", "createDataConnectorStatement", 
		"dataConnectorComment", "dataConnectorUrl", "dataConnectorType", "dcProperties", 
		"dropDataConnectorStatement", "tableAllColumns", "tableOrColumn", "defaultValue", 
		"expressionList", "aliasList", "fromClause", "fromSource", "atomjoinSource", 
		"joinSource", "joinSourcePart", "uniqueJoinSource", "uniqueJoinExpr", 
		"uniqueJoinToken", "joinToken", "lateralView", "tableAlias", "tableBucketSample", 
		"splitSample", "tableSample", "tableSource", "asOfClause", "uniqueJoinTableSource", 
		"tableName", "viewName", "subQuerySource", "partitioningSpec", "partitionTableFunctionSource", 
		"partitionedTableFunction", "whereClause", "searchCondition", "valuesSource", 
		"valuesClause", "valuesTableConstructor", "valueRowConstructor", "firstValueRowConstructor", 
		"virtualTableSource", "selectClause", "all_distinct", "selectList", "selectTrfmClause", 
		"selectItem", "trfmClause", "selectExpression", "selectExpressionList", 
		"window_clause", "window_defn", "window_specification", "window_frame", 
		"window_range_expression", "window_value_expression", "window_frame_start_boundary", 
		"window_frame_boundary", "groupByClause", "groupby_expression", "groupByEmpty", 
		"rollupStandard", "rollupOldSyntax", "groupingSetExpression", "groupingSetExpressionMultiple", 
		"groupingExpressionSingle", "havingClause", "qualifyClause", "havingCondition", 
		"expressionsInParenthesis", "expressionsNotInParenthesis", "expressionPart", 
		"expressionOrDefault", "firstExpressionsWithAlias", "expressionWithAlias", 
		"expressions", "columnRefOrderInParenthesis", "columnRefOrderNotInParenthesis", 
		"orderByClause", "clusterByClause", "partitionByClause", "distributeByClause", 
		"sortByClause", "trimFunction", "function_", "null_treatment", "functionName", 
		"castExpression", "caseExpression", "whenExpression", "floorExpression", 
		"floorDateQualifiers", "extractExpression", "timeQualifiers", "constant", 
		"prepareStmtParam", "parameterIdx", "stringLiteralSequence", "charSetStringLiteral", 
		"dateLiteral", "timestampLiteral", "timestampLocalTZLiteral", "intervalValue", 
		"intervalLiteral", "intervalExpression", "intervalQualifiers", "expression", 
		"atomExpression", "precedenceFieldExpression", "precedenceUnaryOperator", 
		"precedenceUnaryPrefixExpression", "precedenceBitwiseXorOperator", "precedenceBitwiseXorExpression", 
		"precedenceStarOperator", "precedenceStarExpression", "precedencePlusOperator", 
		"precedencePlusExpression", "precedenceConcatenateOperator", "precedenceConcatenateExpression", 
		"precedenceAmpersandOperator", "precedenceAmpersandExpression", "precedenceBitwiseOrOperator", 
		"precedenceBitwiseOrExpression", "precedenceRegexpOperator", "precedenceSimilarOperator", 
		"subQueryExpression", "precedenceSimilarExpression", "precedenceSimilarExpressionMain", 
		"precedenceSimilarExpressionPart", "precedenceSimilarExpressionAtom", 
		"precedenceSimilarExpressionQuantifierPredicate", "quantifierType", "precedenceSimilarExpressionIn", 
		"precedenceSimilarExpressionPartNot", "precedenceDistinctOperator", "precedenceEqualOperator", 
		"precedenceEqualExpression", "isCondition", "precedenceUnarySuffixExpression", 
		"precedenceNotOperator", "precedenceNotExpression", "precedenceAndOperator", 
		"precedenceAndExpression", "precedenceOrOperator", "precedenceOrExpression", 
		"booleanValue", "booleanValueTok", "tableOrPartition", "partitionSpec", 
		"partitionVal", "partitionSelectorSpec", "partitionSelectorVal", "partitionSelectorOperator", 
		"subQuerySelectorOperator", "sysFuncNames", "descFuncNames", "id_", "functionIdentifier", 
		"principalIdentifier", "nonReserved", "sql11ReservedKeywordsUsedAsFunctionName", 
		"hint", "hintList", "hintItem", "hintName", "hintArgs", "hintArgName", 
		"prepareStatement", "executeStatement", "executeParamList", "resourcePlanDdlStatements", 
		"rpAssign", "rpAssignList", "rpUnassign", "rpUnassignList", "createResourcePlanStatement", 
		"withReplace", "activate", "enable", "disable", "unmanaged", "alterResourcePlanStatement", 
		"globalWmStatement", "replaceResourcePlanStatement", "dropResourcePlanStatement", 
		"poolPath", "triggerExpression", "triggerExpressionStandalone", "triggerOrExpression", 
		"triggerAndExpression", "triggerAtomExpression", "triggerLiteral", "comparisionOperator", 
		"triggerActionExpression", "triggerActionExpressionStandalone", "createTriggerStatement", 
		"alterTriggerStatement", "dropTriggerStatement", "poolAssign", "poolAssignList", 
		"createPoolStatement", "alterPoolStatement", "dropPoolStatement", "createMappingStatement", 
		"alterMappingStatement", "dropMappingStatement",
	];
	public get grammarFileName(): string { return "HiveParser.g4"; }
	public get literalNames(): (string | null)[] { return HiveParser.literalNames; }
	public get symbolicNames(): (string | null)[] { return HiveParser.symbolicNames; }
	public get ruleNames(): string[] { return HiveParser.ruleNames; }
	public get serializedATN(): number[] { return HiveParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(this, HiveParser._ATN, HiveParser.DecisionsToDFA, new PredictionContextCache());
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let localctx: StatementContext = new StatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 0, HiveParser.RULE_statement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 998;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 114:
				{
				this.state = 996;
				this.explainStatement();
				}
				break;
			case 1:
			case 9:
			case 10:
			case 48:
			case 58:
			case 83:
			case 86:
			case 87:
			case 91:
			case 98:
			case 102:
			case 110:
			case 115:
			case 134:
			case 138:
			case 147:
			case 155:
			case 169:
			case 179:
			case 182:
			case 190:
			case 195:
			case 202:
			case 239:
			case 258:
			case 261:
			case 267:
			case 268:
			case 273:
			case 279:
			case 288:
			case 293:
			case 297:
			case 307:
			case 340:
			case 350:
			case 354:
			case 357:
			case 363:
			case 375:
			case 386:
				{
				this.state = 997;
				this.execStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1000;
			this.match(HiveParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public explainStatement(): ExplainStatementContext {
		let localctx: ExplainStatementContext = new ExplainStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 2, HiveParser.RULE_explainStatement);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1002;
			this.match(HiveParser.KW_EXPLAIN);
			this.state = 1012;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1:
			case 9:
			case 10:
			case 19:
			case 21:
			case 37:
			case 48:
			case 58:
			case 77:
			case 78:
			case 83:
			case 85:
			case 86:
			case 87:
			case 91:
			case 98:
			case 102:
			case 110:
			case 115:
			case 117:
			case 133:
			case 134:
			case 138:
			case 147:
			case 155:
			case 169:
			case 179:
			case 182:
			case 183:
			case 184:
			case 190:
			case 195:
			case 202:
			case 239:
			case 258:
			case 261:
			case 265:
			case 267:
			case 268:
			case 273:
			case 279:
			case 288:
			case 293:
			case 297:
			case 307:
			case 340:
			case 350:
			case 354:
			case 357:
			case 363:
			case 366:
			case 375:
			case 386:
				{
				this.state = 1006;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 1, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1003;
						this.explainOption();
						}
						}
					}
					this.state = 1008;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 1, this._ctx);
				}
				this.state = 1009;
				this.execStatement();
				}
				break;
			case 274:
				{
				this.state = 1010;
				this.match(HiveParser.KW_REWRITE);
				this.state = 1011;
				this.queryStatementExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public explainOption(): ExplainOptionContext {
		let localctx: ExplainOptionContext = new ExplainOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 4, HiveParser.RULE_explainOption);
		let _la: number;
		try {
			this.state = 1036;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 117:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1014;
				this.match(HiveParser.KW_EXTENDED);
				}
				break;
			case 133:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1015;
				this.match(HiveParser.KW_FORMATTED);
				}
				break;
			case 85:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1016;
				this.match(HiveParser.KW_DEPENDENCY);
				}
				break;
			case 37:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1017;
				this.match(HiveParser.KW_CBO);
				this.state = 1019;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===57 || _la===165) {
					{
					this.state = 1018;
					_la = this._input.LA(1);
					if(!(_la===57 || _la===165)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					}
				}

				}
				break;
			case 184:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1021;
				this.match(HiveParser.KW_LOGICAL);
				}
				break;
			case 21:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1022;
				this.match(HiveParser.KW_AUTHORIZATION);
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1023;
				this.match(HiveParser.KW_ANALYZE);
				}
				break;
			case 265:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1024;
				this.match(HiveParser.KW_REOPTIMIZATION);
				}
				break;
			case 183:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 1025;
				this.match(HiveParser.KW_LOCKS);
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 1026;
				this.match(HiveParser.KW_AST);
				}
				break;
			case 366:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 1027;
				this.match(HiveParser.KW_VECTORIZATION);
				this.state = 1029;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===215) {
					{
					this.state = 1028;
					this.vectorizationOnly();
					}
				}

				this.state = 1032;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===88 || _la===116 || _la===216 || _la===314) {
					{
					this.state = 1031;
					this.vectorizatonDetail();
					}
				}

				}
				break;
			case 78:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 1034;
				this.match(HiveParser.KW_DEBUG);
				}
				break;
			case 77:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 1035;
				this.match(HiveParser.KW_DDL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public vectorizationOnly(): VectorizationOnlyContext {
		let localctx: VectorizationOnlyContext = new VectorizationOnlyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 6, HiveParser.RULE_vectorizationOnly);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1038;
			this.match(HiveParser.KW_ONLY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public vectorizatonDetail(): VectorizatonDetailContext {
		let localctx: VectorizatonDetailContext = new VectorizatonDetailContext(this, this._ctx, this.state);
		this.enterRule(localctx, 8, HiveParser.RULE_vectorizatonDetail);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1040;
			_la = this._input.LA(1);
			if(!(_la===88 || _la===116 || _la===216 || _la===314)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public execStatement(): ExecStatementContext {
		let localctx: ExecStatementContext = new ExecStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 10, HiveParser.RULE_execStatement);
		try {
			this.state = 1056;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 7, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1042;
				this.queryStatementExpression();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1043;
				this.loadStatement();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1044;
				this.exportStatement();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1045;
				this.importStatement();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1046;
				this.replDumpStatement();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1047;
				this.replLoadStatement();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1048;
				this.replStatusStatement();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1049;
				this.ddlStatement();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 1050;
				this.deleteStatement();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 1051;
				this.updateStatement();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 1052;
				this.sqlTransactionStatement();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 1053;
				this.mergeStatement();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 1054;
				this.prepareStatement();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 1055;
				this.executeStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public loadStatement(): LoadStatementContext {
		let localctx: LoadStatementContext = new LoadStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 12, HiveParser.RULE_loadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1058;
			this.match(HiveParser.KW_LOAD);
			this.state = 1059;
			this.match(HiveParser.KW_DATA);
			this.state = 1061;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===180) {
				{
				this.state = 1060;
				this.match(HiveParser.KW_LOCAL);
				}
			}

			this.state = 1063;
			this.match(HiveParser.KW_INPATH);
			this.state = 1064;
			this.match(HiveParser.StringLiteral);
			this.state = 1066;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===225) {
				{
				this.state = 1065;
				this.match(HiveParser.KW_OVERWRITE);
				}
			}

			this.state = 1068;
			this.match(HiveParser.KW_INTO);
			this.state = 1069;
			this.match(HiveParser.KW_TABLE);
			this.state = 1070;
			this.tableOrPartition();
			this.state = 1072;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===154) {
				{
				this.state = 1071;
				this.inputFileFormat();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replicationClause(): ReplicationClauseContext {
		let localctx: ReplicationClauseContext = new ReplicationClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 14, HiveParser.RULE_replicationClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1074;
			this.match(HiveParser.KW_FOR);
			this.state = 1076;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===196) {
				{
				this.state = 1075;
				this.match(HiveParser.KW_METADATA);
				}
			}

			this.state = 1078;
			this.match(HiveParser.KW_REPLICATION);
			this.state = 1079;
			this.match(HiveParser.LPAREN);
			this.state = 1080;
			this.match(HiveParser.StringLiteral);
			this.state = 1081;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public exportStatement(): ExportStatementContext {
		let localctx: ExportStatementContext = new ExportStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 16, HiveParser.RULE_exportStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1083;
			this.match(HiveParser.KW_EXPORT);
			this.state = 1084;
			this.match(HiveParser.KW_TABLE);
			this.state = 1085;
			this.tableOrPartition();
			this.state = 1086;
			this.match(HiveParser.KW_TO);
			this.state = 1087;
			this.match(HiveParser.StringLiteral);
			this.state = 1089;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===129) {
				{
				this.state = 1088;
				this.replicationClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public importStatement(): ImportStatementContext {
		let localctx: ImportStatementContext = new ImportStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 18, HiveParser.RULE_importStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1091;
			this.match(HiveParser.KW_IMPORT);
			this.state = 1097;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===118 || _la===318) {
				{
				this.state = 1093;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===118) {
					{
					this.state = 1092;
					this.match(HiveParser.KW_EXTERNAL);
					}
				}

				this.state = 1095;
				this.match(HiveParser.KW_TABLE);
				this.state = 1096;
				this.tableOrPartition();
				}
			}

			this.state = 1099;
			this.match(HiveParser.KW_FROM);
			this.state = 1100;
			localctx._path = this.match(HiveParser.StringLiteral);
			this.state = 1102;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===181) {
				{
				this.state = 1101;
				this.tableLocation();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replDumpStatement(): ReplDumpStatementContext {
		let localctx: ReplDumpStatementContext = new ReplDumpStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 20, HiveParser.RULE_replDumpStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1104;
			this.match(HiveParser.KW_REPL);
			this.state = 1105;
			this.match(HiveParser.KW_DUMP);
			this.state = 1106;
			localctx._dbPolicy = this.replDbPolicy();
			this.state = 1109;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===268) {
				{
				this.state = 1107;
				this.match(HiveParser.KW_REPLACE);
				this.state = 1108;
				localctx._oldDbPolicy = this.replDbPolicy();
				}
			}

			this.state = 1113;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 1111;
				this.match(HiveParser.KW_WITH);
				this.state = 1112;
				localctx._replConf = this.replConfigs();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replDbPolicy(): ReplDbPolicyContext {
		let localctx: ReplDbPolicyContext = new ReplDbPolicyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 22, HiveParser.RULE_replDbPolicy);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1115;
			localctx._dbName = this.id_();
			this.state = 1118;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===382) {
				{
				this.state = 1116;
				this.match(HiveParser.DOT);
				this.state = 1117;
				localctx._tablePolicy = this.replTableLevelPolicy();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replLoadStatement(): ReplLoadStatementContext {
		let localctx: ReplLoadStatementContext = new ReplLoadStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 24, HiveParser.RULE_replLoadStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1120;
			this.match(HiveParser.KW_REPL);
			this.state = 1121;
			this.match(HiveParser.KW_LOAD);
			this.state = 1122;
			localctx._sourceDbPolicy = this.replDbPolicy();
			this.state = 1125;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===159) {
				{
				this.state = 1123;
				this.match(HiveParser.KW_INTO);
				this.state = 1124;
				localctx._dbName = this.id_();
				}
			}

			this.state = 1129;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 1127;
				this.match(HiveParser.KW_WITH);
				this.state = 1128;
				localctx._replConf = this.replConfigs();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replConfigs(): ReplConfigsContext {
		let localctx: ReplConfigsContext = new ReplConfigsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 26, HiveParser.RULE_replConfigs);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1131;
			this.match(HiveParser.LPAREN);
			this.state = 1132;
			this.replConfigsList();
			this.state = 1133;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replConfigsList(): ReplConfigsListContext {
		let localctx: ReplConfigsListContext = new ReplConfigsListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 28, HiveParser.RULE_replConfigsList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1135;
			this.keyValueProperty();
			this.state = 1140;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 1136;
				this.match(HiveParser.COMMA);
				this.state = 1137;
				this.keyValueProperty();
				}
				}
				this.state = 1142;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replTableLevelPolicy(): ReplTableLevelPolicyContext {
		let localctx: ReplTableLevelPolicyContext = new ReplTableLevelPolicyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 30, HiveParser.RULE_replTableLevelPolicy);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1143;
			localctx._replTablesIncludeList = this.match(HiveParser.StringLiteral);
			this.state = 1146;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===382) {
				{
				this.state = 1144;
				this.match(HiveParser.DOT);
				this.state = 1145;
				localctx._replTablesExcludeList = this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replStatusStatement(): ReplStatusStatementContext {
		let localctx: ReplStatusStatementContext = new ReplStatusStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 32, HiveParser.RULE_replStatusStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1148;
			this.match(HiveParser.KW_REPL);
			this.state = 1149;
			this.match(HiveParser.KW_STATUS);
			this.state = 1150;
			localctx._dbName = this.id_();
			this.state = 1153;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 1151;
				this.match(HiveParser.KW_WITH);
				this.state = 1152;
				localctx._replConf = this.replConfigs();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ddlStatement(): DdlStatementContext {
		let localctx: DdlStatementContext = new DdlStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 34, HiveParser.RULE_ddlStatement);
		try {
			this.state = 1200;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 24, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1155;
				this.createDatabaseStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1156;
				this.switchDatabaseStatement();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1157;
				this.dropDatabaseStatement();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1158;
				this.createTableStatement();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1159;
				this.dropTableStatement();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1160;
				this.truncateTableStatement();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1161;
				this.alterStatement();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1162;
				this.descStatement();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 1163;
				this.showStatement();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 1164;
				this.metastoreCheck();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 1165;
				this.createViewStatement();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 1166;
				this.createMaterializedViewStatement();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 1167;
				this.createScheduledQueryStatement();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 1168;
				this.alterScheduledQueryStatement();
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 1169;
				this.dropScheduledQueryStatement();
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 1170;
				this.dropViewStatement();
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 1171;
				this.dropMaterializedViewStatement();
				}
				break;
			case 18:
				this.enterOuterAlt(localctx, 18);
				{
				this.state = 1172;
				this.createFunctionStatement();
				}
				break;
			case 19:
				this.enterOuterAlt(localctx, 19);
				{
				this.state = 1173;
				this.createMacroStatement();
				}
				break;
			case 20:
				this.enterOuterAlt(localctx, 20);
				{
				this.state = 1174;
				this.dropFunctionStatement();
				}
				break;
			case 21:
				this.enterOuterAlt(localctx, 21);
				{
				this.state = 1175;
				this.reloadFunctionsStatement();
				}
				break;
			case 22:
				this.enterOuterAlt(localctx, 22);
				{
				this.state = 1176;
				this.dropMacroStatement();
				}
				break;
			case 23:
				this.enterOuterAlt(localctx, 23);
				{
				this.state = 1177;
				this.analyzeStatement();
				}
				break;
			case 24:
				this.enterOuterAlt(localctx, 24);
				{
				this.state = 1178;
				this.lockStatement();
				}
				break;
			case 25:
				this.enterOuterAlt(localctx, 25);
				{
				this.state = 1179;
				this.unlockStatement();
				}
				break;
			case 26:
				this.enterOuterAlt(localctx, 26);
				{
				this.state = 1180;
				this.lockDatabase();
				}
				break;
			case 27:
				this.enterOuterAlt(localctx, 27);
				{
				this.state = 1181;
				this.unlockDatabase();
				}
				break;
			case 28:
				this.enterOuterAlt(localctx, 28);
				{
				this.state = 1182;
				this.createRoleStatement();
				}
				break;
			case 29:
				this.enterOuterAlt(localctx, 29);
				{
				this.state = 1183;
				this.dropRoleStatement();
				}
				break;
			case 30:
				this.enterOuterAlt(localctx, 30);
				{
				this.state = 1184;
				this.grantPrivileges();
				}
				break;
			case 31:
				this.enterOuterAlt(localctx, 31);
				{
				this.state = 1185;
				this.revokePrivileges();
				}
				break;
			case 32:
				this.enterOuterAlt(localctx, 32);
				{
				this.state = 1186;
				this.showGrants();
				}
				break;
			case 33:
				this.enterOuterAlt(localctx, 33);
				{
				this.state = 1187;
				this.showRoleGrants();
				}
				break;
			case 34:
				this.enterOuterAlt(localctx, 34);
				{
				this.state = 1188;
				this.showRolePrincipals();
				}
				break;
			case 35:
				this.enterOuterAlt(localctx, 35);
				{
				this.state = 1189;
				this.showRoles();
				}
				break;
			case 36:
				this.enterOuterAlt(localctx, 36);
				{
				this.state = 1190;
				this.grantRole();
				}
				break;
			case 37:
				this.enterOuterAlt(localctx, 37);
				{
				this.state = 1191;
				this.revokeRole();
				}
				break;
			case 38:
				this.enterOuterAlt(localctx, 38);
				{
				this.state = 1192;
				this.setRole();
				}
				break;
			case 39:
				this.enterOuterAlt(localctx, 39);
				{
				this.state = 1193;
				this.showCurrentRole();
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 40);
				{
				this.state = 1194;
				this.abortTransactionStatement();
				}
				break;
			case 41:
				this.enterOuterAlt(localctx, 41);
				{
				this.state = 1195;
				this.abortCompactionStatement();
				}
				break;
			case 42:
				this.enterOuterAlt(localctx, 42);
				{
				this.state = 1196;
				this.killQueryStatement();
				}
				break;
			case 43:
				this.enterOuterAlt(localctx, 43);
				{
				this.state = 1197;
				this.resourcePlanDdlStatements();
				}
				break;
			case 44:
				this.enterOuterAlt(localctx, 44);
				{
				this.state = 1198;
				this.createDataConnectorStatement();
				}
				break;
			case 45:
				this.enterOuterAlt(localctx, 45);
				{
				this.state = 1199;
				this.dropDataConnectorStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ifExists(): IfExistsContext {
		let localctx: IfExistsContext = new IfExistsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 36, HiveParser.RULE_ifExists);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1202;
			this.match(HiveParser.KW_IF);
			this.state = 1203;
			this.match(HiveParser.KW_EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public restrictOrCascade(): RestrictOrCascadeContext {
		let localctx: RestrictOrCascadeContext = new RestrictOrCascadeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 38, HiveParser.RULE_restrictOrCascade);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1205;
			_la = this._input.LA(1);
			if(!(_la===34 || _la===272)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public ifNotExists(): IfNotExistsContext {
		let localctx: IfNotExistsContext = new IfNotExistsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 40, HiveParser.RULE_ifNotExists);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1207;
			this.match(HiveParser.KW_IF);
			this.state = 1208;
			this.match(HiveParser.KW_NOT);
			this.state = 1209;
			this.match(HiveParser.KW_EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public force(): ForceContext {
		let localctx: ForceContext = new ForceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 42, HiveParser.RULE_force);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1211;
			this.match(HiveParser.KW_FORCE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rewriteEnabled(): RewriteEnabledContext {
		let localctx: RewriteEnabledContext = new RewriteEnabledContext(this, this._ctx, this.state);
		this.enterRule(localctx, 44, HiveParser.RULE_rewriteEnabled);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1213;
			this.match(HiveParser.KW_ENABLE);
			this.state = 1214;
			this.match(HiveParser.KW_REWRITE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rewriteDisabled(): RewriteDisabledContext {
		let localctx: RewriteDisabledContext = new RewriteDisabledContext(this, this._ctx, this.state);
		this.enterRule(localctx, 46, HiveParser.RULE_rewriteDisabled);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1216;
			this.match(HiveParser.KW_DISABLE);
			this.state = 1217;
			this.match(HiveParser.KW_REWRITE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public storedAsDirs(): StoredAsDirsContext {
		let localctx: StoredAsDirsContext = new StoredAsDirsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 48, HiveParser.RULE_storedAsDirs);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1219;
			this.match(HiveParser.KW_STORED);
			this.state = 1220;
			this.match(HiveParser.KW_AS);
			this.state = 1221;
			this.match(HiveParser.KW_DIRECTORIES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orReplace(): OrReplaceContext {
		let localctx: OrReplaceContext = new OrReplaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 50, HiveParser.RULE_orReplace);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1223;
			this.match(HiveParser.KW_OR);
			this.state = 1224;
			this.match(HiveParser.KW_REPLACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createDatabaseStatement(): CreateDatabaseStatementContext {
		let localctx: CreateDatabaseStatementContext = new CreateDatabaseStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 52, HiveParser.RULE_createDatabaseStatement);
		let _la: number;
		try {
			this.state = 1262;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 33, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1226;
				this.match(HiveParser.KW_CREATE);
				this.state = 1227;
				this.db_schema();
				this.state = 1229;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===145) {
					{
					this.state = 1228;
					this.ifNotExists();
					}
				}

				this.state = 1231;
				localctx._name = this.id_();
				this.state = 1233;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===47) {
					{
					this.state = 1232;
					this.databaseComment();
					}
				}

				this.state = 1236;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===181) {
					{
					this.state = 1235;
					this.dbLocation();
					}
				}

				this.state = 1239;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===188) {
					{
					this.state = 1238;
					this.dbManagedLocation();
					}
				}

				this.state = 1244;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===375) {
					{
					this.state = 1241;
					this.match(HiveParser.KW_WITH);
					this.state = 1242;
					this.match(HiveParser.KW_DBPROPERTIES);
					this.state = 1243;
					localctx._dbprops = this.dbProperties();
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1246;
				this.match(HiveParser.KW_CREATE);
				this.state = 1247;
				this.match(HiveParser.KW_REMOTE);
				this.state = 1248;
				this.db_schema();
				this.state = 1250;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===145) {
					{
					this.state = 1249;
					this.ifNotExists();
					}
				}

				this.state = 1252;
				localctx._name = this.id_();
				this.state = 1254;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===47) {
					{
					this.state = 1253;
					this.databaseComment();
					}
				}

				this.state = 1256;
				this.dbConnectorName();
				this.state = 1260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===375) {
					{
					this.state = 1257;
					this.match(HiveParser.KW_WITH);
					this.state = 1258;
					this.match(HiveParser.KW_DBPROPERTIES);
					this.state = 1259;
					localctx._dbprops = this.dbProperties();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dbLocation(): DbLocationContext {
		let localctx: DbLocationContext = new DbLocationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 54, HiveParser.RULE_dbLocation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1264;
			this.match(HiveParser.KW_LOCATION);
			this.state = 1265;
			localctx._locn = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dbManagedLocation(): DbManagedLocationContext {
		let localctx: DbManagedLocationContext = new DbManagedLocationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 56, HiveParser.RULE_dbManagedLocation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1267;
			this.match(HiveParser.KW_MANAGEDLOCATION);
			this.state = 1268;
			localctx._locn = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dbProperties(): DbPropertiesContext {
		let localctx: DbPropertiesContext = new DbPropertiesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 58, HiveParser.RULE_dbProperties);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1270;
			this.match(HiveParser.LPAREN);
			this.state = 1271;
			this.dbPropertiesList();
			this.state = 1272;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dbPropertiesList(): DbPropertiesListContext {
		let localctx: DbPropertiesListContext = new DbPropertiesListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 60, HiveParser.RULE_dbPropertiesList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1274;
			this.keyValueProperty();
			this.state = 1279;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 1275;
				this.match(HiveParser.COMMA);
				this.state = 1276;
				this.keyValueProperty();
				}
				}
				this.state = 1281;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dbConnectorName(): DbConnectorNameContext {
		let localctx: DbConnectorNameContext = new DbConnectorNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 62, HiveParser.RULE_dbConnectorName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1282;
			this.match(HiveParser.KW_USING);
			this.state = 1283;
			localctx._dcName = this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public switchDatabaseStatement(): SwitchDatabaseStatementContext {
		let localctx: SwitchDatabaseStatementContext = new SwitchDatabaseStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 64, HiveParser.RULE_switchDatabaseStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1285;
			this.match(HiveParser.KW_USE);
			this.state = 1286;
			this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropDatabaseStatement(): DropDatabaseStatementContext {
		let localctx: DropDatabaseStatementContext = new DropDatabaseStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 66, HiveParser.RULE_dropDatabaseStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1288;
			this.match(HiveParser.KW_DROP);
			this.state = 1289;
			this.db_schema();
			this.state = 1291;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 1290;
				this.ifExists();
				}
			}

			this.state = 1293;
			this.id_();
			this.state = 1295;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===34 || _la===272) {
				{
				this.state = 1294;
				this.restrictOrCascade();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public databaseComment(): DatabaseCommentContext {
		let localctx: DatabaseCommentContext = new DatabaseCommentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 68, HiveParser.RULE_databaseComment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1297;
			this.match(HiveParser.KW_COMMENT);
			this.state = 1298;
			localctx._comment = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public truncateTableStatement(): TruncateTableStatementContext {
		let localctx: TruncateTableStatementContext = new TruncateTableStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 70, HiveParser.RULE_truncateTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1300;
			this.match(HiveParser.KW_TRUNCATE);
			this.state = 1302;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===318) {
				{
				this.state = 1301;
				this.match(HiveParser.KW_TABLE);
				}
			}

			this.state = 1304;
			this.tablePartitionPrefix();
			this.state = 1310;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===46) {
				{
				this.state = 1305;
				this.match(HiveParser.KW_COLUMNS);
				this.state = 1306;
				this.match(HiveParser.LPAREN);
				this.state = 1307;
				this.columnNameList();
				this.state = 1308;
				this.match(HiveParser.RPAREN);
				}
			}

			this.state = 1313;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===130) {
				{
				this.state = 1312;
				this.force();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropTableStatement(): DropTableStatementContext {
		let localctx: DropTableStatementContext = new DropTableStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 72, HiveParser.RULE_dropTableStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1315;
			this.match(HiveParser.KW_DROP);
			this.state = 1316;
			this.match(HiveParser.KW_TABLE);
			this.state = 1318;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 1317;
				this.ifExists();
				}
			}

			this.state = 1320;
			this.tableName();
			this.state = 1322;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===245) {
				{
				this.state = 1321;
				this.match(HiveParser.KW_PURGE);
				}
			}

			this.state = 1325;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===129) {
				{
				this.state = 1324;
				this.replicationClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public inputFileFormat(): InputFileFormatContext {
		let localctx: InputFileFormatContext = new InputFileFormatContext(this, this._ctx, this.state);
		this.enterRule(localctx, 74, HiveParser.RULE_inputFileFormat);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1327;
			this.match(HiveParser.KW_INPUTFORMAT);
			this.state = 1328;
			localctx._inFmt = this.match(HiveParser.StringLiteral);
			this.state = 1329;
			this.match(HiveParser.KW_SERDE);
			this.state = 1330;
			localctx._serdeCls = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tabTypeExpr(): TabTypeExprContext {
		let localctx: TabTypeExprContext = new TabTypeExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 76, HiveParser.RULE_tabTypeExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1332;
			this.id_();
			this.state = 1335;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===382) {
				{
				this.state = 1333;
				this.match(HiveParser.DOT);
				this.state = 1334;
				this.id_();
				}
			}

			this.state = 1350;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 46, this._ctx) ) {
			case 1:
				{
				this.state = 1337;
				this.id_();
				this.state = 1347;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===382) {
					{
					{
					this.state = 1338;
					this.match(HiveParser.DOT);
					this.state = 1343;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 44, this._ctx) ) {
					case 1:
						{
						this.state = 1339;
						this.match(HiveParser.KW_ELEM_TYPE);
						}
						break;
					case 2:
						{
						this.state = 1340;
						this.match(HiveParser.KW_KEY_TYPE);
						}
						break;
					case 3:
						{
						this.state = 1341;
						this.match(HiveParser.KW_VALUE_TYPE);
						}
						break;
					case 4:
						{
						this.state = 1342;
						this.id_();
						}
						break;
					}
					}
					}
					this.state = 1349;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partTypeExpr(): PartTypeExprContext {
		let localctx: PartTypeExprContext = new PartTypeExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 78, HiveParser.RULE_partTypeExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1352;
			this.tabTypeExpr();
			this.state = 1354;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===227) {
				{
				this.state = 1353;
				this.partitionSpec();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tabPartColTypeExpr(): TabPartColTypeExprContext {
		let localctx: TabPartColTypeExprContext = new TabPartColTypeExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 80, HiveParser.RULE_tabPartColTypeExpr);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1356;
			this.tableName();
			this.state = 1358;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===227) {
				{
				this.state = 1357;
				this.partitionSpec();
				}
			}

			this.state = 1361;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3765853219) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 3185538111) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 3675051739) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2389627001) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2078382079) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 987750079) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 1004889323) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4138967) !== 0) || _la===418) {
				{
				this.state = 1360;
				this.extColumnName();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public descStatement(): DescStatementContext {
		let localctx: DescStatementContext = new DescStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 82, HiveParser.RULE_descStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1363;
			_la = this._input.LA(1);
			if(!(_la===86 || _la===87)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 1386;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 54, this._ctx) ) {
			case 1:
				{
				this.state = 1364;
				this.db_schema();
				this.state = 1366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===117) {
					{
					this.state = 1365;
					this.match(HiveParser.KW_EXTENDED);
					}
				}

				this.state = 1368;
				localctx._dbName = this.id_();
				}
				break;
			case 2:
				{
				this.state = 1370;
				this.match(HiveParser.KW_DATACONNECTOR);
				this.state = 1372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===117) {
					{
					this.state = 1371;
					this.match(HiveParser.KW_EXTENDED);
					}
				}

				this.state = 1374;
				localctx._dcName = this.id_();
				}
				break;
			case 3:
				{
				this.state = 1375;
				this.match(HiveParser.KW_FUNCTION);
				this.state = 1377;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===117) {
					{
					this.state = 1376;
					this.match(HiveParser.KW_EXTENDED);
					}
				}

				this.state = 1379;
				localctx._name = this.descFuncNames();
				}
				break;
			case 4:
				{
				this.state = 1382;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 133:
					{
					this.state = 1380;
					localctx._descOptions = this.match(HiveParser.KW_FORMATTED);
					}
					break;
				case 117:
					{
					this.state = 1381;
					localctx._descOptions = this.match(HiveParser.KW_EXTENDED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1384;
				localctx._parttype = this.tabPartColTypeExpr();
				}
				break;
			case 5:
				{
				this.state = 1385;
				localctx._parttype = this.tabPartColTypeExpr();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public analyzeStatement(): AnalyzeStatementContext {
		let localctx: AnalyzeStatementContext = new AnalyzeStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 84, HiveParser.RULE_analyzeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1388;
			this.match(HiveParser.KW_ANALYZE);
			this.state = 1389;
			this.match(HiveParser.KW_TABLE);
			this.state = 1390;
			localctx._parttype = this.tableOrPartition();
			this.state = 1403;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 52:
				{
				this.state = 1391;
				this.match(HiveParser.KW_COMPUTE);
				this.state = 1392;
				this.match(HiveParser.KW_STATISTICS);
				this.state = 1399;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 205:
					{
					this.state = 1393;
					localctx._noscan = this.match(HiveParser.KW_NOSCAN);
					}
					break;
				case 129:
					{
					this.state = 1394;
					this.match(HiveParser.KW_FOR);
					this.state = 1395;
					this.match(HiveParser.KW_COLUMNS);
					this.state = 1397;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3765853219) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 3185538111) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 3675051739) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2389627001) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2078382079) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 987750079) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 1004889323) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4138967) !== 0) || _la===418) {
						{
						this.state = 1396;
						localctx._statsColumnName = this.columnNameList();
						}
					}

					}
					break;
				case -1:
					break;
				default:
					break;
				}
				}
				break;
			case 33:
				{
				this.state = 1401;
				this.match(HiveParser.KW_CACHE);
				this.state = 1402;
				this.match(HiveParser.KW_METADATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public from_in(): From_inContext {
		let localctx: From_inContext = new From_inContext(this, this._ctx, this.state);
		this.enterRule(localctx, 86, HiveParser.RULE_from_in);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1405;
			_la = this._input.LA(1);
			if(!(_la===134 || _la===148)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public db_schema(): Db_schemaContext {
		let localctx: Db_schemaContext = new Db_schemaContext(this, this._ctx, this.state);
		this.enterRule(localctx, 88, HiveParser.RULE_db_schema);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1407;
			_la = this._input.LA(1);
			if(!(_la===67 || _la===285)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showStatement(): ShowStatementContext {
		let localctx: ShowStatementContext = new ShowStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 90, HiveParser.RULE_showStatement);
		let _la: number;
		try {
			this.state = 1590;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 95, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1409;
				this.match(HiveParser.KW_SHOW);
				this.state = 1410;
				_la = this._input.LA(1);
				if(!(_la===68 || _la===286)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 1413;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===176) {
					{
					this.state = 1411;
					this.match(HiveParser.KW_LIKE);
					this.state = 1412;
					this.showStmtIdentifier();
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1415;
				this.match(HiveParser.KW_SHOW);
				this.state = 1417;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===117) {
					{
					this.state = 1416;
					localctx._isExtended = this.match(HiveParser.KW_EXTENDED);
					}
				}

				this.state = 1419;
				this.match(HiveParser.KW_TABLES);
				this.state = 1423;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===134 || _la===148) {
					{
					this.state = 1420;
					this.from_in();
					this.state = 1421;
					localctx._db_name = this.id_();
					}
				}

				this.state = 1426;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3765853219) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 3185540159) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 3675051739) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2389627001) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2078382079) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 987750079) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 1004889323) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4143063) !== 0) || _la===412 || _la===418) {
					{
					this.state = 1425;
					localctx._filter = this.showTablesFilterExpr();
					}
				}

				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1428;
				this.match(HiveParser.KW_SHOW);
				this.state = 1429;
				this.match(HiveParser.KW_VIEWS);
				this.state = 1433;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===134 || _la===148) {
					{
					this.state = 1430;
					this.from_in();
					this.state = 1431;
					localctx._db_name = this.id_();
					}
				}

				this.state = 1438;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 176:
					{
					this.state = 1435;
					this.match(HiveParser.KW_LIKE);
					this.state = 1436;
					this.showStmtIdentifier();
					}
					break;
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
				case 8:
				case 10:
				case 15:
				case 18:
				case 19:
				case 20:
				case 22:
				case 23:
				case 24:
				case 30:
				case 31:
				case 33:
				case 34:
				case 37:
				case 38:
				case 40:
				case 41:
				case 42:
				case 43:
				case 44:
				case 46:
				case 47:
				case 49:
				case 50:
				case 52:
				case 53:
				case 56:
				case 57:
				case 59:
				case 66:
				case 68:
				case 72:
				case 73:
				case 74:
				case 75:
				case 76:
				case 78:
				case 80:
				case 81:
				case 82:
				case 84:
				case 85:
				case 86:
				case 88:
				case 89:
				case 90:
				case 91:
				case 93:
				case 94:
				case 95:
				case 97:
				case 99:
				case 100:
				case 102:
				case 104:
				case 105:
				case 106:
				case 109:
				case 110:
				case 111:
				case 113:
				case 114:
				case 115:
				case 116:
				case 122:
				case 123:
				case 124:
				case 125:
				case 132:
				case 133:
				case 137:
				case 142:
				case 143:
				case 144:
				case 146:
				case 149:
				case 150:
				case 152:
				case 153:
				case 154:
				case 161:
				case 162:
				case 163:
				case 165:
				case 166:
				case 167:
				case 168:
				case 169:
				case 170:
				case 175:
				case 177:
				case 178:
				case 179:
				case 181:
				case 182:
				case 183:
				case 184:
				case 185:
				case 187:
				case 188:
				case 189:
				case 191:
				case 192:
				case 193:
				case 194:
				case 196:
				case 198:
				case 199:
				case 201:
				case 202:
				case 204:
				case 205:
				case 207:
				case 208:
				case 210:
				case 212:
				case 213:
				case 216:
				case 217:
				case 222:
				case 223:
				case 225:
				case 226:
				case 228:
				case 229:
				case 230:
				case 233:
				case 234:
				case 235:
				case 236:
				case 242:
				case 244:
				case 245:
				case 247:
				case 248:
				case 249:
				case 251:
				case 252:
				case 255:
				case 256:
				case 257:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 274:
				case 277:
				case 278:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 289:
				case 290:
				case 291:
				case 292:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 301:
				case 303:
				case 304:
				case 305:
				case 306:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 316:
				case 317:
				case 319:
				case 321:
				case 322:
				case 323:
				case 328:
				case 329:
				case 331:
				case 333:
				case 334:
				case 335:
				case 338:
				case 341:
				case 342:
				case 344:
				case 346:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 355:
				case 356:
				case 357:
				case 360:
				case 361:
				case 362:
				case 364:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 373:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 412:
				case 418:
					{
					this.state = 1437;
					this.showStmtIdentifier();
					}
					break;
				case -1:
					break;
				default:
					break;
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1440;
				this.match(HiveParser.KW_SHOW);
				this.state = 1441;
				this.match(HiveParser.KW_MATERIALIZED);
				this.state = 1442;
				this.match(HiveParser.KW_VIEWS);
				this.state = 1446;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===134 || _la===148) {
					{
					this.state = 1443;
					this.from_in();
					this.state = 1444;
					localctx._db_name = this.id_();
					}
				}

				this.state = 1451;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 176:
					{
					this.state = 1448;
					this.match(HiveParser.KW_LIKE);
					this.state = 1449;
					this.showStmtIdentifier();
					}
					break;
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
				case 8:
				case 10:
				case 15:
				case 18:
				case 19:
				case 20:
				case 22:
				case 23:
				case 24:
				case 30:
				case 31:
				case 33:
				case 34:
				case 37:
				case 38:
				case 40:
				case 41:
				case 42:
				case 43:
				case 44:
				case 46:
				case 47:
				case 49:
				case 50:
				case 52:
				case 53:
				case 56:
				case 57:
				case 59:
				case 66:
				case 68:
				case 72:
				case 73:
				case 74:
				case 75:
				case 76:
				case 78:
				case 80:
				case 81:
				case 82:
				case 84:
				case 85:
				case 86:
				case 88:
				case 89:
				case 90:
				case 91:
				case 93:
				case 94:
				case 95:
				case 97:
				case 99:
				case 100:
				case 102:
				case 104:
				case 105:
				case 106:
				case 109:
				case 110:
				case 111:
				case 113:
				case 114:
				case 115:
				case 116:
				case 122:
				case 123:
				case 124:
				case 125:
				case 132:
				case 133:
				case 137:
				case 142:
				case 143:
				case 144:
				case 146:
				case 149:
				case 150:
				case 152:
				case 153:
				case 154:
				case 161:
				case 162:
				case 163:
				case 165:
				case 166:
				case 167:
				case 168:
				case 169:
				case 170:
				case 175:
				case 177:
				case 178:
				case 179:
				case 181:
				case 182:
				case 183:
				case 184:
				case 185:
				case 187:
				case 188:
				case 189:
				case 191:
				case 192:
				case 193:
				case 194:
				case 196:
				case 198:
				case 199:
				case 201:
				case 202:
				case 204:
				case 205:
				case 207:
				case 208:
				case 210:
				case 212:
				case 213:
				case 216:
				case 217:
				case 222:
				case 223:
				case 225:
				case 226:
				case 228:
				case 229:
				case 230:
				case 233:
				case 234:
				case 235:
				case 236:
				case 242:
				case 244:
				case 245:
				case 247:
				case 248:
				case 249:
				case 251:
				case 252:
				case 255:
				case 256:
				case 257:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 274:
				case 277:
				case 278:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 289:
				case 290:
				case 291:
				case 292:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 301:
				case 303:
				case 304:
				case 305:
				case 306:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 316:
				case 317:
				case 319:
				case 321:
				case 322:
				case 323:
				case 328:
				case 329:
				case 331:
				case 333:
				case 334:
				case 335:
				case 338:
				case 341:
				case 342:
				case 344:
				case 346:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 355:
				case 356:
				case 357:
				case 360:
				case 361:
				case 362:
				case 364:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 373:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 412:
				case 418:
					{
					this.state = 1450;
					this.showStmtIdentifier();
					}
					break;
				case -1:
					break;
				default:
					break;
				}
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 1453;
				this.match(HiveParser.KW_SHOW);
				this.state = 1455;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===304) {
					{
					this.state = 1454;
					this.match(HiveParser.KW_SORTED);
					}
				}

				this.state = 1457;
				this.match(HiveParser.KW_COLUMNS);
				this.state = 1458;
				this.from_in();
				this.state = 1459;
				this.tableName();
				this.state = 1463;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===134 || _la===148) {
					{
					this.state = 1460;
					this.from_in();
					this.state = 1461;
					localctx._db_name = this.id_();
					}
				}

				this.state = 1468;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 176:
					{
					this.state = 1465;
					this.match(HiveParser.KW_LIKE);
					this.state = 1466;
					this.showStmtIdentifier();
					}
					break;
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
				case 8:
				case 10:
				case 15:
				case 18:
				case 19:
				case 20:
				case 22:
				case 23:
				case 24:
				case 30:
				case 31:
				case 33:
				case 34:
				case 37:
				case 38:
				case 40:
				case 41:
				case 42:
				case 43:
				case 44:
				case 46:
				case 47:
				case 49:
				case 50:
				case 52:
				case 53:
				case 56:
				case 57:
				case 59:
				case 66:
				case 68:
				case 72:
				case 73:
				case 74:
				case 75:
				case 76:
				case 78:
				case 80:
				case 81:
				case 82:
				case 84:
				case 85:
				case 86:
				case 88:
				case 89:
				case 90:
				case 91:
				case 93:
				case 94:
				case 95:
				case 97:
				case 99:
				case 100:
				case 102:
				case 104:
				case 105:
				case 106:
				case 109:
				case 110:
				case 111:
				case 113:
				case 114:
				case 115:
				case 116:
				case 122:
				case 123:
				case 124:
				case 125:
				case 132:
				case 133:
				case 137:
				case 142:
				case 143:
				case 144:
				case 146:
				case 149:
				case 150:
				case 152:
				case 153:
				case 154:
				case 161:
				case 162:
				case 163:
				case 165:
				case 166:
				case 167:
				case 168:
				case 169:
				case 170:
				case 175:
				case 177:
				case 178:
				case 179:
				case 181:
				case 182:
				case 183:
				case 184:
				case 185:
				case 187:
				case 188:
				case 189:
				case 191:
				case 192:
				case 193:
				case 194:
				case 196:
				case 198:
				case 199:
				case 201:
				case 202:
				case 204:
				case 205:
				case 207:
				case 208:
				case 210:
				case 212:
				case 213:
				case 216:
				case 217:
				case 222:
				case 223:
				case 225:
				case 226:
				case 228:
				case 229:
				case 230:
				case 233:
				case 234:
				case 235:
				case 236:
				case 242:
				case 244:
				case 245:
				case 247:
				case 248:
				case 249:
				case 251:
				case 252:
				case 255:
				case 256:
				case 257:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 274:
				case 277:
				case 278:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 289:
				case 290:
				case 291:
				case 292:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 301:
				case 303:
				case 304:
				case 305:
				case 306:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 316:
				case 317:
				case 319:
				case 321:
				case 322:
				case 323:
				case 328:
				case 329:
				case 331:
				case 333:
				case 334:
				case 335:
				case 338:
				case 341:
				case 342:
				case 344:
				case 346:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 355:
				case 356:
				case 357:
				case 360:
				case 361:
				case 362:
				case 364:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 373:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 412:
				case 418:
					{
					this.state = 1467;
					this.showStmtIdentifier();
					}
					break;
				case -1:
					break;
				default:
					break;
				}
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 1470;
				this.match(HiveParser.KW_SHOW);
				this.state = 1471;
				this.match(HiveParser.KW_FUNCTIONS);
				this.state = 1474;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===176) {
					{
					this.state = 1472;
					this.match(HiveParser.KW_LIKE);
					this.state = 1473;
					this.showFunctionIdentifier();
					}
				}

				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 1476;
				this.match(HiveParser.KW_SHOW);
				this.state = 1477;
				this.match(HiveParser.KW_PARTITIONS);
				this.state = 1478;
				localctx._tabName = this.tableName();
				this.state = 1480;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===227) {
					{
					this.state = 1479;
					this.partitionSpec();
					}
				}

				this.state = 1483;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===372) {
					{
					this.state = 1482;
					this.whereClause();
					}
				}

				this.state = 1486;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===219) {
					{
					this.state = 1485;
					this.orderByClause();
					}
				}

				this.state = 1489;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===177) {
					{
					this.state = 1488;
					this.limitClause();
					}
				}

				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 1491;
				this.match(HiveParser.KW_SHOW);
				this.state = 1492;
				this.match(HiveParser.KW_CREATE);
				this.state = 1498;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 67:
				case 285:
					{
					this.state = 1493;
					this.db_schema();
					this.state = 1494;
					localctx._db_name = this.id_();
					}
					break;
				case 318:
					{
					this.state = 1496;
					this.match(HiveParser.KW_TABLE);
					this.state = 1497;
					localctx._tabName = this.tableName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 1500;
				this.match(HiveParser.KW_SHOW);
				this.state = 1501;
				this.match(HiveParser.KW_TABLE);
				this.state = 1502;
				this.match(HiveParser.KW_EXTENDED);
				this.state = 1506;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===134 || _la===148) {
					{
					this.state = 1503;
					this.from_in();
					this.state = 1504;
					localctx._db_name = this.id_();
					}
				}

				this.state = 1508;
				this.match(HiveParser.KW_LIKE);
				this.state = 1509;
				this.showStmtIdentifier();
				this.state = 1511;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===227) {
					{
					this.state = 1510;
					this.partitionSpec();
					}
				}

				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 1513;
				this.match(HiveParser.KW_SHOW);
				this.state = 1514;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 1515;
				this.tableName();
				this.state = 1519;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===386) {
					{
					this.state = 1516;
					this.match(HiveParser.LPAREN);
					this.state = 1517;
					localctx._prptyName = this.match(HiveParser.StringLiteral);
					this.state = 1518;
					this.match(HiveParser.RPAREN);
					}
				}

				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 1521;
				this.match(HiveParser.KW_SHOW);
				this.state = 1522;
				this.match(HiveParser.KW_LOCKS);
				this.state = 1534;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 81, this._ctx) ) {
				case 1:
					{
					this.state = 1523;
					this.db_schema();
					this.state = 1524;
					localctx._dbName = this.id_();
					this.state = 1526;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===117) {
						{
						this.state = 1525;
						localctx._isExtended = this.match(HiveParser.KW_EXTENDED);
						}
					}

					}
					break;
				case 2:
					{
					this.state = 1529;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3765853219) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 3185538111) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 3675051739) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2389627001) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2078382079) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 987750079) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 1004889323) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4138967) !== 0) || _la===418) {
						{
						this.state = 1528;
						localctx._parttype = this.partTypeExpr();
						}
					}

					this.state = 1532;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===117) {
						{
						this.state = 1531;
						localctx._isExtended = this.match(HiveParser.KW_EXTENDED);
						}
					}

					}
					break;
				}
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 1536;
				this.match(HiveParser.KW_SHOW);
				this.state = 1537;
				this.match(HiveParser.KW_COMPACTIONS);
				this.state = 1574;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 93, this._ctx) ) {
				case 1:
					{
					this.state = 1538;
					this.compactionId();
					}
					break;
				case 2:
					{
					this.state = 1539;
					this.db_schema();
					this.state = 1540;
					localctx._dbName = this.id_();
					this.state = 1542;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===236) {
						{
						this.state = 1541;
						this.compactionPool();
						}
					}

					this.state = 1545;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===341) {
						{
						this.state = 1544;
						this.compactionType();
						}
					}

					this.state = 1548;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===309) {
						{
						this.state = 1547;
						this.compactionStatus();
						}
					}

					this.state = 1551;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===219) {
						{
						this.state = 1550;
						this.orderByClause();
						}
					}

					this.state = 1554;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===177) {
						{
						this.state = 1553;
						this.limitClause();
						}
					}

					}
					break;
				case 3:
					{
					this.state = 1557;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 87, this._ctx) ) {
					case 1:
						{
						this.state = 1556;
						localctx._parttype = this.partTypeExpr();
						}
						break;
					}
					this.state = 1560;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===236) {
						{
						this.state = 1559;
						this.compactionPool();
						}
					}

					this.state = 1563;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===341) {
						{
						this.state = 1562;
						this.compactionType();
						}
					}

					this.state = 1566;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===309) {
						{
						this.state = 1565;
						this.compactionStatus();
						}
					}

					this.state = 1569;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===219) {
						{
						this.state = 1568;
						this.orderByClause();
						}
					}

					this.state = 1572;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===177) {
						{
						this.state = 1571;
						this.limitClause();
						}
					}

					}
					break;
				}
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 1576;
				this.match(HiveParser.KW_SHOW);
				this.state = 1577;
				this.match(HiveParser.KW_TRANSACTIONS);
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 1578;
				this.match(HiveParser.KW_SHOW);
				this.state = 1579;
				this.match(HiveParser.KW_CONF);
				this.state = 1580;
				this.match(HiveParser.StringLiteral);
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 1581;
				this.match(HiveParser.KW_SHOW);
				this.state = 1582;
				this.match(HiveParser.KW_RESOURCE);
				this.state = 1586;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 233:
					{
					this.state = 1583;
					this.match(HiveParser.KW_PLAN);
					this.state = 1584;
					localctx._rp_name = this.id_();
					}
					break;
				case 234:
					{
					this.state = 1585;
					this.match(HiveParser.KW_PLANS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 1588;
				this.match(HiveParser.KW_SHOW);
				this.state = 1589;
				this.match(HiveParser.KW_DATACONNECTORS);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showTablesFilterExpr(): ShowTablesFilterExprContext {
		let localctx: ShowTablesFilterExprContext = new ShowTablesFilterExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 92, HiveParser.RULE_showTablesFilterExpr);
		try {
			this.state = 1600;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 372:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1592;
				this.match(HiveParser.KW_WHERE);
				this.state = 1593;
				this.id_();
				this.state = 1594;
				this.match(HiveParser.EQUAL);
				this.state = 1595;
				this.match(HiveParser.StringLiteral);
				}
				break;
			case 176:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1597;
				this.match(HiveParser.KW_LIKE);
				this.state = 1598;
				this.showStmtIdentifier();
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 8:
			case 10:
			case 15:
			case 18:
			case 19:
			case 20:
			case 22:
			case 23:
			case 24:
			case 30:
			case 31:
			case 33:
			case 34:
			case 37:
			case 38:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 46:
			case 47:
			case 49:
			case 50:
			case 52:
			case 53:
			case 56:
			case 57:
			case 59:
			case 66:
			case 68:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 78:
			case 80:
			case 81:
			case 82:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 90:
			case 91:
			case 93:
			case 94:
			case 95:
			case 97:
			case 99:
			case 100:
			case 102:
			case 104:
			case 105:
			case 106:
			case 109:
			case 110:
			case 111:
			case 113:
			case 114:
			case 115:
			case 116:
			case 122:
			case 123:
			case 124:
			case 125:
			case 132:
			case 133:
			case 137:
			case 142:
			case 143:
			case 144:
			case 146:
			case 149:
			case 150:
			case 152:
			case 153:
			case 154:
			case 161:
			case 162:
			case 163:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 175:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 187:
			case 188:
			case 189:
			case 191:
			case 192:
			case 193:
			case 194:
			case 196:
			case 198:
			case 199:
			case 201:
			case 202:
			case 204:
			case 205:
			case 207:
			case 208:
			case 210:
			case 212:
			case 213:
			case 216:
			case 217:
			case 222:
			case 223:
			case 225:
			case 226:
			case 228:
			case 229:
			case 230:
			case 233:
			case 234:
			case 235:
			case 236:
			case 242:
			case 244:
			case 245:
			case 247:
			case 248:
			case 249:
			case 251:
			case 252:
			case 255:
			case 256:
			case 257:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 277:
			case 278:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 289:
			case 290:
			case 291:
			case 292:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 301:
			case 303:
			case 304:
			case 305:
			case 306:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 316:
			case 317:
			case 319:
			case 321:
			case 322:
			case 323:
			case 328:
			case 329:
			case 331:
			case 333:
			case 334:
			case 335:
			case 338:
			case 341:
			case 342:
			case 344:
			case 346:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 355:
			case 356:
			case 357:
			case 360:
			case 361:
			case 362:
			case 364:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 373:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 412:
			case 418:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1599;
				this.showStmtIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockStatement(): LockStatementContext {
		let localctx: LockStatementContext = new LockStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 94, HiveParser.RULE_lockStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1602;
			this.match(HiveParser.KW_LOCK);
			this.state = 1603;
			this.match(HiveParser.KW_TABLE);
			this.state = 1604;
			this.tableName();
			this.state = 1606;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===227) {
				{
				this.state = 1605;
				this.partitionSpec();
				}
			}

			this.state = 1608;
			this.lockMode();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockDatabase(): LockDatabaseContext {
		let localctx: LockDatabaseContext = new LockDatabaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 96, HiveParser.RULE_lockDatabase);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1610;
			this.match(HiveParser.KW_LOCK);
			this.state = 1611;
			this.db_schema();
			this.state = 1612;
			localctx._dbName = this.id_();
			this.state = 1613;
			this.lockMode();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lockMode(): LockModeContext {
		let localctx: LockModeContext = new LockModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 98, HiveParser.RULE_lockMode);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1615;
			_la = this._input.LA(1);
			if(!(_la===109 || _la===296)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unlockStatement(): UnlockStatementContext {
		let localctx: UnlockStatementContext = new UnlockStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 100, HiveParser.RULE_unlockStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1617;
			this.match(HiveParser.KW_UNLOCK);
			this.state = 1618;
			this.match(HiveParser.KW_TABLE);
			this.state = 1619;
			this.tableName();
			this.state = 1621;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===227) {
				{
				this.state = 1620;
				this.partitionSpec();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unlockDatabase(): UnlockDatabaseContext {
		let localctx: UnlockDatabaseContext = new UnlockDatabaseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 102, HiveParser.RULE_unlockDatabase);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1623;
			this.match(HiveParser.KW_UNLOCK);
			this.state = 1624;
			this.db_schema();
			this.state = 1625;
			localctx._dbName = this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createRoleStatement(): CreateRoleStatementContext {
		let localctx: CreateRoleStatementContext = new CreateRoleStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 104, HiveParser.RULE_createRoleStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1627;
			this.match(HiveParser.KW_CREATE);
			this.state = 1628;
			this.match(HiveParser.KW_ROLE);
			this.state = 1629;
			localctx._roleName = this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropRoleStatement(): DropRoleStatementContext {
		let localctx: DropRoleStatementContext = new DropRoleStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 106, HiveParser.RULE_dropRoleStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1631;
			this.match(HiveParser.KW_DROP);
			this.state = 1632;
			this.match(HiveParser.KW_ROLE);
			this.state = 1633;
			localctx._roleName = this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public grantPrivileges(): GrantPrivilegesContext {
		let localctx: GrantPrivilegesContext = new GrantPrivilegesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 108, HiveParser.RULE_grantPrivileges);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1635;
			this.match(HiveParser.KW_GRANT);
			this.state = 1636;
			localctx._privList = this.privilegeList();
			this.state = 1638;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===214) {
				{
				this.state = 1637;
				this.privilegeObject();
				}
			}

			this.state = 1640;
			this.match(HiveParser.KW_TO);
			this.state = 1641;
			this.principalSpecification();
			this.state = 1643;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 1642;
				this.withGrantOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public revokePrivileges(): RevokePrivilegesContext {
		let localctx: RevokePrivilegesContext = new RevokePrivilegesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 110, HiveParser.RULE_revokePrivileges);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1645;
			this.match(HiveParser.KW_REVOKE);
			this.state = 1647;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===138) {
				{
				this.state = 1646;
				this.grantOptionFor();
				}
			}

			this.state = 1649;
			this.privilegeList();
			this.state = 1651;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===214) {
				{
				this.state = 1650;
				this.privilegeObject();
				}
			}

			this.state = 1653;
			this.match(HiveParser.KW_FROM);
			this.state = 1654;
			this.principalSpecification();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public grantRole(): GrantRoleContext {
		let localctx: GrantRoleContext = new GrantRoleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 112, HiveParser.RULE_grantRole);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1656;
			this.match(HiveParser.KW_GRANT);
			this.state = 1658;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 103, this._ctx) ) {
			case 1:
				{
				this.state = 1657;
				this.match(HiveParser.KW_ROLE);
				}
				break;
			}
			this.state = 1660;
			this.id_();
			this.state = 1665;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 1661;
				this.match(HiveParser.COMMA);
				this.state = 1662;
				this.id_();
				}
				}
				this.state = 1667;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1668;
			this.match(HiveParser.KW_TO);
			this.state = 1669;
			this.principalSpecification();
			this.state = 1671;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 1670;
				this.withAdminOption();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public revokeRole(): RevokeRoleContext {
		let localctx: RevokeRoleContext = new RevokeRoleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 114, HiveParser.RULE_revokeRole);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1673;
			this.match(HiveParser.KW_REVOKE);
			this.state = 1675;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 106, this._ctx) ) {
			case 1:
				{
				this.state = 1674;
				this.adminOptionFor();
				}
				break;
			}
			this.state = 1678;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 107, this._ctx) ) {
			case 1:
				{
				this.state = 1677;
				this.match(HiveParser.KW_ROLE);
				}
				break;
			}
			this.state = 1680;
			this.id_();
			this.state = 1685;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 1681;
				this.match(HiveParser.COMMA);
				this.state = 1682;
				this.id_();
				}
				}
				this.state = 1687;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1688;
			this.match(HiveParser.KW_FROM);
			this.state = 1689;
			this.principalSpecification();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showRoleGrants(): ShowRoleGrantsContext {
		let localctx: ShowRoleGrantsContext = new ShowRoleGrantsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 116, HiveParser.RULE_showRoleGrants);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1691;
			this.match(HiveParser.KW_SHOW);
			this.state = 1692;
			this.match(HiveParser.KW_ROLE);
			this.state = 1693;
			this.match(HiveParser.KW_GRANT);
			this.state = 1694;
			this.principalName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showRoles(): ShowRolesContext {
		let localctx: ShowRolesContext = new ShowRolesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 118, HiveParser.RULE_showRoles);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1696;
			this.match(HiveParser.KW_SHOW);
			this.state = 1697;
			this.match(HiveParser.KW_ROLES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showCurrentRole(): ShowCurrentRoleContext {
		let localctx: ShowCurrentRoleContext = new ShowCurrentRoleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 120, HiveParser.RULE_showCurrentRole);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1699;
			this.match(HiveParser.KW_SHOW);
			this.state = 1700;
			this.match(HiveParser.KW_CURRENT);
			this.state = 1701;
			this.match(HiveParser.KW_ROLES);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setRole(): SetRoleContext {
		let localctx: SetRoleContext = new SetRoleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 122, HiveParser.RULE_setRole);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1703;
			this.match(HiveParser.KW_SET);
			this.state = 1704;
			this.match(HiveParser.KW_ROLE);
			this.state = 1708;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 7:
				{
				this.state = 1705;
				localctx._all = this.match(HiveParser.KW_ALL);
				}
				break;
			case 203:
				{
				this.state = 1706;
				localctx._none = this.match(HiveParser.KW_NONE);
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 8:
			case 10:
			case 15:
			case 18:
			case 19:
			case 20:
			case 22:
			case 23:
			case 24:
			case 30:
			case 31:
			case 33:
			case 34:
			case 37:
			case 38:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 46:
			case 47:
			case 49:
			case 50:
			case 52:
			case 53:
			case 56:
			case 57:
			case 59:
			case 66:
			case 68:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 78:
			case 80:
			case 81:
			case 82:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 90:
			case 91:
			case 93:
			case 94:
			case 95:
			case 97:
			case 99:
			case 100:
			case 102:
			case 104:
			case 105:
			case 106:
			case 109:
			case 110:
			case 111:
			case 113:
			case 114:
			case 115:
			case 116:
			case 122:
			case 123:
			case 124:
			case 125:
			case 132:
			case 133:
			case 137:
			case 142:
			case 143:
			case 144:
			case 146:
			case 149:
			case 150:
			case 152:
			case 153:
			case 154:
			case 161:
			case 162:
			case 163:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 175:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 187:
			case 188:
			case 189:
			case 191:
			case 192:
			case 193:
			case 194:
			case 196:
			case 198:
			case 199:
			case 201:
			case 202:
			case 204:
			case 205:
			case 207:
			case 208:
			case 210:
			case 212:
			case 213:
			case 216:
			case 217:
			case 222:
			case 223:
			case 225:
			case 226:
			case 228:
			case 229:
			case 230:
			case 233:
			case 234:
			case 235:
			case 236:
			case 242:
			case 244:
			case 245:
			case 247:
			case 248:
			case 249:
			case 251:
			case 252:
			case 255:
			case 256:
			case 257:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 277:
			case 278:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 289:
			case 290:
			case 291:
			case 292:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 301:
			case 303:
			case 304:
			case 305:
			case 306:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 316:
			case 317:
			case 319:
			case 321:
			case 322:
			case 323:
			case 328:
			case 329:
			case 331:
			case 333:
			case 334:
			case 335:
			case 338:
			case 341:
			case 342:
			case 344:
			case 346:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 355:
			case 356:
			case 357:
			case 360:
			case 361:
			case 362:
			case 364:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 373:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 418:
				{
				this.state = 1707;
				this.id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showGrants(): ShowGrantsContext {
		let localctx: ShowGrantsContext = new ShowGrantsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 124, HiveParser.RULE_showGrants);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1710;
			this.match(HiveParser.KW_SHOW);
			this.state = 1711;
			this.match(HiveParser.KW_GRANT);
			this.state = 1713;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===139 || _la===277 || _la===358) {
				{
				this.state = 1712;
				this.principalName();
				}
			}

			this.state = 1717;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===214) {
				{
				this.state = 1715;
				this.match(HiveParser.KW_ON);
				this.state = 1716;
				this.privilegeIncludeColObject();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showRolePrincipals(): ShowRolePrincipalsContext {
		let localctx: ShowRolePrincipalsContext = new ShowRolePrincipalsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 126, HiveParser.RULE_showRolePrincipals);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1719;
			this.match(HiveParser.KW_SHOW);
			this.state = 1720;
			this.match(HiveParser.KW_PRINCIPALS);
			this.state = 1721;
			localctx._roleName = this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public privilegeIncludeColObject(): PrivilegeIncludeColObjectContext {
		let localctx: PrivilegeIncludeColObjectContext = new PrivilegeIncludeColObjectContext(this, this._ctx, this.state);
		this.enterRule(localctx, 128, HiveParser.RULE_privilegeIncludeColObject);
		try {
			this.state = 1725;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 7:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1723;
				this.match(HiveParser.KW_ALL);
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 8:
			case 10:
			case 15:
			case 18:
			case 19:
			case 20:
			case 22:
			case 23:
			case 24:
			case 30:
			case 31:
			case 33:
			case 34:
			case 37:
			case 38:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 46:
			case 47:
			case 49:
			case 50:
			case 52:
			case 53:
			case 56:
			case 57:
			case 59:
			case 66:
			case 67:
			case 68:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 78:
			case 80:
			case 81:
			case 82:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 90:
			case 91:
			case 93:
			case 94:
			case 95:
			case 97:
			case 99:
			case 100:
			case 102:
			case 104:
			case 105:
			case 106:
			case 109:
			case 110:
			case 111:
			case 113:
			case 114:
			case 115:
			case 116:
			case 122:
			case 123:
			case 124:
			case 125:
			case 132:
			case 133:
			case 137:
			case 142:
			case 143:
			case 144:
			case 146:
			case 149:
			case 150:
			case 152:
			case 153:
			case 154:
			case 161:
			case 162:
			case 163:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 175:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 187:
			case 188:
			case 189:
			case 191:
			case 192:
			case 193:
			case 194:
			case 196:
			case 198:
			case 199:
			case 201:
			case 202:
			case 204:
			case 205:
			case 207:
			case 208:
			case 210:
			case 212:
			case 213:
			case 216:
			case 217:
			case 222:
			case 223:
			case 225:
			case 226:
			case 228:
			case 229:
			case 230:
			case 233:
			case 234:
			case 235:
			case 236:
			case 242:
			case 244:
			case 245:
			case 247:
			case 248:
			case 249:
			case 251:
			case 252:
			case 255:
			case 256:
			case 257:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 277:
			case 278:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 289:
			case 290:
			case 291:
			case 292:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 301:
			case 303:
			case 304:
			case 305:
			case 306:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 316:
			case 317:
			case 318:
			case 319:
			case 321:
			case 322:
			case 323:
			case 328:
			case 329:
			case 331:
			case 333:
			case 334:
			case 335:
			case 338:
			case 341:
			case 342:
			case 344:
			case 346:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 355:
			case 356:
			case 357:
			case 360:
			case 361:
			case 362:
			case 364:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 373:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 418:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1724;
				this.privObjectCols();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public privilegeObject(): PrivilegeObjectContext {
		let localctx: PrivilegeObjectContext = new PrivilegeObjectContext(this, this._ctx, this.state);
		this.enterRule(localctx, 130, HiveParser.RULE_privilegeObject);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1727;
			this.match(HiveParser.KW_ON);
			this.state = 1728;
			this.privObject();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public privObject(): PrivObjectContext {
		let localctx: PrivObjectContext = new PrivObjectContext(this, this._ctx, this.state);
		this.enterRule(localctx, 132, HiveParser.RULE_privObject);
		let _la: number;
		try {
			this.state = 1744;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 115, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1730;
				this.db_schema();
				this.state = 1731;
				this.id_();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1734;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===318) {
					{
					this.state = 1733;
					this.match(HiveParser.KW_TABLE);
					}
				}

				this.state = 1736;
				this.tableName();
				this.state = 1738;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===227) {
					{
					this.state = 1737;
					this.partitionSpec();
					}
				}

				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1740;
				this.match(HiveParser.KW_URI);
				this.state = 1741;
				localctx._path = this.match(HiveParser.StringLiteral);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1742;
				this.match(HiveParser.KW_SERVER);
				this.state = 1743;
				this.id_();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public privObjectCols(): PrivObjectColsContext {
		let localctx: PrivObjectColsContext = new PrivObjectColsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 134, HiveParser.RULE_privObjectCols);
		let _la: number;
		try {
			this.state = 1766;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 119, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1746;
				this.db_schema();
				this.state = 1747;
				this.id_();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1750;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===318) {
					{
					this.state = 1749;
					this.match(HiveParser.KW_TABLE);
					}
				}

				this.state = 1752;
				this.tableName();
				this.state = 1757;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===386) {
					{
					this.state = 1753;
					this.match(HiveParser.LPAREN);
					this.state = 1754;
					localctx._cols = this.columnNameList();
					this.state = 1755;
					this.match(HiveParser.RPAREN);
					}
				}

				this.state = 1760;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===227) {
					{
					this.state = 1759;
					this.partitionSpec();
					}
				}

				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1762;
				this.match(HiveParser.KW_URI);
				this.state = 1763;
				localctx._path = this.match(HiveParser.StringLiteral);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 1764;
				this.match(HiveParser.KW_SERVER);
				this.state = 1765;
				this.id_();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public privilegeList(): PrivilegeListContext {
		let localctx: PrivilegeListContext = new PrivilegeListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 136, HiveParser.RULE_privilegeList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1768;
			this.privlegeDef();
			this.state = 1773;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 1769;
				this.match(HiveParser.COMMA);
				this.state = 1770;
				this.privlegeDef();
				}
				}
				this.state = 1775;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public privlegeDef(): PrivlegeDefContext {
		let localctx: PrivlegeDefContext = new PrivlegeDefContext(this, this._ctx, this.state);
		this.enterRule(localctx, 138, HiveParser.RULE_privlegeDef);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1776;
			this.privilegeType();
			this.state = 1781;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===386) {
				{
				this.state = 1777;
				this.match(HiveParser.LPAREN);
				this.state = 1778;
				localctx._cols = this.columnNameList();
				this.state = 1779;
				this.match(HiveParser.RPAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public privilegeType(): PrivilegeTypeContext {
		let localctx: PrivilegeTypeContext = new PrivilegeTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 140, HiveParser.RULE_privilegeType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1783;
			_la = this._input.LA(1);
			if(!(_la===7 || _la===9 || _la===58 || _la===83 || _la===98 || _la===155 || _la===182 || _la===288 || _la===298 || _la===354)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public principalSpecification(): PrincipalSpecificationContext {
		let localctx: PrincipalSpecificationContext = new PrincipalSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 142, HiveParser.RULE_principalSpecification);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1785;
			this.principalName();
			this.state = 1790;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 1786;
				this.match(HiveParser.COMMA);
				this.state = 1787;
				this.principalName();
				}
				}
				this.state = 1792;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public principalName(): PrincipalNameContext {
		let localctx: PrincipalNameContext = new PrincipalNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 144, HiveParser.RULE_principalName);
		try {
			this.state = 1799;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 358:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1793;
				this.match(HiveParser.KW_USER);
				this.state = 1794;
				this.principalIdentifier();
				}
				break;
			case 139:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1795;
				this.match(HiveParser.KW_GROUP);
				this.state = 1796;
				this.principalIdentifier();
				}
				break;
			case 277:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 1797;
				this.match(HiveParser.KW_ROLE);
				this.state = 1798;
				this.id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public withGrantOption(): WithGrantOptionContext {
		let localctx: WithGrantOptionContext = new WithGrantOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 146, HiveParser.RULE_withGrantOption);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1801;
			this.match(HiveParser.KW_WITH);
			this.state = 1802;
			this.match(HiveParser.KW_GRANT);
			this.state = 1803;
			this.match(HiveParser.KW_OPTION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public grantOptionFor(): GrantOptionForContext {
		let localctx: GrantOptionForContext = new GrantOptionForContext(this, this._ctx, this.state);
		this.enterRule(localctx, 148, HiveParser.RULE_grantOptionFor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1805;
			this.match(HiveParser.KW_GRANT);
			this.state = 1806;
			this.match(HiveParser.KW_OPTION);
			this.state = 1807;
			this.match(HiveParser.KW_FOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public adminOptionFor(): AdminOptionForContext {
		let localctx: AdminOptionForContext = new AdminOptionForContext(this, this._ctx, this.state);
		this.enterRule(localctx, 150, HiveParser.RULE_adminOptionFor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1809;
			this.match(HiveParser.KW_ADMIN);
			this.state = 1810;
			this.match(HiveParser.KW_OPTION);
			this.state = 1811;
			this.match(HiveParser.KW_FOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public withAdminOption(): WithAdminOptionContext {
		let localctx: WithAdminOptionContext = new WithAdminOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 152, HiveParser.RULE_withAdminOption);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1813;
			this.match(HiveParser.KW_WITH);
			this.state = 1814;
			this.match(HiveParser.KW_ADMIN);
			this.state = 1815;
			this.match(HiveParser.KW_OPTION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public metastoreCheck(): MetastoreCheckContext {
		let localctx: MetastoreCheckContext = new MetastoreCheckContext(this, this._ctx, this.state);
		this.enterRule(localctx, 154, HiveParser.RULE_metastoreCheck);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1817;
			this.match(HiveParser.KW_MSCK);
			this.state = 1819;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===266) {
				{
				this.state = 1818;
				localctx._repair = this.match(HiveParser.KW_REPAIR);
				}
			}

			{
			this.state = 1821;
			this.match(HiveParser.KW_TABLE);
			this.state = 1822;
			this.tableName();
			this.state = 1828;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===4 || _la===98 || _la===315) {
				{
				this.state = 1823;
				localctx._opt = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===4 || _la===98 || _la===315)) {
				    localctx._opt = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 1824;
				localctx._parts = this.match(HiveParser.KW_PARTITIONS);
				this.state = 1826;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===386) {
					{
					this.state = 1825;
					this.partitionSelectorSpec();
					}
				}

				}
			}

			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resourceList(): ResourceListContext {
		let localctx: ResourceListContext = new ResourceListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 156, HiveParser.RULE_resourceList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1830;
			this.resource();
			this.state = 1835;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 1831;
				this.match(HiveParser.COMMA);
				this.state = 1832;
				this.resource();
				}
				}
				this.state = 1837;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resource(): ResourceContext {
		let localctx: ResourceContext = new ResourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 158, HiveParser.RULE_resource);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1838;
			localctx._resType = this.resourceType();
			this.state = 1839;
			localctx._resPath = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resourceType(): ResourceTypeContext {
		let localctx: ResourceTypeContext = new ResourceTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 160, HiveParser.RULE_resourceType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1841;
			_la = this._input.LA(1);
			if(!(_la===15 || _la===123 || _la===163)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createFunctionStatement(): CreateFunctionStatementContext {
		let localctx: CreateFunctionStatementContext = new CreateFunctionStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 162, HiveParser.RULE_createFunctionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1843;
			this.match(HiveParser.KW_CREATE);
			this.state = 1845;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===322) {
				{
				this.state = 1844;
				localctx._temp = this.match(HiveParser.KW_TEMPORARY);
				}
			}

			this.state = 1847;
			this.match(HiveParser.KW_FUNCTION);
			this.state = 1848;
			this.functionIdentifier();
			this.state = 1849;
			this.match(HiveParser.KW_AS);
			this.state = 1850;
			this.match(HiveParser.StringLiteral);
			this.state = 1853;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===359) {
				{
				this.state = 1851;
				this.match(HiveParser.KW_USING);
				this.state = 1852;
				localctx._rList = this.resourceList();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropFunctionStatement(): DropFunctionStatementContext {
		let localctx: DropFunctionStatementContext = new DropFunctionStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 164, HiveParser.RULE_dropFunctionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1855;
			this.match(HiveParser.KW_DROP);
			this.state = 1857;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===322) {
				{
				this.state = 1856;
				localctx._temp = this.match(HiveParser.KW_TEMPORARY);
				}
			}

			this.state = 1859;
			this.match(HiveParser.KW_FUNCTION);
			this.state = 1861;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 1860;
				this.ifExists();
				}
			}

			this.state = 1863;
			this.functionIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public reloadFunctionsStatement(): ReloadFunctionsStatementContext {
		let localctx: ReloadFunctionsStatementContext = new ReloadFunctionsStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 166, HiveParser.RULE_reloadFunctionsStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1865;
			this.match(HiveParser.KW_RELOAD);
			this.state = 1866;
			_la = this._input.LA(1);
			if(!(_la===136 || _la===137)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createMacroStatement(): CreateMacroStatementContext {
		let localctx: CreateMacroStatementContext = new CreateMacroStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 168, HiveParser.RULE_createMacroStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1868;
			this.match(HiveParser.KW_CREATE);
			this.state = 1869;
			this.match(HiveParser.KW_TEMPORARY);
			this.state = 1870;
			this.match(HiveParser.KW_MACRO);
			this.state = 1871;
			this.match(HiveParser.Identifier);
			this.state = 1872;
			this.match(HiveParser.LPAREN);
			this.state = 1874;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3765853219) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 3185538111) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 3675051739) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2389627001) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2078382079) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 987750079) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 1004889323) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4138967) !== 0) || _la===418) {
				{
				this.state = 1873;
				this.columnNameTypeList();
				}
			}

			this.state = 1876;
			this.match(HiveParser.RPAREN);
			this.state = 1877;
			this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropMacroStatement(): DropMacroStatementContext {
		let localctx: DropMacroStatementContext = new DropMacroStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 170, HiveParser.RULE_dropMacroStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1879;
			this.match(HiveParser.KW_DROP);
			this.state = 1880;
			this.match(HiveParser.KW_TEMPORARY);
			this.state = 1881;
			this.match(HiveParser.KW_MACRO);
			this.state = 1883;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 1882;
				this.ifExists();
				}
			}

			this.state = 1885;
			this.match(HiveParser.Identifier);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createViewStatement(): CreateViewStatementContext {
		let localctx: CreateViewStatementContext = new CreateViewStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 172, HiveParser.RULE_createViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1887;
			this.match(HiveParser.KW_CREATE);
			this.state = 1889;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===218) {
				{
				this.state = 1888;
				this.orReplace();
				}
			}

			this.state = 1891;
			this.match(HiveParser.KW_VIEW);
			this.state = 1893;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 1892;
				this.ifNotExists();
				}
			}

			this.state = 1895;
			localctx._name = this.tableName();
			this.state = 1900;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===386) {
				{
				this.state = 1896;
				this.match(HiveParser.LPAREN);
				this.state = 1897;
				this.columnNameCommentList();
				this.state = 1898;
				this.match(HiveParser.RPAREN);
				}
			}

			this.state = 1903;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===47) {
				{
				this.state = 1902;
				this.tableComment();
				}
			}

			this.state = 1906;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===228) {
				{
				this.state = 1905;
				this.viewPartition();
				}
			}

			this.state = 1909;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===321) {
				{
				this.state = 1908;
				this.tablePropertiesPrefixed();
				}
			}

			this.state = 1911;
			this.match(HiveParser.KW_AS);
			this.state = 1912;
			this.selectStatementWithCTE();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewPartition(): ViewPartitionContext {
		let localctx: ViewPartitionContext = new ViewPartitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 174, HiveParser.RULE_viewPartition);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1914;
			this.match(HiveParser.KW_PARTITIONED);
			this.state = 1915;
			this.match(HiveParser.KW_ON);
			this.state = 1921;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 386:
				{
				this.state = 1916;
				this.match(HiveParser.LPAREN);
				this.state = 1917;
				this.columnNameList();
				}
				break;
			case 305:
				{
				this.state = 1918;
				this.match(HiveParser.KW_SPEC);
				this.state = 1919;
				this.match(HiveParser.LPAREN);
				this.state = 1920;
				localctx._spec = this.partitionTransformSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1923;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewOrganization(): ViewOrganizationContext {
		let localctx: ViewOrganizationContext = new ViewOrganizationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 176, HiveParser.RULE_viewOrganization);
		try {
			this.state = 1927;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 42:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 1925;
				this.viewClusterSpec();
				}
				break;
			case 94:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 1926;
				this.viewComplexSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewClusterSpec(): ViewClusterSpecContext {
		let localctx: ViewClusterSpecContext = new ViewClusterSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 178, HiveParser.RULE_viewClusterSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1929;
			this.match(HiveParser.KW_CLUSTERED);
			this.state = 1930;
			this.match(HiveParser.KW_ON);
			this.state = 1931;
			this.match(HiveParser.LPAREN);
			this.state = 1932;
			this.columnNameList();
			this.state = 1933;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewComplexSpec(): ViewComplexSpecContext {
		let localctx: ViewComplexSpecContext = new ViewComplexSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 180, HiveParser.RULE_viewComplexSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1935;
			this.viewDistSpec();
			this.state = 1936;
			this.viewSortSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewDistSpec(): ViewDistSpecContext {
		let localctx: ViewDistSpecContext = new ViewDistSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 182, HiveParser.RULE_viewDistSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1938;
			this.match(HiveParser.KW_DISTRIBUTED);
			this.state = 1939;
			this.match(HiveParser.KW_ON);
			this.state = 1940;
			this.match(HiveParser.LPAREN);
			this.state = 1941;
			localctx._colList = this.columnNameList();
			this.state = 1942;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewSortSpec(): ViewSortSpecContext {
		let localctx: ViewSortSpecContext = new ViewSortSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 184, HiveParser.RULE_viewSortSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1944;
			this.match(HiveParser.KW_SORTED);
			this.state = 1945;
			this.match(HiveParser.KW_ON);
			this.state = 1946;
			this.match(HiveParser.LPAREN);
			this.state = 1947;
			localctx._colList = this.columnNameList();
			this.state = 1948;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropViewStatement(): DropViewStatementContext {
		let localctx: DropViewStatementContext = new DropViewStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 186, HiveParser.RULE_dropViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1950;
			this.match(HiveParser.KW_DROP);
			this.state = 1951;
			this.match(HiveParser.KW_VIEW);
			this.state = 1953;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 1952;
				this.ifExists();
				}
			}

			this.state = 1955;
			this.viewName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createMaterializedViewStatement(): CreateMaterializedViewStatementContext {
		let localctx: CreateMaterializedViewStatementContext = new CreateMaterializedViewStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 188, HiveParser.RULE_createMaterializedViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1957;
			this.match(HiveParser.KW_CREATE);
			this.state = 1958;
			this.match(HiveParser.KW_MATERIALIZED);
			this.state = 1959;
			this.match(HiveParser.KW_VIEW);
			this.state = 1961;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 1960;
				this.ifNotExists();
				}
			}

			this.state = 1963;
			localctx._name = this.tableName();
			this.state = 1965;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===91) {
				{
				this.state = 1964;
				this.rewriteDisabled();
				}
			}

			this.state = 1968;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===47) {
				{
				this.state = 1967;
				this.tableComment();
				}
			}

			this.state = 1971;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===228) {
				{
				this.state = 1970;
				this.viewPartition();
				}
			}

			this.state = 1974;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===42 || _la===94) {
				{
				this.state = 1973;
				this.viewOrganization();
				}
			}

			this.state = 1977;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===281) {
				{
				this.state = 1976;
				this.tableRowFormat();
				}
			}

			this.state = 1980;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===310) {
				{
				this.state = 1979;
				this.tableFileFormat();
				}
			}

			this.state = 1983;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===181) {
				{
				this.state = 1982;
				this.tableLocation();
				}
			}

			this.state = 1986;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===321) {
				{
				this.state = 1985;
				this.tablePropertiesPrefixed();
				}
			}

			this.state = 1988;
			this.match(HiveParser.KW_AS);
			this.state = 1989;
			this.selectStatementWithCTE();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropMaterializedViewStatement(): DropMaterializedViewStatementContext {
		let localctx: DropMaterializedViewStatementContext = new DropMaterializedViewStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 190, HiveParser.RULE_dropMaterializedViewStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1991;
			this.match(HiveParser.KW_DROP);
			this.state = 1992;
			this.match(HiveParser.KW_MATERIALIZED);
			this.state = 1993;
			this.match(HiveParser.KW_VIEW);
			this.state = 1995;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 1994;
				this.ifExists();
				}
			}

			this.state = 1997;
			this.viewName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createScheduledQueryStatement(): CreateScheduledQueryStatementContext {
		let localctx: CreateScheduledQueryStatementContext = new CreateScheduledQueryStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 192, HiveParser.RULE_createScheduledQueryStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 1999;
			this.match(HiveParser.KW_CREATE);
			this.state = 2000;
			this.match(HiveParser.KW_SCHEDULED);
			this.state = 2001;
			this.match(HiveParser.KW_QUERY);
			this.state = 2002;
			localctx._name = this.id_();
			this.state = 2003;
			this.scheduleSpec();
			this.state = 2005;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===111) {
				{
				this.state = 2004;
				this.executedAsSpec();
				}
			}

			this.state = 2008;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===91 || _la===102) {
				{
				this.state = 2007;
				this.enableSpecification();
				}
			}

			this.state = 2010;
			this.definedAsSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropScheduledQueryStatement(): DropScheduledQueryStatementContext {
		let localctx: DropScheduledQueryStatementContext = new DropScheduledQueryStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 194, HiveParser.RULE_dropScheduledQueryStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2012;
			this.match(HiveParser.KW_DROP);
			this.state = 2013;
			this.match(HiveParser.KW_SCHEDULED);
			this.state = 2014;
			this.match(HiveParser.KW_QUERY);
			this.state = 2015;
			localctx._name = this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterScheduledQueryStatement(): AlterScheduledQueryStatementContext {
		let localctx: AlterScheduledQueryStatementContext = new AlterScheduledQueryStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 196, HiveParser.RULE_alterScheduledQueryStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2017;
			this.match(HiveParser.KW_ALTER);
			this.state = 2018;
			this.match(HiveParser.KW_SCHEDULED);
			this.state = 2019;
			this.match(HiveParser.KW_QUERY);
			this.state = 2020;
			localctx._name = this.id_();
			this.state = 2021;
			localctx._mod = this.alterScheduledQueryChange();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterScheduledQueryChange(): AlterScheduledQueryChangeContext {
		let localctx: AlterScheduledQueryChangeContext = new AlterScheduledQueryChangeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 198, HiveParser.RULE_alterScheduledQueryChange);
		try {
			this.state = 2028;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 59:
			case 106:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2023;
				this.scheduleSpec();
				}
				break;
			case 111:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2024;
				this.executedAsSpec();
				}
				break;
			case 91:
			case 102:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2025;
				this.enableSpecification();
				}
				break;
			case 17:
			case 82:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2026;
				this.definedAsSpec();
				}
				break;
			case 110:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2027;
				this.match(HiveParser.KW_EXECUTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public scheduleSpec(): ScheduleSpecContext {
		let localctx: ScheduleSpecContext = new ScheduleSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 200, HiveParser.RULE_scheduleSpec);
		let _la: number;
		try {
			this.state = 2045;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 59:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2030;
				this.match(HiveParser.KW_CRON);
				this.state = 2031;
				localctx._cronString = this.match(HiveParser.StringLiteral);
				}
				break;
			case 106:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2032;
				this.match(HiveParser.KW_EVERY);
				this.state = 2034;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===417) {
					{
					this.state = 2033;
					localctx._value = this.match(HiveParser.Number);
					}
				}

				this.state = 2036;
				localctx._qualifier = this.intervalQualifiers();
				this.state = 2043;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===20 || _la===213) {
					{
					this.state = 2040;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case 20:
						{
						this.state = 2037;
						this.match(HiveParser.KW_AT);
						}
						break;
					case 213:
						{
						this.state = 2038;
						this.match(HiveParser.KW_OFFSET);
						this.state = 2039;
						this.match(HiveParser.KW_BY);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2042;
					localctx._offsetTs = this.match(HiveParser.StringLiteral);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public executedAsSpec(): ExecutedAsSpecContext {
		let localctx: ExecutedAsSpecContext = new ExecutedAsSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 202, HiveParser.RULE_executedAsSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2047;
			this.match(HiveParser.KW_EXECUTED);
			this.state = 2048;
			this.match(HiveParser.KW_AS);
			this.state = 2049;
			localctx._executedAs = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public definedAsSpec(): DefinedAsSpecContext {
		let localctx: DefinedAsSpecContext = new DefinedAsSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 204, HiveParser.RULE_definedAsSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2052;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===82) {
				{
				this.state = 2051;
				this.match(HiveParser.KW_DEFINED);
				}
			}

			this.state = 2054;
			this.match(HiveParser.KW_AS);
			this.state = 2055;
			this.statement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showFunctionIdentifier(): ShowFunctionIdentifierContext {
		let localctx: ShowFunctionIdentifierContext = new ShowFunctionIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 206, HiveParser.RULE_showFunctionIdentifier);
		try {
			this.state = 2059;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 8:
			case 10:
			case 15:
			case 18:
			case 19:
			case 20:
			case 22:
			case 23:
			case 24:
			case 30:
			case 31:
			case 33:
			case 34:
			case 37:
			case 38:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 46:
			case 47:
			case 49:
			case 50:
			case 52:
			case 53:
			case 56:
			case 57:
			case 59:
			case 66:
			case 68:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 78:
			case 80:
			case 81:
			case 82:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 90:
			case 91:
			case 93:
			case 94:
			case 95:
			case 97:
			case 99:
			case 100:
			case 102:
			case 104:
			case 105:
			case 106:
			case 109:
			case 110:
			case 111:
			case 113:
			case 114:
			case 115:
			case 116:
			case 122:
			case 123:
			case 124:
			case 125:
			case 132:
			case 133:
			case 137:
			case 142:
			case 143:
			case 144:
			case 146:
			case 149:
			case 150:
			case 152:
			case 153:
			case 154:
			case 161:
			case 162:
			case 163:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 175:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 187:
			case 188:
			case 189:
			case 191:
			case 192:
			case 193:
			case 194:
			case 196:
			case 198:
			case 199:
			case 201:
			case 202:
			case 204:
			case 205:
			case 207:
			case 208:
			case 210:
			case 212:
			case 213:
			case 216:
			case 217:
			case 222:
			case 223:
			case 225:
			case 226:
			case 228:
			case 229:
			case 230:
			case 233:
			case 234:
			case 235:
			case 236:
			case 242:
			case 244:
			case 245:
			case 247:
			case 248:
			case 249:
			case 251:
			case 252:
			case 255:
			case 256:
			case 257:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 277:
			case 278:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 289:
			case 290:
			case 291:
			case 292:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 301:
			case 303:
			case 304:
			case 305:
			case 306:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 316:
			case 317:
			case 319:
			case 321:
			case 322:
			case 323:
			case 328:
			case 329:
			case 331:
			case 333:
			case 334:
			case 335:
			case 338:
			case 341:
			case 342:
			case 344:
			case 346:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 355:
			case 356:
			case 357:
			case 360:
			case 361:
			case 362:
			case 364:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 373:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 418:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2057;
				this.functionIdentifier();
				}
				break;
			case 412:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2058;
				this.match(HiveParser.StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public showStmtIdentifier(): ShowStmtIdentifierContext {
		let localctx: ShowStmtIdentifierContext = new ShowStmtIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 208, HiveParser.RULE_showStmtIdentifier);
		try {
			this.state = 2063;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 8:
			case 10:
			case 15:
			case 18:
			case 19:
			case 20:
			case 22:
			case 23:
			case 24:
			case 30:
			case 31:
			case 33:
			case 34:
			case 37:
			case 38:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 46:
			case 47:
			case 49:
			case 50:
			case 52:
			case 53:
			case 56:
			case 57:
			case 59:
			case 66:
			case 68:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 78:
			case 80:
			case 81:
			case 82:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 90:
			case 91:
			case 93:
			case 94:
			case 95:
			case 97:
			case 99:
			case 100:
			case 102:
			case 104:
			case 105:
			case 106:
			case 109:
			case 110:
			case 111:
			case 113:
			case 114:
			case 115:
			case 116:
			case 122:
			case 123:
			case 124:
			case 125:
			case 132:
			case 133:
			case 137:
			case 142:
			case 143:
			case 144:
			case 146:
			case 149:
			case 150:
			case 152:
			case 153:
			case 154:
			case 161:
			case 162:
			case 163:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 175:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 187:
			case 188:
			case 189:
			case 191:
			case 192:
			case 193:
			case 194:
			case 196:
			case 198:
			case 199:
			case 201:
			case 202:
			case 204:
			case 205:
			case 207:
			case 208:
			case 210:
			case 212:
			case 213:
			case 216:
			case 217:
			case 222:
			case 223:
			case 225:
			case 226:
			case 228:
			case 229:
			case 230:
			case 233:
			case 234:
			case 235:
			case 236:
			case 242:
			case 244:
			case 245:
			case 247:
			case 248:
			case 249:
			case 251:
			case 252:
			case 255:
			case 256:
			case 257:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 277:
			case 278:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 289:
			case 290:
			case 291:
			case 292:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 301:
			case 303:
			case 304:
			case 305:
			case 306:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 316:
			case 317:
			case 319:
			case 321:
			case 322:
			case 323:
			case 328:
			case 329:
			case 331:
			case 333:
			case 334:
			case 335:
			case 338:
			case 341:
			case 342:
			case 344:
			case 346:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 355:
			case 356:
			case 357:
			case 360:
			case 361:
			case 362:
			case 364:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 373:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 418:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2061;
				this.id_();
				}
				break;
			case 412:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2062;
				this.match(HiveParser.StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableComment(): TableCommentContext {
		let localctx: TableCommentContext = new TableCommentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 210, HiveParser.RULE_tableComment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2065;
			this.match(HiveParser.KW_COMMENT);
			this.state = 2066;
			localctx._comment = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTablePartitionSpec(): CreateTablePartitionSpecContext {
		let localctx: CreateTablePartitionSpecContext = new CreateTablePartitionSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 212, HiveParser.RULE_createTablePartitionSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2068;
			this.match(HiveParser.KW_PARTITIONED);
			this.state = 2069;
			this.match(HiveParser.KW_BY);
			this.state = 2078;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 386:
				{
				this.state = 2070;
				this.match(HiveParser.LPAREN);
				this.state = 2073;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 163, this._ctx) ) {
				case 1:
					{
					this.state = 2071;
					localctx._opt1 = this.createTablePartitionColumnTypeSpec();
					}
					break;
				case 2:
					{
					this.state = 2072;
					localctx._opt2 = this.createTablePartitionColumnSpec();
					}
					break;
				}
				}
				break;
			case 305:
				{
				this.state = 2075;
				this.match(HiveParser.KW_SPEC);
				this.state = 2076;
				this.match(HiveParser.LPAREN);
				this.state = 2077;
				localctx._spec = this.partitionTransformSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2080;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTablePartitionColumnTypeSpec(): CreateTablePartitionColumnTypeSpecContext {
		let localctx: CreateTablePartitionColumnTypeSpecContext = new CreateTablePartitionColumnTypeSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 214, HiveParser.RULE_createTablePartitionColumnTypeSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2082;
			this.columnNameTypeConstraint();
			this.state = 2087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2083;
				this.match(HiveParser.COMMA);
				this.state = 2084;
				this.columnNameTypeConstraint();
				}
				}
				this.state = 2089;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTablePartitionColumnSpec(): CreateTablePartitionColumnSpecContext {
		let localctx: CreateTablePartitionColumnSpecContext = new CreateTablePartitionColumnSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 216, HiveParser.RULE_createTablePartitionColumnSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2090;
			this.columnName();
			this.state = 2095;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2091;
				this.match(HiveParser.COMMA);
				this.state = 2092;
				this.columnName();
				}
				}
				this.state = 2097;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionTransformSpec(): PartitionTransformSpecContext {
		let localctx: PartitionTransformSpecContext = new PartitionTransformSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 218, HiveParser.RULE_partitionTransformSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2098;
			this.columnNameTransformConstraint();
			this.state = 2103;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2099;
				this.match(HiveParser.COMMA);
				this.state = 2100;
				this.columnNameTransformConstraint();
				}
				}
				this.state = 2105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameTransformConstraint(): ColumnNameTransformConstraintContext {
		let localctx: ColumnNameTransformConstraintContext = new ColumnNameTransformConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 220, HiveParser.RULE_columnNameTransformConstraint);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2106;
			this.partitionTransformType();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionTransformType(): PartitionTransformTypeContext {
		let localctx: PartitionTransformTypeContext = new PartitionTransformTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 222, HiveParser.RULE_partitionTransformType);
		let _la: number;
		try {
			this.state = 2121;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 168, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2108;
				this.columnName();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2109;
				_la = this._input.LA(1);
				if(!(_la===73 || _la===143 || _la===199 || _la===380)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 2110;
				this.match(HiveParser.LPAREN);
				this.state = 2111;
				this.columnName();
				this.state = 2112;
				this.match(HiveParser.RPAREN);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2114;
				_la = this._input.LA(1);
				if(!(_la===30 || _la===340)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 2115;
				this.match(HiveParser.LPAREN);
				this.state = 2116;
				localctx._value = this.match(HiveParser.Number);
				this.state = 2117;
				this.match(HiveParser.COMMA);
				this.state = 2118;
				this.columnName();
				this.state = 2119;
				this.match(HiveParser.RPAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableBuckets(): TableBucketsContext {
		let localctx: TableBucketsContext = new TableBucketsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 224, HiveParser.RULE_tableBuckets);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2123;
			this.match(HiveParser.KW_CLUSTERED);
			this.state = 2124;
			this.match(HiveParser.KW_BY);
			this.state = 2125;
			this.match(HiveParser.LPAREN);
			this.state = 2126;
			localctx._bucketCols = this.columnNameList();
			this.state = 2127;
			this.match(HiveParser.RPAREN);
			this.state = 2134;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===304) {
				{
				this.state = 2128;
				this.match(HiveParser.KW_SORTED);
				this.state = 2129;
				this.match(HiveParser.KW_BY);
				this.state = 2130;
				this.match(HiveParser.LPAREN);
				this.state = 2131;
				localctx._sortCols = this.columnNameOrderList();
				this.state = 2132;
				this.match(HiveParser.RPAREN);
				}
			}

			this.state = 2136;
			this.match(HiveParser.KW_INTO);
			this.state = 2137;
			localctx._num = this.match(HiveParser.Number);
			this.state = 2138;
			this.match(HiveParser.KW_BUCKETS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableImplBuckets(): TableImplBucketsContext {
		let localctx: TableImplBucketsContext = new TableImplBucketsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 226, HiveParser.RULE_tableImplBuckets);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2140;
			this.match(HiveParser.KW_CLUSTERED);
			this.state = 2141;
			this.match(HiveParser.KW_INTO);
			this.state = 2142;
			localctx._num = this.match(HiveParser.Number);
			this.state = 2143;
			this.match(HiveParser.KW_BUCKETS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableSkewed(): TableSkewedContext {
		let localctx: TableSkewedContext = new TableSkewedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 228, HiveParser.RULE_tableSkewed);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2145;
			this.match(HiveParser.KW_SKEWED);
			this.state = 2146;
			this.match(HiveParser.KW_BY);
			this.state = 2147;
			this.match(HiveParser.LPAREN);
			this.state = 2148;
			localctx._skewedCols = this.columnNameList();
			this.state = 2149;
			this.match(HiveParser.RPAREN);
			this.state = 2150;
			this.match(HiveParser.KW_ON);
			this.state = 2151;
			this.match(HiveParser.LPAREN);
			this.state = 2152;
			localctx._skewedValues = this.skewedValueElement();
			this.state = 2153;
			this.match(HiveParser.RPAREN);
			this.state = 2155;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 170, this._ctx) ) {
			case 1:
				{
				this.state = 2154;
				this.storedAsDirs();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rowFormat(): RowFormatContext {
		let localctx: RowFormatContext = new RowFormatContext(this, this._ctx, this.state);
		this.enterRule(localctx, 230, HiveParser.RULE_rowFormat);
		try {
			this.state = 2159;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 171, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2157;
				this.rowFormatSerde();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2158;
				this.rowFormatDelimited();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public recordReader(): RecordReaderContext {
		let localctx: RecordReaderContext = new RecordReaderContext(this, this._ctx, this.state);
		this.enterRule(localctx, 232, HiveParser.RULE_recordReader);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2161;
			this.match(HiveParser.KW_RECORDREADER);
			this.state = 2162;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public recordWriter(): RecordWriterContext {
		let localctx: RecordWriterContext = new RecordWriterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 234, HiveParser.RULE_recordWriter);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2164;
			this.match(HiveParser.KW_RECORDWRITER);
			this.state = 2165;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rowFormatSerde(): RowFormatSerdeContext {
		let localctx: RowFormatSerdeContext = new RowFormatSerdeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 236, HiveParser.RULE_rowFormatSerde);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2167;
			this.match(HiveParser.KW_ROW);
			this.state = 2168;
			this.match(HiveParser.KW_FORMAT);
			this.state = 2169;
			this.match(HiveParser.KW_SERDE);
			this.state = 2170;
			localctx._name = this.match(HiveParser.StringLiteral);
			this.state = 2174;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 2171;
				this.match(HiveParser.KW_WITH);
				this.state = 2172;
				this.match(HiveParser.KW_SERDEPROPERTIES);
				this.state = 2173;
				localctx._serdeprops = this.tableProperties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rowFormatDelimited(): RowFormatDelimitedContext {
		let localctx: RowFormatDelimitedContext = new RowFormatDelimitedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 238, HiveParser.RULE_rowFormatDelimited);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2176;
			this.match(HiveParser.KW_ROW);
			this.state = 2177;
			this.match(HiveParser.KW_FORMAT);
			this.state = 2178;
			this.match(HiveParser.KW_DELIMITED);
			this.state = 2180;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===122) {
				{
				this.state = 2179;
				this.tableRowFormatFieldIdentifier();
				}
			}

			this.state = 2183;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===44) {
				{
				this.state = 2182;
				this.tableRowFormatCollItemsIdentifier();
				}
			}

			this.state = 2186;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 175, this._ctx) ) {
			case 1:
				{
				this.state = 2185;
				this.tableRowFormatMapKeysIdentifier();
				}
				break;
			}
			this.state = 2189;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===178) {
				{
				this.state = 2188;
				this.tableRowFormatLinesIdentifier();
				}
			}

			this.state = 2192;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===209) {
				{
				this.state = 2191;
				this.tableRowNullFormat();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableRowFormat(): TableRowFormatContext {
		let localctx: TableRowFormatContext = new TableRowFormatContext(this, this._ctx, this.state);
		this.enterRule(localctx, 240, HiveParser.RULE_tableRowFormat);
		try {
			this.state = 2196;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 178, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2194;
				this.rowFormatDelimited();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2195;
				this.rowFormatSerde();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tablePropertiesPrefixed(): TablePropertiesPrefixedContext {
		let localctx: TablePropertiesPrefixedContext = new TablePropertiesPrefixedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 242, HiveParser.RULE_tablePropertiesPrefixed);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2198;
			this.match(HiveParser.KW_TBLPROPERTIES);
			this.state = 2199;
			this.tableProperties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableProperties(): TablePropertiesContext {
		let localctx: TablePropertiesContext = new TablePropertiesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 244, HiveParser.RULE_tableProperties);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2201;
			this.match(HiveParser.LPAREN);
			this.state = 2202;
			this.tablePropertiesList();
			this.state = 2203;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tablePropertiesList(): TablePropertiesListContext {
		let localctx: TablePropertiesListContext = new TablePropertiesListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 246, HiveParser.RULE_tablePropertiesList);
		let _la: number;
		try {
			this.state = 2221;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 181, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2205;
				this.keyValueProperty();
				this.state = 2210;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===384) {
					{
					{
					this.state = 2206;
					this.match(HiveParser.COMMA);
					this.state = 2207;
					this.keyValueProperty();
					}
					}
					this.state = 2212;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2213;
				this.keyProperty();
				this.state = 2218;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===384) {
					{
					{
					this.state = 2214;
					this.match(HiveParser.COMMA);
					this.state = 2215;
					this.keyProperty();
					}
					}
					this.state = 2220;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyValueProperty(): KeyValuePropertyContext {
		let localctx: KeyValuePropertyContext = new KeyValuePropertyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 248, HiveParser.RULE_keyValueProperty);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2223;
			localctx._key = this.match(HiveParser.StringLiteral);
			this.state = 2224;
			this.match(HiveParser.EQUAL);
			this.state = 2225;
			localctx._value = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public keyProperty(): KeyPropertyContext {
		let localctx: KeyPropertyContext = new KeyPropertyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 250, HiveParser.RULE_keyProperty);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2227;
			localctx._key = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableRowFormatFieldIdentifier(): TableRowFormatFieldIdentifierContext {
		let localctx: TableRowFormatFieldIdentifierContext = new TableRowFormatFieldIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 252, HiveParser.RULE_tableRowFormatFieldIdentifier);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2229;
			this.match(HiveParser.KW_FIELDS);
			this.state = 2230;
			this.match(HiveParser.KW_TERMINATED);
			this.state = 2231;
			this.match(HiveParser.KW_BY);
			this.state = 2232;
			localctx._fldIdnt = this.match(HiveParser.StringLiteral);
			this.state = 2236;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===105) {
				{
				this.state = 2233;
				this.match(HiveParser.KW_ESCAPED);
				this.state = 2234;
				this.match(HiveParser.KW_BY);
				this.state = 2235;
				localctx._fldEscape = this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableRowFormatCollItemsIdentifier(): TableRowFormatCollItemsIdentifierContext {
		let localctx: TableRowFormatCollItemsIdentifierContext = new TableRowFormatCollItemsIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 254, HiveParser.RULE_tableRowFormatCollItemsIdentifier);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2238;
			this.match(HiveParser.KW_COLLECTION);
			this.state = 2239;
			this.match(HiveParser.KW_ITEMS);
			this.state = 2240;
			this.match(HiveParser.KW_TERMINATED);
			this.state = 2241;
			this.match(HiveParser.KW_BY);
			this.state = 2242;
			localctx._collIdnt = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableRowFormatMapKeysIdentifier(): TableRowFormatMapKeysIdentifierContext {
		let localctx: TableRowFormatMapKeysIdentifierContext = new TableRowFormatMapKeysIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 256, HiveParser.RULE_tableRowFormatMapKeysIdentifier);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2244;
			this.match(HiveParser.KW_MAP);
			this.state = 2245;
			this.match(HiveParser.KW_KEYS);
			this.state = 2246;
			this.match(HiveParser.KW_TERMINATED);
			this.state = 2247;
			this.match(HiveParser.KW_BY);
			this.state = 2248;
			localctx._mapKeysIdnt = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableRowFormatLinesIdentifier(): TableRowFormatLinesIdentifierContext {
		let localctx: TableRowFormatLinesIdentifierContext = new TableRowFormatLinesIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 258, HiveParser.RULE_tableRowFormatLinesIdentifier);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2250;
			this.match(HiveParser.KW_LINES);
			this.state = 2251;
			this.match(HiveParser.KW_TERMINATED);
			this.state = 2252;
			this.match(HiveParser.KW_BY);
			this.state = 2253;
			localctx._linesIdnt = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableRowNullFormat(): TableRowNullFormatContext {
		let localctx: TableRowNullFormatContext = new TableRowNullFormatContext(this, this._ctx, this.state);
		this.enterRule(localctx, 260, HiveParser.RULE_tableRowNullFormat);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2255;
			this.match(HiveParser.KW_NULL);
			this.state = 2256;
			this.match(HiveParser.KW_DEFINED);
			this.state = 2257;
			this.match(HiveParser.KW_AS);
			this.state = 2258;
			localctx._nullIdnt = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableFileFormat(): TableFileFormatContext {
		let localctx: TableFileFormatContext = new TableFileFormatContext(this, this._ctx, this.state);
		this.enterRule(localctx, 262, HiveParser.RULE_tableFileFormat);
		let _la: number;
		try {
			this.state = 2301;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 188, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2260;
				this.match(HiveParser.KW_STORED);
				this.state = 2261;
				this.match(HiveParser.KW_AS);
				this.state = 2262;
				this.match(HiveParser.KW_INPUTFORMAT);
				this.state = 2263;
				localctx._inFmt = this.match(HiveParser.StringLiteral);
				this.state = 2264;
				this.match(HiveParser.KW_OUTPUTFORMAT);
				this.state = 2265;
				localctx._outFmt = this.match(HiveParser.StringLiteral);
				this.state = 2270;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===153) {
					{
					this.state = 2266;
					this.match(HiveParser.KW_INPUTDRIVER);
					this.state = 2267;
					localctx._inDriver = this.match(HiveParser.StringLiteral);
					this.state = 2268;
					this.match(HiveParser.KW_OUTPUTDRIVER);
					this.state = 2269;
					localctx._outDriver = this.match(HiveParser.StringLiteral);
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2272;
				this.match(HiveParser.KW_STORED);
				this.state = 2273;
				this.match(HiveParser.KW_BY);
				this.state = 2274;
				localctx._storageHandler = this.match(HiveParser.StringLiteral);
				this.state = 2278;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===375) {
					{
					this.state = 2275;
					this.match(HiveParser.KW_WITH);
					this.state = 2276;
					this.match(HiveParser.KW_SERDEPROPERTIES);
					this.state = 2277;
					localctx._serdeprops = this.tableProperties();
					}
				}

				this.state = 2283;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===310) {
					{
					this.state = 2280;
					this.match(HiveParser.KW_STORED);
					this.state = 2281;
					this.match(HiveParser.KW_AS);
					this.state = 2282;
					localctx._fileformat = this.id_();
					}
				}

				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2285;
				this.match(HiveParser.KW_STORED);
				this.state = 2286;
				this.match(HiveParser.KW_BY);
				this.state = 2287;
				localctx._genericSpec = this.id_();
				this.state = 2291;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===375) {
					{
					this.state = 2288;
					this.match(HiveParser.KW_WITH);
					this.state = 2289;
					this.match(HiveParser.KW_SERDEPROPERTIES);
					this.state = 2290;
					localctx._serdeprops = this.tableProperties();
					}
				}

				this.state = 2296;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===310) {
					{
					this.state = 2293;
					this.match(HiveParser.KW_STORED);
					this.state = 2294;
					this.match(HiveParser.KW_AS);
					this.state = 2295;
					localctx._fileformat = this.id_();
					}
				}

				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2298;
				this.match(HiveParser.KW_STORED);
				this.state = 2299;
				this.match(HiveParser.KW_AS);
				this.state = 2300;
				localctx._genericSpec = this.id_();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableLocation(): TableLocationContext {
		let localctx: TableLocationContext = new TableLocationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 264, HiveParser.RULE_tableLocation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2303;
			this.match(HiveParser.KW_LOCATION);
			this.state = 2304;
			localctx._locn = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameTypeList(): ColumnNameTypeListContext {
		let localctx: ColumnNameTypeListContext = new ColumnNameTypeListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 266, HiveParser.RULE_columnNameTypeList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2306;
			this.columnNameType();
			this.state = 2311;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2307;
				this.match(HiveParser.COMMA);
				this.state = 2308;
				this.columnNameType();
				}
				}
				this.state = 2313;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameTypeOrConstraintList(): ColumnNameTypeOrConstraintListContext {
		let localctx: ColumnNameTypeOrConstraintListContext = new ColumnNameTypeOrConstraintListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 268, HiveParser.RULE_columnNameTypeOrConstraintList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2314;
			this.columnNameTypeOrConstraint();
			this.state = 2319;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2315;
				this.match(HiveParser.COMMA);
				this.state = 2316;
				this.columnNameTypeOrConstraint();
				}
				}
				this.state = 2321;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameColonTypeList(): ColumnNameColonTypeListContext {
		let localctx: ColumnNameColonTypeListContext = new ColumnNameColonTypeListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 270, HiveParser.RULE_columnNameColonTypeList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2322;
			this.columnNameColonType();
			this.state = 2327;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2323;
				this.match(HiveParser.COMMA);
				this.state = 2324;
				this.columnNameColonType();
				}
				}
				this.state = 2329;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameList(): ColumnNameListContext {
		let localctx: ColumnNameListContext = new ColumnNameListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 272, HiveParser.RULE_columnNameList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2330;
			this.columnName();
			this.state = 2335;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2331;
				this.match(HiveParser.COMMA);
				this.state = 2332;
				this.columnName();
				}
				}
				this.state = 2337;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnName(): ColumnNameContext {
		let localctx: ColumnNameContext = new ColumnNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 274, HiveParser.RULE_columnName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2338;
			this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public extColumnName(): ExtColumnNameContext {
		let localctx: ExtColumnNameContext = new ExtColumnNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 276, HiveParser.RULE_extColumnName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2340;
			this.id_();
			this.state = 2350;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===382) {
				{
				{
				this.state = 2341;
				this.match(HiveParser.DOT);
				this.state = 2346;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 193, this._ctx) ) {
				case 1:
					{
					this.state = 2342;
					this.match(HiveParser.KW_ELEM_TYPE);
					}
					break;
				case 2:
					{
					this.state = 2343;
					this.match(HiveParser.KW_KEY_TYPE);
					}
					break;
				case 3:
					{
					this.state = 2344;
					this.match(HiveParser.KW_VALUE_TYPE);
					}
					break;
				case 4:
					{
					this.state = 2345;
					this.id_();
					}
					break;
				}
				}
				}
				this.state = 2352;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameOrderList(): ColumnNameOrderListContext {
		let localctx: ColumnNameOrderListContext = new ColumnNameOrderListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 278, HiveParser.RULE_columnNameOrderList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2353;
			this.columnNameOrder();
			this.state = 2358;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2354;
				this.match(HiveParser.COMMA);
				this.state = 2355;
				this.columnNameOrder();
				}
				}
				this.state = 2360;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnParenthesesList(): ColumnParenthesesListContext {
		let localctx: ColumnParenthesesListContext = new ColumnParenthesesListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 280, HiveParser.RULE_columnParenthesesList);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2361;
			this.match(HiveParser.LPAREN);
			this.state = 2362;
			this.columnNameList();
			this.state = 2363;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public enableValidateSpecification(): EnableValidateSpecificationContext {
		let localctx: EnableValidateSpecificationContext = new EnableValidateSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 282, HiveParser.RULE_enableValidateSpecification);
		let _la: number;
		try {
			this.state = 2370;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 91:
			case 102:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2365;
				this.enableSpecification();
				this.state = 2367;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===207 || _la===362) {
					{
					this.state = 2366;
					this.validateSpecification();
					}
				}

				}
				break;
			case 104:
			case 206:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2369;
				this.enforcedSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public enableSpecification(): EnableSpecificationContext {
		let localctx: EnableSpecificationContext = new EnableSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 284, HiveParser.RULE_enableSpecification);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2372;
			_la = this._input.LA(1);
			if(!(_la===91 || _la===102)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public validateSpecification(): ValidateSpecificationContext {
		let localctx: ValidateSpecificationContext = new ValidateSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 286, HiveParser.RULE_validateSpecification);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2374;
			_la = this._input.LA(1);
			if(!(_la===207 || _la===362)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public enforcedSpecification(): EnforcedSpecificationContext {
		let localctx: EnforcedSpecificationContext = new EnforcedSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 288, HiveParser.RULE_enforcedSpecification);
		try {
			this.state = 2379;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 104:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2376;
				this.match(HiveParser.KW_ENFORCED);
				}
				break;
			case 206:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2377;
				this.match(HiveParser.KW_NOT);
				this.state = 2378;
				this.match(HiveParser.KW_ENFORCED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public relySpecification(): RelySpecificationContext {
		let localctx: RelySpecificationContext = new RelySpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 290, HiveParser.RULE_relySpecification);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2381;
			_la = this._input.LA(1);
			if(!(_la===204 || _la===262)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createConstraint(): CreateConstraintContext {
		let localctx: CreateConstraintContext = new CreateConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 292, HiveParser.RULE_createConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2385;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===55) {
				{
				this.state = 2383;
				this.match(HiveParser.KW_CONSTRAINT);
				this.state = 2384;
				localctx._constraintName = this.id_();
				}
			}

			this.state = 2387;
			this.tableLevelConstraint();
			this.state = 2389;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la===206) {
				{
				this.state = 2388;
				this.constraintOptsCreate();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterConstraintWithName(): AlterConstraintWithNameContext {
		let localctx: AlterConstraintWithNameContext = new AlterConstraintWithNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 294, HiveParser.RULE_alterConstraintWithName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2391;
			this.match(HiveParser.KW_CONSTRAINT);
			this.state = 2392;
			localctx._constraintName = this.id_();
			this.state = 2393;
			this.tableLevelConstraint();
			this.state = 2395;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la===206) {
				{
				this.state = 2394;
				this.constraintOptsAlter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableLevelConstraint(): TableLevelConstraintContext {
		let localctx: TableLevelConstraintContext = new TableLevelConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 296, HiveParser.RULE_tableLevelConstraint);
		try {
			this.state = 2399;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 241:
			case 347:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2397;
				this.pkUkConstraint();
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2398;
				this.checkConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public pkUkConstraint(): PkUkConstraintContext {
		let localctx: PkUkConstraintContext = new PkUkConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 298, HiveParser.RULE_pkUkConstraint);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2401;
			this.tableConstraintType();
			this.state = 2402;
			localctx._pkCols = this.columnParenthesesList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public checkConstraint(): CheckConstraintContext {
		let localctx: CheckConstraintContext = new CheckConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 300, HiveParser.RULE_checkConstraint);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2404;
			this.match(HiveParser.KW_CHECK);
			this.state = 2405;
			this.match(HiveParser.LPAREN);
			this.state = 2406;
			this.expression();
			this.state = 2407;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createForeignKey(): CreateForeignKeyContext {
		let localctx: CreateForeignKeyContext = new CreateForeignKeyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 302, HiveParser.RULE_createForeignKey);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2411;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===55) {
				{
				this.state = 2409;
				this.match(HiveParser.KW_CONSTRAINT);
				this.state = 2410;
				localctx._constraintName = this.id_();
				}
			}

			this.state = 2413;
			this.match(HiveParser.KW_FOREIGN);
			this.state = 2414;
			this.match(HiveParser.KW_KEY);
			this.state = 2415;
			localctx._fkCols = this.columnParenthesesList();
			this.state = 2416;
			this.match(HiveParser.KW_REFERENCES);
			this.state = 2417;
			localctx._tabName = this.tableName();
			this.state = 2418;
			localctx._parCols = this.columnParenthesesList();
			this.state = 2420;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la===206) {
				{
				this.state = 2419;
				this.constraintOptsCreate();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterForeignKeyWithName(): AlterForeignKeyWithNameContext {
		let localctx: AlterForeignKeyWithNameContext = new AlterForeignKeyWithNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 304, HiveParser.RULE_alterForeignKeyWithName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2422;
			this.match(HiveParser.KW_CONSTRAINT);
			this.state = 2423;
			localctx._constraintName = this.id_();
			this.state = 2424;
			this.match(HiveParser.KW_FOREIGN);
			this.state = 2425;
			this.match(HiveParser.KW_KEY);
			this.state = 2426;
			localctx._fkCols = this.columnParenthesesList();
			this.state = 2427;
			this.match(HiveParser.KW_REFERENCES);
			this.state = 2428;
			localctx._tabName = this.tableName();
			this.state = 2429;
			localctx._parCols = this.columnParenthesesList();
			this.state = 2431;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la===206) {
				{
				this.state = 2430;
				this.constraintOptsAlter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public skewedValueElement(): SkewedValueElementContext {
		let localctx: SkewedValueElementContext = new SkewedValueElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 306, HiveParser.RULE_skewedValueElement);
		try {
			this.state = 2435;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 63:
			case 64:
			case 71:
			case 120:
			case 209:
			case 326:
			case 327:
			case 339:
			case 410:
			case 412:
			case 414:
			case 415:
			case 417:
			case 419:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2433;
				this.skewedColumnValues();
				}
				break;
			case 386:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2434;
				this.skewedColumnValuePairList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public skewedColumnValuePairList(): SkewedColumnValuePairListContext {
		let localctx: SkewedColumnValuePairListContext = new SkewedColumnValuePairListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 308, HiveParser.RULE_skewedColumnValuePairList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2437;
			this.skewedColumnValuePair();
			this.state = 2442;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2438;
				this.match(HiveParser.COMMA);
				this.state = 2439;
				this.skewedColumnValuePair();
				}
				}
				this.state = 2444;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public skewedColumnValuePair(): SkewedColumnValuePairContext {
		let localctx: SkewedColumnValuePairContext = new SkewedColumnValuePairContext(this, this._ctx, this.state);
		this.enterRule(localctx, 310, HiveParser.RULE_skewedColumnValuePair);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2445;
			this.match(HiveParser.LPAREN);
			this.state = 2446;
			localctx._colValues = this.skewedColumnValues();
			this.state = 2447;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public skewedColumnValues(): SkewedColumnValuesContext {
		let localctx: SkewedColumnValuesContext = new SkewedColumnValuesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 312, HiveParser.RULE_skewedColumnValues);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2449;
			this.skewedColumnValue();
			this.state = 2454;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2450;
				this.match(HiveParser.COMMA);
				this.state = 2451;
				this.skewedColumnValue();
				}
				}
				this.state = 2456;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public skewedColumnValue(): SkewedColumnValueContext {
		let localctx: SkewedColumnValueContext = new SkewedColumnValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 314, HiveParser.RULE_skewedColumnValue);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2457;
			this.constant();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public skewedValueLocationElement(): SkewedValueLocationElementContext {
		let localctx: SkewedValueLocationElementContext = new SkewedValueLocationElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 316, HiveParser.RULE_skewedValueLocationElement);
		try {
			this.state = 2461;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 63:
			case 64:
			case 71:
			case 120:
			case 209:
			case 326:
			case 327:
			case 339:
			case 410:
			case 412:
			case 414:
			case 415:
			case 417:
			case 419:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2459;
				this.skewedColumnValue();
				}
				break;
			case 386:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2460;
				this.skewedColumnValuePair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderSpecification(): OrderSpecificationContext {
		let localctx: OrderSpecificationContext = new OrderSpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 318, HiveParser.RULE_orderSpecification);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2463;
			_la = this._input.LA(1);
			if(!(_la===18 || _la===86)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nullOrdering(): NullOrderingContext {
		let localctx: NullOrderingContext = new NullOrderingContext(this, this._ctx, this.state);
		this.enterRule(localctx, 320, HiveParser.RULE_nullOrdering);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2465;
			this.match(HiveParser.KW_NULLS);
			this.state = 2466;
			_la = this._input.LA(1);
			if(!(_la===125 || _la===170)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameOrder(): ColumnNameOrderContext {
		let localctx: ColumnNameOrderContext = new ColumnNameOrderContext(this, this._ctx, this.state);
		this.enterRule(localctx, 322, HiveParser.RULE_columnNameOrder);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2468;
			this.id_();
			this.state = 2470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===18 || _la===86) {
				{
				this.state = 2469;
				localctx._orderSpec = this.orderSpecification();
				}
			}

			this.state = 2473;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===210) {
				{
				this.state = 2472;
				localctx._nullSpec = this.nullOrdering();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameCommentList(): ColumnNameCommentListContext {
		let localctx: ColumnNameCommentListContext = new ColumnNameCommentListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 324, HiveParser.RULE_columnNameCommentList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2475;
			this.columnNameComment();
			this.state = 2480;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2476;
				this.match(HiveParser.COMMA);
				this.state = 2477;
				this.columnNameComment();
				}
				}
				this.state = 2482;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameComment(): ColumnNameCommentContext {
		let localctx: ColumnNameCommentContext = new ColumnNameCommentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 326, HiveParser.RULE_columnNameComment);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2483;
			localctx._colName = this.id_();
			this.state = 2486;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===47) {
				{
				this.state = 2484;
				this.match(HiveParser.KW_COMMENT);
				this.state = 2485;
				localctx._comment = this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderSpecificationRewrite(): OrderSpecificationRewriteContext {
		let localctx: OrderSpecificationRewriteContext = new OrderSpecificationRewriteContext(this, this._ctx, this.state);
		this.enterRule(localctx, 328, HiveParser.RULE_orderSpecificationRewrite);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2488;
			_la = this._input.LA(1);
			if(!(_la===18 || _la===86)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnRefOrder(): ColumnRefOrderContext {
		let localctx: ColumnRefOrderContext = new ColumnRefOrderContext(this, this._ctx, this.state);
		this.enterRule(localctx, 330, HiveParser.RULE_columnRefOrder);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2490;
			this.expression();
			this.state = 2492;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===18 || _la===86) {
				{
				this.state = 2491;
				localctx._orderSpec = this.orderSpecificationRewrite();
				}
			}

			this.state = 2495;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===210) {
				{
				this.state = 2494;
				localctx._nullSpec = this.nullOrdering();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameType(): ColumnNameTypeContext {
		let localctx: ColumnNameTypeContext = new ColumnNameTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 332, HiveParser.RULE_columnNameType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2497;
			localctx._colName = this.id_();
			this.state = 2498;
			this.colType();
			this.state = 2501;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===47) {
				{
				this.state = 2499;
				this.match(HiveParser.KW_COMMENT);
				this.state = 2500;
				localctx._comment = this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameTypeOrConstraint(): ColumnNameTypeOrConstraintContext {
		let localctx: ColumnNameTypeOrConstraintContext = new ColumnNameTypeOrConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 334, HiveParser.RULE_columnNameTypeOrConstraint);
		try {
			this.state = 2505;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 217, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2503;
				this.tableConstraint();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2504;
				this.columnNameTypeConstraint();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableConstraint(): TableConstraintContext {
		let localctx: TableConstraintContext = new TableConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 336, HiveParser.RULE_tableConstraint);
		try {
			this.state = 2509;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 218, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2507;
				this.createForeignKey();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2508;
				this.createConstraint();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameTypeConstraint(): ColumnNameTypeConstraintContext {
		let localctx: ColumnNameTypeConstraintContext = new ColumnNameTypeConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 338, HiveParser.RULE_columnNameTypeConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2511;
			localctx._colName = this.id_();
			this.state = 2512;
			this.colType();
			this.state = 2514;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===40 || _la===55 || _la===80 || _la===206 || _la===241 || _la===259 || _la===347) {
				{
				this.state = 2513;
				this.columnConstraint();
				}
			}

			this.state = 2518;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===47) {
				{
				this.state = 2516;
				this.match(HiveParser.KW_COMMENT);
				this.state = 2517;
				localctx._comment = this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnConstraint(): ColumnConstraintContext {
		let localctx: ColumnConstraintContext = new ColumnConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 340, HiveParser.RULE_columnConstraint);
		try {
			this.state = 2522;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 221, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2520;
				this.foreignKeyConstraint();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2521;
				this.colConstraint();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public foreignKeyConstraint(): ForeignKeyConstraintContext {
		let localctx: ForeignKeyConstraintContext = new ForeignKeyConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 342, HiveParser.RULE_foreignKeyConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2526;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===55) {
				{
				this.state = 2524;
				this.match(HiveParser.KW_CONSTRAINT);
				this.state = 2525;
				localctx._constraintName = this.id_();
				}
			}

			this.state = 2528;
			this.match(HiveParser.KW_REFERENCES);
			this.state = 2529;
			localctx._tabName = this.tableName();
			this.state = 2530;
			this.match(HiveParser.LPAREN);
			this.state = 2531;
			localctx._colName = this.columnName();
			this.state = 2532;
			this.match(HiveParser.RPAREN);
			this.state = 2534;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la===206) {
				{
				this.state = 2533;
				this.constraintOptsCreate();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public colConstraint(): ColConstraintContext {
		let localctx: ColConstraintContext = new ColConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 344, HiveParser.RULE_colConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2538;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===55) {
				{
				this.state = 2536;
				this.match(HiveParser.KW_CONSTRAINT);
				this.state = 2537;
				localctx._constraintName = this.id_();
				}
			}

			this.state = 2540;
			this.columnConstraintType();
			this.state = 2542;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la===206) {
				{
				this.state = 2541;
				this.constraintOptsCreate();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterColumnConstraint(): AlterColumnConstraintContext {
		let localctx: AlterColumnConstraintContext = new AlterColumnConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 346, HiveParser.RULE_alterColumnConstraint);
		try {
			this.state = 2546;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 226, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2544;
				this.alterForeignKeyConstraint();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2545;
				this.alterColConstraint();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterForeignKeyConstraint(): AlterForeignKeyConstraintContext {
		let localctx: AlterForeignKeyConstraintContext = new AlterForeignKeyConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 348, HiveParser.RULE_alterForeignKeyConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2550;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===55) {
				{
				this.state = 2548;
				this.match(HiveParser.KW_CONSTRAINT);
				this.state = 2549;
				localctx._constraintName = this.id_();
				}
			}

			this.state = 2552;
			this.match(HiveParser.KW_REFERENCES);
			this.state = 2553;
			localctx._tabName = this.tableName();
			this.state = 2554;
			this.match(HiveParser.LPAREN);
			this.state = 2555;
			localctx._colName = this.columnName();
			this.state = 2556;
			this.match(HiveParser.RPAREN);
			this.state = 2558;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la===206) {
				{
				this.state = 2557;
				this.constraintOptsAlter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterColConstraint(): AlterColConstraintContext {
		let localctx: AlterColConstraintContext = new AlterColConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 350, HiveParser.RULE_alterColConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===55) {
				{
				this.state = 2560;
				this.match(HiveParser.KW_CONSTRAINT);
				this.state = 2561;
				localctx._constraintName = this.id_();
				}
			}

			this.state = 2564;
			this.columnConstraintType();
			this.state = 2566;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 10241) !== 0) || _la===206) {
				{
				this.state = 2565;
				this.constraintOptsAlter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnConstraintType(): ColumnConstraintTypeContext {
		let localctx: ColumnConstraintTypeContext = new ColumnConstraintTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 352, HiveParser.RULE_columnConstraintType);
		try {
			this.state = 2574;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 206:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2568;
				this.match(HiveParser.KW_NOT);
				this.state = 2569;
				this.match(HiveParser.KW_NULL);
				}
				break;
			case 80:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2570;
				this.match(HiveParser.KW_DEFAULT);
				this.state = 2571;
				this.defaultVal();
				}
				break;
			case 40:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2572;
				this.checkConstraint();
				}
				break;
			case 241:
			case 347:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2573;
				this.tableConstraintType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public defaultVal(): DefaultValContext {
		let localctx: DefaultValContext = new DefaultValContext(this, this._ctx, this.state);
		this.enterRule(localctx, 354, HiveParser.RULE_defaultVal);
		try {
			this.state = 2579;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 232, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2576;
				this.constant();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2577;
				this.function_();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2578;
				this.castExpression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableConstraintType(): TableConstraintTypeContext {
		let localctx: TableConstraintTypeContext = new TableConstraintTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 356, HiveParser.RULE_tableConstraintType);
		try {
			this.state = 2584;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 241:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2581;
				this.match(HiveParser.KW_PRIMARY);
				this.state = 2582;
				this.match(HiveParser.KW_KEY);
				}
				break;
			case 347:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2583;
				this.match(HiveParser.KW_UNIQUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public constraintOptsCreate(): ConstraintOptsCreateContext {
		let localctx: ConstraintOptsCreateContext = new ConstraintOptsCreateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 358, HiveParser.RULE_constraintOptsCreate);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2586;
			this.enableValidateSpecification();
			this.state = 2588;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===204 || _la===262) {
				{
				this.state = 2587;
				this.relySpecification();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public constraintOptsAlter(): ConstraintOptsAlterContext {
		let localctx: ConstraintOptsAlterContext = new ConstraintOptsAlterContext(this, this._ctx, this.state);
		this.enterRule(localctx, 360, HiveParser.RULE_constraintOptsAlter);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2590;
			this.enableValidateSpecification();
			this.state = 2592;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===204 || _la===262) {
				{
				this.state = 2591;
				this.relySpecification();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnNameColonType(): ColumnNameColonTypeContext {
		let localctx: ColumnNameColonTypeContext = new ColumnNameColonTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 362, HiveParser.RULE_columnNameColonType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2594;
			localctx._colName = this.id_();
			this.state = 2595;
			this.match(HiveParser.COLON);
			this.state = 2596;
			this.colType();
			this.state = 2599;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===47) {
				{
				this.state = 2597;
				this.match(HiveParser.KW_COMMENT);
				this.state = 2598;
				localctx._comment = this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public colType(): ColTypeContext {
		let localctx: ColTypeContext = new ColTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 364, HiveParser.RULE_colType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2601;
			this.type_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public colTypeList(): ColTypeListContext {
		let localctx: ColTypeListContext = new ColTypeListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 366, HiveParser.RULE_colTypeList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2603;
			this.colType();
			this.state = 2608;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2604;
				this.match(HiveParser.COMMA);
				this.state = 2605;
				this.colType();
				}
				}
				this.state = 2610;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public type_(): TypeContext {
		let localctx: TypeContext = new TypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 368, HiveParser.RULE_type);
		try {
			this.state = 2616;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 26:
			case 27:
			case 28:
			case 39:
			case 71:
			case 72:
			case 79:
			case 96:
			case 126:
			case 156:
			case 254:
			case 300:
			case 312:
			case 326:
			case 327:
			case 329:
			case 365:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2611;
				this.primitiveType();
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2612;
				this.listType();
				}
				break;
			case 313:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2613;
				this.structType();
				}
				break;
			case 190:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2614;
				this.mapType();
				}
				break;
			case 346:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2615;
				this.unionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public primitiveType(): PrimitiveTypeContext {
		let localctx: PrimitiveTypeContext = new PrimitiveTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 370, HiveParser.RULE_primitiveType);
		let _la: number;
		try {
			this.state = 2654;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 242, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2618;
				this.match(HiveParser.KW_TINYINT);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2619;
				this.match(HiveParser.KW_SMALLINT);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2620;
				this.match(HiveParser.KW_INT);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2621;
				this.match(HiveParser.KW_BIGINT);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 2622;
				this.match(HiveParser.KW_BOOLEAN);
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 2623;
				this.match(HiveParser.KW_FLOAT);
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 2624;
				this.match(HiveParser.KW_REAL);
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 2625;
				this.match(HiveParser.KW_DOUBLE);
				this.state = 2627;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===238) {
					{
					this.state = 2626;
					this.match(HiveParser.KW_PRECISION);
					}
				}

				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 2629;
				this.match(HiveParser.KW_DATE);
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 2630;
				this.match(HiveParser.KW_DATETIME);
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 2631;
				this.match(HiveParser.KW_TIMESTAMP);
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 2632;
				this.match(HiveParser.KW_TIMESTAMPLOCALTZ);
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 2633;
				this.match(HiveParser.KW_TIMESTAMP);
				this.state = 2634;
				this.match(HiveParser.KW_WITH);
				this.state = 2635;
				this.match(HiveParser.KW_LOCAL);
				this.state = 2636;
				this.match(HiveParser.KW_TIME);
				this.state = 2637;
				this.match(HiveParser.KW_ZONE);
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 2638;
				this.match(HiveParser.KW_STRING);
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 2639;
				this.match(HiveParser.KW_BINARY);
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 2640;
				this.match(HiveParser.KW_DECIMAL);
				this.state = 2648;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===386) {
					{
					this.state = 2641;
					this.match(HiveParser.LPAREN);
					this.state = 2642;
					localctx._prec = this.match(HiveParser.Number);
					this.state = 2645;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===384) {
						{
						this.state = 2643;
						this.match(HiveParser.COMMA);
						this.state = 2644;
						localctx._scale = this.match(HiveParser.Number);
						}
					}

					this.state = 2647;
					this.match(HiveParser.RPAREN);
					}
				}

				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 2650;
				_la = this._input.LA(1);
				if(!(_la===39 || _la===365)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 2651;
				this.match(HiveParser.LPAREN);
				this.state = 2652;
				localctx._length = this.match(HiveParser.Number);
				this.state = 2653;
				this.match(HiveParser.RPAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public listType(): ListTypeContext {
		let localctx: ListTypeContext = new ListTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 372, HiveParser.RULE_listType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2656;
			this.match(HiveParser.KW_ARRAY);
			this.state = 2657;
			this.match(HiveParser.LESSTHAN);
			this.state = 2658;
			this.type_();
			this.state = 2659;
			this.match(HiveParser.GREATERTHAN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public structType(): StructTypeContext {
		let localctx: StructTypeContext = new StructTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 374, HiveParser.RULE_structType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2661;
			this.match(HiveParser.KW_STRUCT);
			this.state = 2662;
			this.match(HiveParser.LESSTHAN);
			this.state = 2663;
			this.columnNameColonTypeList();
			this.state = 2664;
			this.match(HiveParser.GREATERTHAN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public mapType(): MapTypeContext {
		let localctx: MapTypeContext = new MapTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 376, HiveParser.RULE_mapType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2666;
			this.match(HiveParser.KW_MAP);
			this.state = 2667;
			this.match(HiveParser.LESSTHAN);
			this.state = 2668;
			localctx._left = this.primitiveType();
			this.state = 2669;
			this.match(HiveParser.COMMA);
			this.state = 2670;
			localctx._right = this.type_();
			this.state = 2671;
			this.match(HiveParser.GREATERTHAN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unionType(): UnionTypeContext {
		let localctx: UnionTypeContext = new UnionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 378, HiveParser.RULE_unionType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2673;
			this.match(HiveParser.KW_UNIONTYPE);
			this.state = 2674;
			this.match(HiveParser.LESSTHAN);
			this.state = 2675;
			this.colTypeList();
			this.state = 2676;
			this.match(HiveParser.GREATERTHAN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setOperator(): SetOperatorContext {
		let localctx: SetOperatorContext = new SetOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 380, HiveParser.RULE_setOperator);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2678;
			_la = this._input.LA(1);
			if(!(_la===107 || _la===157 || _la===197 || _la===345)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 2680;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===7 || _la===92) {
				{
				this.state = 2679;
				_la = this._input.LA(1);
				if(!(_la===7 || _la===92)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public queryStatementExpression(): QueryStatementExpressionContext {
		let localctx: QueryStatementExpressionContext = new QueryStatementExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 382, HiveParser.RULE_queryStatementExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2683;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 2682;
				localctx._w = this.withClause();
				}
			}

			this.state = 2685;
			this.queryStatementExpressionBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public queryStatementExpressionBody(): QueryStatementExpressionBodyContext {
		let localctx: QueryStatementExpressionBodyContext = new QueryStatementExpressionBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 384, HiveParser.RULE_queryStatementExpressionBody);
		try {
			this.state = 2689;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 134:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2687;
				this.fromStatement();
				}
				break;
			case 155:
			case 190:
			case 258:
			case 288:
			case 363:
			case 386:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2688;
				this.regularBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public withClause(): WithClauseContext {
		let localctx: WithClauseContext = new WithClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 386, HiveParser.RULE_withClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2691;
			this.match(HiveParser.KW_WITH);
			this.state = 2692;
			this.cteStatement();
			this.state = 2697;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2693;
				this.match(HiveParser.COMMA);
				this.state = 2694;
				this.cteStatement();
				}
				}
				this.state = 2699;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public cteStatement(): CteStatementContext {
		let localctx: CteStatementContext = new CteStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 388, HiveParser.RULE_cteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2700;
			this.id_();
			this.state = 2705;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===386) {
				{
				this.state = 2701;
				this.match(HiveParser.LPAREN);
				this.state = 2702;
				localctx._colAliases = this.columnNameList();
				this.state = 2703;
				this.match(HiveParser.RPAREN);
				}
			}

			this.state = 2707;
			this.match(HiveParser.KW_AS);
			this.state = 2708;
			this.match(HiveParser.LPAREN);
			this.state = 2709;
			this.queryStatementExpression();
			this.state = 2710;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fromStatement(): FromStatementContext {
		let localctx: FromStatementContext = new FromStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 390, HiveParser.RULE_fromStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2712;
			this.singleFromStatement();
			this.state = 2718;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===107 || _la===157 || _la===197 || _la===345) {
				{
				{
				this.state = 2713;
				localctx._u = this.setOperator();
				this.state = 2714;
				localctx._r = this.singleFromStatement();
				}
				}
				this.state = 2720;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public singleFromStatement(): SingleFromStatementContext {
		let localctx: SingleFromStatementContext = new SingleFromStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 392, HiveParser.RULE_singleFromStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2721;
			this.fromClause();
			this.state = 2723;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2722;
				localctx._body = this.body();
				localctx._b.push(localctx._body);
				}
				}
				this.state = 2725;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===155 || _la===190 || _la===258 || _la===288);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public regularBody(): RegularBodyContext {
		let localctx: RegularBodyContext = new RegularBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 394, HiveParser.RULE_regularBody);
		try {
			this.state = 2731;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 155:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2727;
				localctx._i = this.insertClause();
				this.state = 2728;
				localctx._s = this.selectStatement();
				}
				break;
			case 190:
			case 258:
			case 288:
			case 363:
			case 386:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2730;
				this.selectStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public atomSelectStatement(): AtomSelectStatementContext {
		let localctx: AtomSelectStatementContext = new AtomSelectStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 396, HiveParser.RULE_atomSelectStatement);
		let _la: number;
		try {
			this.state = 2757;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 190:
			case 258:
			case 288:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2733;
				localctx._s = this.selectClause();
				this.state = 2735;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===134) {
					{
					this.state = 2734;
					localctx._f = this.fromClause();
					}
				}

				this.state = 2738;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===372) {
					{
					this.state = 2737;
					localctx._w = this.whereClause();
					}
				}

				this.state = 2741;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===139) {
					{
					this.state = 2740;
					localctx._g = this.groupByClause();
					}
				}

				this.state = 2744;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===141) {
					{
					this.state = 2743;
					localctx._h = this.havingClause();
					}
				}

				this.state = 2747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===374) {
					{
					this.state = 2746;
					localctx._win = this.window_clause();
					}
				}

				this.state = 2750;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===246) {
					{
					this.state = 2749;
					localctx._q = this.qualifyClause();
					}
				}

				}
				break;
			case 386:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2752;
				this.match(HiveParser.LPAREN);
				this.state = 2753;
				this.selectStatement();
				this.state = 2754;
				this.match(HiveParser.RPAREN);
				}
				break;
			case 363:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2756;
				this.valuesSource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectStatement(): SelectStatementContext {
		let localctx: SelectStatementContext = new SelectStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 398, HiveParser.RULE_selectStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2759;
			localctx._a = this.atomSelectStatement();
			this.state = 2761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===107 || _la===157 || _la===197 || _la===345) {
				{
				this.state = 2760;
				localctx._set_ = this.setOpSelectStatement();
				}
			}

			this.state = 2764;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===219) {
				{
				this.state = 2763;
				localctx._o = this.orderByClause();
				}
			}

			this.state = 2767;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===41) {
				{
				this.state = 2766;
				localctx._c = this.clusterByClause();
				}
			}

			this.state = 2770;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===93) {
				{
				this.state = 2769;
				localctx._d = this.distributeByClause();
				}
			}

			this.state = 2773;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===303) {
				{
				this.state = 2772;
				localctx._sort = this.sortByClause();
				}
			}

			this.state = 2776;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===177) {
				{
				this.state = 2775;
				localctx._l = this.limitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setOpSelectStatement(): SetOpSelectStatementContext {
		let localctx: SetOpSelectStatementContext = new SetOpSelectStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 400, HiveParser.RULE_setOpSelectStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2781;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2778;
				localctx._u = this.setOperator();
				this.state = 2779;
				localctx._b = this.atomSelectStatement();
				}
				}
				this.state = 2783;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===107 || _la===157 || _la===197 || _la===345);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectStatementWithCTE(): SelectStatementWithCTEContext {
		let localctx: SelectStatementWithCTEContext = new SelectStatementWithCTEContext(this, this._ctx, this.state);
		this.enterRule(localctx, 402, HiveParser.RULE_selectStatementWithCTE);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2786;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 2785;
				localctx._w = this.withClause();
				}
			}

			this.state = 2788;
			this.selectStatement();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public body(): BodyContext {
		let localctx: BodyContext = new BodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 404, HiveParser.RULE_body);
		let _la: number;
		try {
			this.state = 2859;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 155:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2790;
				this.insertClause();
				this.state = 2791;
				this.selectClause();
				this.state = 2793;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===171 || _la===384) {
					{
					this.state = 2792;
					this.lateralView();
					}
				}

				this.state = 2796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===372) {
					{
					this.state = 2795;
					this.whereClause();
					}
				}

				this.state = 2799;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===139) {
					{
					this.state = 2798;
					this.groupByClause();
					}
				}

				this.state = 2802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===141) {
					{
					this.state = 2801;
					this.havingClause();
					}
				}

				this.state = 2805;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===374) {
					{
					this.state = 2804;
					this.window_clause();
					}
				}

				this.state = 2808;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===246) {
					{
					this.state = 2807;
					this.qualifyClause();
					}
				}

				this.state = 2811;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===219) {
					{
					this.state = 2810;
					this.orderByClause();
					}
				}

				this.state = 2814;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===41) {
					{
					this.state = 2813;
					this.clusterByClause();
					}
				}

				this.state = 2817;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===93) {
					{
					this.state = 2816;
					this.distributeByClause();
					}
				}

				this.state = 2820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===303) {
					{
					this.state = 2819;
					this.sortByClause();
					}
				}

				this.state = 2823;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===177) {
					{
					this.state = 2822;
					this.limitClause();
					}
				}

				}
				break;
			case 190:
			case 258:
			case 288:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2825;
				this.selectClause();
				this.state = 2827;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===171 || _la===384) {
					{
					this.state = 2826;
					this.lateralView();
					}
				}

				this.state = 2830;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===372) {
					{
					this.state = 2829;
					this.whereClause();
					}
				}

				this.state = 2833;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===139) {
					{
					this.state = 2832;
					this.groupByClause();
					}
				}

				this.state = 2836;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===141) {
					{
					this.state = 2835;
					this.havingClause();
					}
				}

				this.state = 2839;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===374) {
					{
					this.state = 2838;
					this.window_clause();
					}
				}

				this.state = 2842;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===246) {
					{
					this.state = 2841;
					this.qualifyClause();
					}
				}

				this.state = 2845;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===219) {
					{
					this.state = 2844;
					this.orderByClause();
					}
				}

				this.state = 2848;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===41) {
					{
					this.state = 2847;
					this.clusterByClause();
					}
				}

				this.state = 2851;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===93) {
					{
					this.state = 2850;
					this.distributeByClause();
					}
				}

				this.state = 2854;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===303) {
					{
					this.state = 2853;
					this.sortByClause();
					}
				}

				this.state = 2857;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===177) {
					{
					this.state = 2856;
					this.limitClause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public insertClause(): InsertClauseContext {
		let localctx: InsertClauseContext = new InsertClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 406, HiveParser.RULE_insertClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2861;
			this.match(HiveParser.KW_INSERT);
			this.state = 2878;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 225:
				{
				this.state = 2862;
				this.match(HiveParser.KW_OVERWRITE);
				this.state = 2863;
				this.destination();
				this.state = 2865;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===145) {
					{
					this.state = 2864;
					this.ifNotExists();
					}
				}

				}
				break;
			case 159:
				{
				this.state = 2867;
				this.match(HiveParser.KW_INTO);
				this.state = 2869;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===318) {
					{
					this.state = 2868;
					this.match(HiveParser.KW_TABLE);
					}
				}

				this.state = 2871;
				this.tableOrPartition();
				this.state = 2876;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 291, this._ctx) ) {
				case 1:
					{
					this.state = 2872;
					this.match(HiveParser.LPAREN);
					this.state = 2873;
					localctx._targetCols = this.columnNameList();
					this.state = 2874;
					this.match(HiveParser.RPAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public destination(): DestinationContext {
		let localctx: DestinationContext = new DestinationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 408, HiveParser.RULE_destination);
		let _la: number;
		try {
			this.state = 2893;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 90:
			case 180:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2881;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===180) {
					{
					this.state = 2880;
					localctx._local = this.match(HiveParser.KW_LOCAL);
					}
				}

				this.state = 2883;
				this.match(HiveParser.KW_DIRECTORY);
				this.state = 2884;
				this.match(HiveParser.StringLiteral);
				this.state = 2886;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===281) {
					{
					this.state = 2885;
					this.tableRowFormat();
					}
				}

				this.state = 2889;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===310) {
					{
					this.state = 2888;
					this.tableFileFormat();
					}
				}

				}
				break;
			case 318:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2891;
				this.match(HiveParser.KW_TABLE);
				this.state = 2892;
				this.tableOrPartition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public limitClause(): LimitClauseContext {
		let localctx: LimitClauseContext = new LimitClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 410, HiveParser.RULE_limitClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2895;
			this.match(HiveParser.KW_LIMIT);
			this.state = 2904;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 298, this._ctx) ) {
			case 1:
				{
				this.state = 2898;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 297, this._ctx) ) {
				case 1:
					{
					this.state = 2896;
					localctx._offset = this.match(HiveParser.Number);
					this.state = 2897;
					this.match(HiveParser.COMMA);
					}
					break;
				}
				this.state = 2900;
				localctx._num = this.match(HiveParser.Number);
				}
				break;
			case 2:
				{
				this.state = 2901;
				localctx._num = this.match(HiveParser.Number);
				this.state = 2902;
				this.match(HiveParser.KW_OFFSET);
				this.state = 2903;
				localctx._offset = this.match(HiveParser.Number);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public deleteStatement(): DeleteStatementContext {
		let localctx: DeleteStatementContext = new DeleteStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 412, HiveParser.RULE_deleteStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2906;
			this.match(HiveParser.KW_DELETE);
			this.state = 2907;
			this.match(HiveParser.KW_FROM);
			this.state = 2908;
			this.tableName();
			this.state = 2910;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===372) {
				{
				this.state = 2909;
				this.whereClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnAssignmentClause(): ColumnAssignmentClauseContext {
		let localctx: ColumnAssignmentClauseContext = new ColumnAssignmentClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 414, HiveParser.RULE_columnAssignmentClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2912;
			this.tableOrColumn();
			this.state = 2913;
			this.match(HiveParser.EQUAL);
			this.state = 2914;
			this.precedencePlusExpressionOrDefault();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedencePlusExpressionOrDefault(): PrecedencePlusExpressionOrDefaultContext {
		let localctx: PrecedencePlusExpressionOrDefaultContext = new PrecedencePlusExpressionOrDefaultContext(this, this._ctx, this.state);
		this.enterRule(localctx, 416, HiveParser.RULE_precedencePlusExpressionOrDefault);
		try {
			this.state = 2918;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 300, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2916;
				this.defaultValue();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2917;
				this.precedencePlusExpression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setColumnsClause(): SetColumnsClauseContext {
		let localctx: SetColumnsClauseContext = new SetColumnsClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 418, HiveParser.RULE_setColumnsClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2920;
			this.match(HiveParser.KW_SET);
			this.state = 2921;
			this.columnAssignmentClause();
			this.state = 2926;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 2922;
				this.match(HiveParser.COMMA);
				this.state = 2923;
				this.columnAssignmentClause();
				}
				}
				this.state = 2928;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public updateStatement(): UpdateStatementContext {
		let localctx: UpdateStatementContext = new UpdateStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 420, HiveParser.RULE_updateStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2929;
			this.match(HiveParser.KW_UPDATE);
			this.state = 2930;
			this.tableName();
			this.state = 2931;
			this.setColumnsClause();
			this.state = 2933;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===372) {
				{
				this.state = 2932;
				this.whereClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sqlTransactionStatement(): SqlTransactionStatementContext {
		let localctx: SqlTransactionStatementContext = new SqlTransactionStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 422, HiveParser.RULE_sqlTransactionStatement);
		try {
			this.state = 2939;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 307:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2935;
				this.startTransactionStatement();
				}
				break;
			case 48:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2936;
				this.commitStatement();
				}
				break;
			case 279:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 2937;
				this.rollbackStatement();
				}
				break;
			case 293:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 2938;
				this.setAutoCommitStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public startTransactionStatement(): StartTransactionStatementContext {
		let localctx: StartTransactionStatementContext = new StartTransactionStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 424, HiveParser.RULE_startTransactionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2941;
			this.match(HiveParser.KW_START);
			this.state = 2942;
			this.match(HiveParser.KW_TRANSACTION);
			this.state = 2951;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===161 || _la===251) {
				{
				this.state = 2943;
				this.transactionMode();
				this.state = 2948;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===384) {
					{
					{
					this.state = 2944;
					this.match(HiveParser.COMMA);
					this.state = 2945;
					this.transactionMode();
					}
					}
					this.state = 2950;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionMode(): TransactionModeContext {
		let localctx: TransactionModeContext = new TransactionModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 426, HiveParser.RULE_transactionMode);
		try {
			this.state = 2955;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 161:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 2953;
				this.isolationLevel();
				}
				break;
			case 251:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 2954;
				this.transactionAccessMode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public transactionAccessMode(): TransactionAccessModeContext {
		let localctx: TransactionAccessModeContext = new TransactionAccessModeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 428, HiveParser.RULE_transactionAccessMode);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2957;
			this.match(HiveParser.KW_READ);
			this.state = 2958;
			_la = this._input.LA(1);
			if(!(_la===215 || _la===379)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public isolationLevel(): IsolationLevelContext {
		let localctx: IsolationLevelContext = new IsolationLevelContext(this, this._ctx, this.state);
		this.enterRule(localctx, 430, HiveParser.RULE_isolationLevel);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2960;
			this.match(HiveParser.KW_ISOLATION);
			this.state = 2961;
			this.match(HiveParser.KW_LEVEL);
			this.state = 2962;
			this.levelOfIsolation();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public levelOfIsolation(): LevelOfIsolationContext {
		let localctx: LevelOfIsolationContext = new LevelOfIsolationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 432, HiveParser.RULE_levelOfIsolation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2964;
			this.match(HiveParser.KW_SNAPSHOT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public commitStatement(): CommitStatementContext {
		let localctx: CommitStatementContext = new CommitStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 434, HiveParser.RULE_commitStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2966;
			this.match(HiveParser.KW_COMMIT);
			this.state = 2968;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===377) {
				{
				this.state = 2967;
				this.match(HiveParser.KW_WORK);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rollbackStatement(): RollbackStatementContext {
		let localctx: RollbackStatementContext = new RollbackStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 436, HiveParser.RULE_rollbackStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2970;
			this.match(HiveParser.KW_ROLLBACK);
			this.state = 2972;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===377) {
				{
				this.state = 2971;
				this.match(HiveParser.KW_WORK);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public setAutoCommitStatement(): SetAutoCommitStatementContext {
		let localctx: SetAutoCommitStatementContext = new SetAutoCommitStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 438, HiveParser.RULE_setAutoCommitStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2974;
			this.match(HiveParser.KW_SET);
			this.state = 2975;
			this.match(HiveParser.KW_AUTOCOMMIT);
			this.state = 2976;
			this.booleanValueTok();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abortTransactionStatement(): AbortTransactionStatementContext {
		let localctx: AbortTransactionStatementContext = new AbortTransactionStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 440, HiveParser.RULE_abortTransactionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2978;
			this.match(HiveParser.KW_ABORT);
			this.state = 2979;
			this.match(HiveParser.KW_TRANSACTIONS);
			this.state = 2981;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2980;
				this.match(HiveParser.Number);
				}
				}
				this.state = 2983;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===417);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public abortCompactionStatement(): AbortCompactionStatementContext {
		let localctx: AbortCompactionStatementContext = new AbortCompactionStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 442, HiveParser.RULE_abortCompactionStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2985;
			this.match(HiveParser.KW_ABORT);
			this.state = 2986;
			this.match(HiveParser.KW_COMPACTIONS);
			this.state = 2988;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 2987;
				this.match(HiveParser.Number);
				}
				}
				this.state = 2990;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===417);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public mergeStatement(): MergeStatementContext {
		let localctx: MergeStatementContext = new MergeStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 444, HiveParser.RULE_mergeStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 2992;
			this.match(HiveParser.KW_MERGE);
			this.state = 2994;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===422) {
				{
				this.state = 2993;
				this.match(HiveParser.QUERY_HINT);
				}
			}

			this.state = 2996;
			this.match(HiveParser.KW_INTO);
			this.state = 2997;
			this.tableName();
			this.state = 3002;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252585854) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3765853219) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 3185538111) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 3675051739) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2389627001) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2078382079) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 987750079) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 1004889323) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4138967) !== 0) || _la===418) {
				{
				this.state = 2999;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===17) {
					{
					this.state = 2998;
					this.match(HiveParser.KW_AS);
					}
				}

				this.state = 3001;
				this.id_();
				}
			}

			this.state = 3004;
			this.match(HiveParser.KW_USING);
			this.state = 3005;
			this.joinSourcePart();
			this.state = 3006;
			this.match(HiveParser.KW_ON);
			this.state = 3007;
			this.expression();
			this.state = 3008;
			this.whenClauses();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whenClauses(): WhenClausesContext {
		let localctx: WhenClausesContext = new WhenClausesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 446, HiveParser.RULE_whenClauses);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3014;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 315, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 3012;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 314, this._ctx) ) {
					case 1:
						{
						this.state = 3010;
						this.whenMatchedAndClause();
						}
						break;
					case 2:
						{
						this.state = 3011;
						this.whenMatchedThenClause();
						}
						break;
					}
					}
				}
				this.state = 3016;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 315, this._ctx);
			}
			this.state = 3018;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===371) {
				{
				this.state = 3017;
				this.whenNotMatchedClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whenNotMatchedClause(): WhenNotMatchedClauseContext {
		let localctx: WhenNotMatchedClauseContext = new WhenNotMatchedClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 448, HiveParser.RULE_whenNotMatchedClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3020;
			this.match(HiveParser.KW_WHEN);
			this.state = 3021;
			this.match(HiveParser.KW_NOT);
			this.state = 3022;
			this.match(HiveParser.KW_MATCHED);
			this.state = 3025;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===11) {
				{
				this.state = 3023;
				this.match(HiveParser.KW_AND);
				this.state = 3024;
				this.expression();
				}
			}

			this.state = 3027;
			this.match(HiveParser.KW_THEN);
			this.state = 3028;
			this.match(HiveParser.KW_INSERT);
			this.state = 3030;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===386) {
				{
				this.state = 3029;
				localctx._targetCols = this.columnParenthesesList();
				}
			}

			this.state = 3032;
			this.match(HiveParser.KW_VALUES);
			this.state = 3033;
			this.valueRowConstructor();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whenMatchedAndClause(): WhenMatchedAndClauseContext {
		let localctx: WhenMatchedAndClauseContext = new WhenMatchedAndClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 450, HiveParser.RULE_whenMatchedAndClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3035;
			this.match(HiveParser.KW_WHEN);
			this.state = 3036;
			this.match(HiveParser.KW_MATCHED);
			this.state = 3037;
			this.match(HiveParser.KW_AND);
			this.state = 3038;
			this.expression();
			this.state = 3039;
			this.match(HiveParser.KW_THEN);
			this.state = 3040;
			this.updateOrDelete();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whenMatchedThenClause(): WhenMatchedThenClauseContext {
		let localctx: WhenMatchedThenClauseContext = new WhenMatchedThenClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 452, HiveParser.RULE_whenMatchedThenClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3042;
			this.match(HiveParser.KW_WHEN);
			this.state = 3043;
			this.match(HiveParser.KW_MATCHED);
			this.state = 3044;
			this.match(HiveParser.KW_THEN);
			this.state = 3045;
			this.updateOrDelete();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public updateOrDelete(): UpdateOrDeleteContext {
		let localctx: UpdateOrDeleteContext = new UpdateOrDeleteContext(this, this._ctx, this.state);
		this.enterRule(localctx, 454, HiveParser.RULE_updateOrDelete);
		try {
			this.state = 3050;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 354:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3047;
				this.match(HiveParser.KW_UPDATE);
				this.state = 3048;
				this.setColumnsClause();
				}
				break;
			case 83:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3049;
				this.match(HiveParser.KW_DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public killQueryStatement(): KillQueryStatementContext {
		let localctx: KillQueryStatementContext = new KillQueryStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 456, HiveParser.RULE_killQueryStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3052;
			this.match(HiveParser.KW_KILL);
			this.state = 3053;
			this.match(HiveParser.KW_QUERY);
			this.state = 3055;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3054;
				this.match(HiveParser.StringLiteral);
				}
				}
				this.state = 3057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===412);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compactionId(): CompactionIdContext {
		let localctx: CompactionIdContext = new CompactionIdContext(this, this._ctx, this.state);
		this.enterRule(localctx, 458, HiveParser.RULE_compactionId);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3059;
			this.match(HiveParser.KW_COMPACT_ID);
			this.state = 3060;
			this.match(HiveParser.EQUAL);
			this.state = 3061;
			localctx._compactId = this.match(HiveParser.Number);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compactionPool(): CompactionPoolContext {
		let localctx: CompactionPoolContext = new CompactionPoolContext(this, this._ctx, this.state);
		this.enterRule(localctx, 460, HiveParser.RULE_compactionPool);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3063;
			this.match(HiveParser.KW_POOL);
			this.state = 3064;
			localctx._poolName = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compactionType(): CompactionTypeContext {
		let localctx: CompactionTypeContext = new CompactionTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 462, HiveParser.RULE_compactionType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3066;
			this.match(HiveParser.KW_TYPE);
			this.state = 3067;
			localctx._compactType = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compactionStatus(): CompactionStatusContext {
		let localctx: CompactionStatusContext = new CompactionStatusContext(this, this._ctx, this.state);
		this.enterRule(localctx, 464, HiveParser.RULE_compactionStatus);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3069;
			this.match(HiveParser.KW_STATUS);
			this.state = 3070;
			localctx._status = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatement(): AlterStatementContext {
		let localctx: AlterStatementContext = new AlterStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 466, HiveParser.RULE_alterStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3072;
			this.match(HiveParser.KW_ALTER);
			this.state = 3094;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 318:
				{
				this.state = 3073;
				this.match(HiveParser.KW_TABLE);
				this.state = 3074;
				this.tableName();
				this.state = 3075;
				this.alterTableStatementSuffix();
				}
				break;
			case 367:
				{
				this.state = 3077;
				this.match(HiveParser.KW_VIEW);
				this.state = 3078;
				this.tableName();
				this.state = 3080;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===17) {
					{
					this.state = 3079;
					this.match(HiveParser.KW_AS);
					}
				}

				this.state = 3082;
				this.alterViewStatementSuffix();
				}
				break;
			case 194:
				{
				this.state = 3084;
				this.match(HiveParser.KW_MATERIALIZED);
				this.state = 3085;
				this.match(HiveParser.KW_VIEW);
				this.state = 3086;
				localctx._tableNameTree = this.tableName();
				this.state = 3087;
				this.alterMaterializedViewStatementSuffix();
				}
				break;
			case 67:
			case 285:
				{
				this.state = 3089;
				this.db_schema();
				this.state = 3090;
				this.alterDatabaseStatementSuffix();
				}
				break;
			case 69:
				{
				this.state = 3092;
				this.match(HiveParser.KW_DATACONNECTOR);
				this.state = 3093;
				this.alterDataConnectorStatementSuffix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterTableStatementSuffix(): AlterTableStatementSuffixContext {
		let localctx: AlterTableStatementSuffixContext = new AlterTableStatementSuffixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 468, HiveParser.RULE_alterTableStatementSuffix);
		try {
			this.state = 3115;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 323, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3096;
				this.alterStatementSuffixRename();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3097;
				this.alterStatementSuffixDropPartitions();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3098;
				this.alterStatementSuffixAddPartitions();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3099;
				this.alterStatementSuffixTouch();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3100;
				this.alterStatementSuffixArchive();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3101;
				this.alterStatementSuffixUnArchive();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3102;
				this.alterStatementSuffixProperties();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 3103;
				this.alterStatementSuffixSkewedby();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 3104;
				this.alterStatementSuffixExchangePartition();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 3105;
				this.alterStatementPartitionKeyType();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 3106;
				this.alterStatementSuffixDropConstraint();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 3107;
				this.alterStatementSuffixAddConstraint();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 3108;
				this.alterTblPartitionStatementSuffix();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 3109;
				this.partitionSpec();
				this.state = 3110;
				this.alterTblPartitionStatementSuffix();
				}
				break;
			case 15:
				this.enterOuterAlt(localctx, 15);
				{
				this.state = 3112;
				this.alterStatementSuffixSetOwner();
				}
				break;
			case 16:
				this.enterOuterAlt(localctx, 16);
				{
				this.state = 3113;
				this.alterStatementSuffixSetPartSpec();
				}
				break;
			case 17:
				this.enterOuterAlt(localctx, 17);
				{
				this.state = 3114;
				this.alterStatementSuffixExecute();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterTblPartitionStatementSuffix(): AlterTblPartitionStatementSuffixContext {
		let localctx: AlterTblPartitionStatementSuffixContext = new AlterTblPartitionStatementSuffixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 470, HiveParser.RULE_alterTblPartitionStatementSuffix);
		try {
			this.state = 3131;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 324, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3117;
				this.alterStatementSuffixFileFormat();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3118;
				this.alterStatementSuffixLocation();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3119;
				this.alterStatementSuffixMergeFiles();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3120;
				this.alterStatementSuffixSerdeProperties();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3121;
				this.alterStatementSuffixRenamePart();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 3122;
				this.alterStatementSuffixBucketNum();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 3123;
				this.alterTblPartitionStatementSuffixSkewedLocation();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 3124;
				this.alterStatementSuffixClusterbySortby();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 3125;
				this.alterStatementSuffixCompact();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 3126;
				this.alterStatementSuffixUpdateStatsCol();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 3127;
				this.alterStatementSuffixUpdateStats();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 3128;
				this.alterStatementSuffixRenameCol();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 3129;
				this.alterStatementSuffixAddCol();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 3130;
				this.alterStatementSuffixUpdateColumns();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementPartitionKeyType(): AlterStatementPartitionKeyTypeContext {
		let localctx: AlterStatementPartitionKeyTypeContext = new AlterStatementPartitionKeyTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 472, HiveParser.RULE_alterStatementPartitionKeyType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3133;
			this.match(HiveParser.KW_PARTITION);
			this.state = 3134;
			this.match(HiveParser.KW_COLUMN);
			this.state = 3135;
			this.match(HiveParser.LPAREN);
			this.state = 3136;
			this.columnNameType();
			this.state = 3137;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterViewStatementSuffix(): AlterViewStatementSuffixContext {
		let localctx: AlterViewStatementSuffixContext = new AlterViewStatementSuffixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 474, HiveParser.RULE_alterViewStatementSuffix);
		try {
			this.state = 3144;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 293:
			case 352:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3139;
				this.alterViewSuffixProperties();
				}
				break;
			case 264:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3140;
				this.alterStatementSuffixRename();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3141;
				this.alterStatementSuffixAddPartitions();
				}
				break;
			case 98:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3142;
				this.alterStatementSuffixDropPartitions();
				}
				break;
			case 190:
			case 258:
			case 288:
			case 363:
			case 375:
			case 386:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3143;
				this.selectStatementWithCTE();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterMaterializedViewStatementSuffix(): AlterMaterializedViewStatementSuffixContext {
		let localctx: AlterMaterializedViewStatementSuffixContext = new AlterMaterializedViewStatementSuffixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 476, HiveParser.RULE_alterMaterializedViewStatementSuffix);
		try {
			this.state = 3148;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 91:
			case 102:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3146;
				this.alterMaterializedViewSuffixRewrite();
				}
				break;
			case 255:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3147;
				this.alterMaterializedViewSuffixRebuild();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterMaterializedViewSuffixRewrite(): AlterMaterializedViewSuffixRewriteContext {
		let localctx: AlterMaterializedViewSuffixRewriteContext = new AlterMaterializedViewSuffixRewriteContext(this, this._ctx, this.state);
		this.enterRule(localctx, 478, HiveParser.RULE_alterMaterializedViewSuffixRewrite);
		try {
			this.state = 3152;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 102:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3150;
				localctx._mvRewriteFlag = this.rewriteEnabled();
				}
				break;
			case 91:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3151;
				localctx._mvRewriteFlag2 = this.rewriteDisabled();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterMaterializedViewSuffixRebuild(): AlterMaterializedViewSuffixRebuildContext {
		let localctx: AlterMaterializedViewSuffixRebuildContext = new AlterMaterializedViewSuffixRebuildContext(this, this._ctx, this.state);
		this.enterRule(localctx, 480, HiveParser.RULE_alterMaterializedViewSuffixRebuild);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3154;
			this.match(HiveParser.KW_REBUILD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterDatabaseStatementSuffix(): AlterDatabaseStatementSuffixContext {
		let localctx: AlterDatabaseStatementSuffixContext = new AlterDatabaseStatementSuffixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 482, HiveParser.RULE_alterDatabaseStatementSuffix);
		try {
			this.state = 3159;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 328, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3156;
				this.alterDatabaseSuffixProperties();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3157;
				this.alterDatabaseSuffixSetOwner();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3158;
				this.alterDatabaseSuffixSetLocation();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterDatabaseSuffixProperties(): AlterDatabaseSuffixPropertiesContext {
		let localctx: AlterDatabaseSuffixPropertiesContext = new AlterDatabaseSuffixPropertiesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 484, HiveParser.RULE_alterDatabaseSuffixProperties);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3161;
			localctx._name = this.id_();
			this.state = 3162;
			this.match(HiveParser.KW_SET);
			this.state = 3163;
			this.match(HiveParser.KW_DBPROPERTIES);
			this.state = 3164;
			this.dbProperties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterDatabaseSuffixSetOwner(): AlterDatabaseSuffixSetOwnerContext {
		let localctx: AlterDatabaseSuffixSetOwnerContext = new AlterDatabaseSuffixSetOwnerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 486, HiveParser.RULE_alterDatabaseSuffixSetOwner);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3166;
			localctx._dbName = this.id_();
			this.state = 3167;
			this.match(HiveParser.KW_SET);
			this.state = 3168;
			this.match(HiveParser.KW_OWNER);
			this.state = 3169;
			this.principalName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterDatabaseSuffixSetLocation(): AlterDatabaseSuffixSetLocationContext {
		let localctx: AlterDatabaseSuffixSetLocationContext = new AlterDatabaseSuffixSetLocationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 488, HiveParser.RULE_alterDatabaseSuffixSetLocation);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3171;
			localctx._dbName = this.id_();
			this.state = 3172;
			this.match(HiveParser.KW_SET);
			this.state = 3173;
			_la = this._input.LA(1);
			if(!(_la===181 || _la===188)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 3174;
			localctx._newLocation = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterDatabaseSuffixSetManagedLocation(): AlterDatabaseSuffixSetManagedLocationContext {
		let localctx: AlterDatabaseSuffixSetManagedLocationContext = new AlterDatabaseSuffixSetManagedLocationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 490, HiveParser.RULE_alterDatabaseSuffixSetManagedLocation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3176;
			localctx._dbName = this.id_();
			this.state = 3177;
			this.match(HiveParser.KW_SET);
			this.state = 3178;
			this.match(HiveParser.KW_MANAGEDLOCATION);
			this.state = 3179;
			localctx._newLocation = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixRename(): AlterStatementSuffixRenameContext {
		let localctx: AlterStatementSuffixRenameContext = new AlterStatementSuffixRenameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 492, HiveParser.RULE_alterStatementSuffixRename);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3181;
			this.match(HiveParser.KW_RENAME);
			this.state = 3182;
			this.match(HiveParser.KW_TO);
			this.state = 3183;
			this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixAddCol(): AlterStatementSuffixAddColContext {
		let localctx: AlterStatementSuffixAddColContext = new AlterStatementSuffixAddColContext(this, this._ctx, this.state);
		this.enterRule(localctx, 494, HiveParser.RULE_alterStatementSuffixAddCol);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3187;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 4:
				{
				this.state = 3185;
				localctx._add = this.match(HiveParser.KW_ADD);
				}
				break;
			case 268:
				{
				this.state = 3186;
				localctx._replace = this.match(HiveParser.KW_REPLACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3189;
			this.match(HiveParser.KW_COLUMNS);
			this.state = 3190;
			this.match(HiveParser.LPAREN);
			this.state = 3191;
			this.columnNameTypeList();
			this.state = 3192;
			this.match(HiveParser.RPAREN);
			this.state = 3194;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===34 || _la===272) {
				{
				this.state = 3193;
				this.restrictOrCascade();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixAddConstraint(): AlterStatementSuffixAddConstraintContext {
		let localctx: AlterStatementSuffixAddConstraintContext = new AlterStatementSuffixAddConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 496, HiveParser.RULE_alterStatementSuffixAddConstraint);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3196;
			this.match(HiveParser.KW_ADD);
			this.state = 3199;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 331, this._ctx) ) {
			case 1:
				{
				this.state = 3197;
				localctx._fk = this.alterForeignKeyWithName();
				}
				break;
			case 2:
				{
				this.state = 3198;
				this.alterConstraintWithName();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixUpdateColumns(): AlterStatementSuffixUpdateColumnsContext {
		let localctx: AlterStatementSuffixUpdateColumnsContext = new AlterStatementSuffixUpdateColumnsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 498, HiveParser.RULE_alterStatementSuffixUpdateColumns);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3201;
			this.match(HiveParser.KW_UPDATE);
			this.state = 3202;
			this.match(HiveParser.KW_COLUMNS);
			this.state = 3204;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===34 || _la===272) {
				{
				this.state = 3203;
				this.restrictOrCascade();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixDropConstraint(): AlterStatementSuffixDropConstraintContext {
		let localctx: AlterStatementSuffixDropConstraintContext = new AlterStatementSuffixDropConstraintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 500, HiveParser.RULE_alterStatementSuffixDropConstraint);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3206;
			this.match(HiveParser.KW_DROP);
			this.state = 3207;
			this.match(HiveParser.KW_CONSTRAINT);
			this.state = 3208;
			localctx._cName = this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixRenameCol(): AlterStatementSuffixRenameColContext {
		let localctx: AlterStatementSuffixRenameColContext = new AlterStatementSuffixRenameColContext(this, this._ctx, this.state);
		this.enterRule(localctx, 502, HiveParser.RULE_alterStatementSuffixRenameCol);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3210;
			this.match(HiveParser.KW_CHANGE);
			this.state = 3212;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===45) {
				{
				this.state = 3211;
				this.match(HiveParser.KW_COLUMN);
				}
			}

			this.state = 3214;
			localctx._oldName = this.id_();
			this.state = 3215;
			localctx._newName = this.id_();
			this.state = 3216;
			this.colType();
			this.state = 3218;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===40 || _la===55 || _la===80 || _la===206 || _la===241 || _la===259 || _la===347) {
				{
				this.state = 3217;
				this.alterColumnConstraint();
				}
			}

			this.state = 3222;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===47) {
				{
				this.state = 3220;
				this.match(HiveParser.KW_COMMENT);
				this.state = 3221;
				localctx._comment = this.match(HiveParser.StringLiteral);
				}
			}

			this.state = 3225;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===6 || _la===125) {
				{
				this.state = 3224;
				this.alterStatementChangeColPosition();
				}
			}

			this.state = 3228;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===34 || _la===272) {
				{
				this.state = 3227;
				this.restrictOrCascade();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixUpdateStatsCol(): AlterStatementSuffixUpdateStatsColContext {
		let localctx: AlterStatementSuffixUpdateStatsColContext = new AlterStatementSuffixUpdateStatsColContext(this, this._ctx, this.state);
		this.enterRule(localctx, 504, HiveParser.RULE_alterStatementSuffixUpdateStatsCol);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3230;
			this.match(HiveParser.KW_UPDATE);
			this.state = 3231;
			this.match(HiveParser.KW_STATISTICS);
			this.state = 3232;
			this.match(HiveParser.KW_FOR);
			this.state = 3234;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===45) {
				{
				this.state = 3233;
				this.match(HiveParser.KW_COLUMN);
				}
			}

			this.state = 3236;
			localctx._colName = this.id_();
			this.state = 3237;
			this.match(HiveParser.KW_SET);
			this.state = 3238;
			this.tableProperties();
			this.state = 3241;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===47) {
				{
				this.state = 3239;
				this.match(HiveParser.KW_COMMENT);
				this.state = 3240;
				localctx._comment = this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixUpdateStats(): AlterStatementSuffixUpdateStatsContext {
		let localctx: AlterStatementSuffixUpdateStatsContext = new AlterStatementSuffixUpdateStatsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 506, HiveParser.RULE_alterStatementSuffixUpdateStats);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3243;
			this.match(HiveParser.KW_UPDATE);
			this.state = 3244;
			this.match(HiveParser.KW_STATISTICS);
			this.state = 3245;
			this.match(HiveParser.KW_SET);
			this.state = 3246;
			this.tableProperties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementChangeColPosition(): AlterStatementChangeColPositionContext {
		let localctx: AlterStatementChangeColPositionContext = new AlterStatementChangeColPositionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 508, HiveParser.RULE_alterStatementChangeColPosition);
		try {
			this.state = 3251;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 125:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3248;
				localctx._first = this.match(HiveParser.KW_FIRST);
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3249;
				this.match(HiveParser.KW_AFTER);
				this.state = 3250;
				localctx._afterCol = this.id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixAddPartitions(): AlterStatementSuffixAddPartitionsContext {
		let localctx: AlterStatementSuffixAddPartitionsContext = new AlterStatementSuffixAddPartitionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 510, HiveParser.RULE_alterStatementSuffixAddPartitions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3253;
			this.match(HiveParser.KW_ADD);
			this.state = 3255;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 3254;
				this.ifNotExists();
				}
			}

			this.state = 3258;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3257;
				this.alterStatementSuffixAddPartitionsElement();
				}
				}
				this.state = 3260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===227);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixAddPartitionsElement(): AlterStatementSuffixAddPartitionsElementContext {
		let localctx: AlterStatementSuffixAddPartitionsElementContext = new AlterStatementSuffixAddPartitionsElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 512, HiveParser.RULE_alterStatementSuffixAddPartitionsElement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3262;
			this.partitionSpec();
			this.state = 3264;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===181) {
				{
				this.state = 3263;
				this.partitionLocation();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixTouch(): AlterStatementSuffixTouchContext {
		let localctx: AlterStatementSuffixTouchContext = new AlterStatementSuffixTouchContext(this, this._ctx, this.state);
		this.enterRule(localctx, 514, HiveParser.RULE_alterStatementSuffixTouch);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3266;
			this.match(HiveParser.KW_TOUCH);
			this.state = 3270;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===227) {
				{
				{
				this.state = 3267;
				this.partitionSpec();
				}
				}
				this.state = 3272;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixArchive(): AlterStatementSuffixArchiveContext {
		let localctx: AlterStatementSuffixArchiveContext = new AlterStatementSuffixArchiveContext(this, this._ctx, this.state);
		this.enterRule(localctx, 516, HiveParser.RULE_alterStatementSuffixArchive);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3273;
			this.match(HiveParser.KW_ARCHIVE);
			this.state = 3277;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===227) {
				{
				{
				this.state = 3274;
				this.partitionSpec();
				}
				}
				this.state = 3279;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixUnArchive(): AlterStatementSuffixUnArchiveContext {
		let localctx: AlterStatementSuffixUnArchiveContext = new AlterStatementSuffixUnArchiveContext(this, this._ctx, this.state);
		this.enterRule(localctx, 518, HiveParser.RULE_alterStatementSuffixUnArchive);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3280;
			this.match(HiveParser.KW_UNARCHIVE);
			this.state = 3284;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===227) {
				{
				{
				this.state = 3281;
				this.partitionSpec();
				}
				}
				this.state = 3286;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionLocation(): PartitionLocationContext {
		let localctx: PartitionLocationContext = new PartitionLocationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 520, HiveParser.RULE_partitionLocation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3287;
			this.match(HiveParser.KW_LOCATION);
			this.state = 3288;
			localctx._locn = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext {
		let localctx: AlterStatementSuffixDropPartitionsContext = new AlterStatementSuffixDropPartitionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 522, HiveParser.RULE_alterStatementSuffixDropPartitions);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3290;
			this.match(HiveParser.KW_DROP);
			this.state = 3292;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 3291;
				this.ifExists();
				}
			}

			this.state = 3294;
			this.match(HiveParser.KW_PARTITION);
			this.state = 3295;
			this.partitionSelectorSpec();
			this.state = 3301;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 3296;
				this.match(HiveParser.COMMA);
				this.state = 3297;
				this.match(HiveParser.KW_PARTITION);
				this.state = 3298;
				this.partitionSelectorSpec();
				}
				}
				this.state = 3303;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 3305;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===245) {
				{
				this.state = 3304;
				this.match(HiveParser.KW_PURGE);
				}
			}

			this.state = 3308;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===129) {
				{
				this.state = 3307;
				this.replicationClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixProperties(): AlterStatementSuffixPropertiesContext {
		let localctx: AlterStatementSuffixPropertiesContext = new AlterStatementSuffixPropertiesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 524, HiveParser.RULE_alterStatementSuffixProperties);
		let _la: number;
		try {
			this.state = 3319;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 293:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3310;
				this.match(HiveParser.KW_SET);
				this.state = 3311;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 3312;
				this.tableProperties();
				}
				break;
			case 352:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3313;
				this.match(HiveParser.KW_UNSET);
				this.state = 3314;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 3316;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===145) {
					{
					this.state = 3315;
					this.ifExists();
					}
				}

				this.state = 3318;
				this.tableProperties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterViewSuffixProperties(): AlterViewSuffixPropertiesContext {
		let localctx: AlterViewSuffixPropertiesContext = new AlterViewSuffixPropertiesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 526, HiveParser.RULE_alterViewSuffixProperties);
		let _la: number;
		try {
			this.state = 3330;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 293:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3321;
				this.match(HiveParser.KW_SET);
				this.state = 3322;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 3323;
				this.tableProperties();
				}
				break;
			case 352:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3324;
				this.match(HiveParser.KW_UNSET);
				this.state = 3325;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 3327;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===145) {
					{
					this.state = 3326;
					this.ifExists();
					}
				}

				this.state = 3329;
				this.tableProperties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixSerdeProperties(): AlterStatementSuffixSerdePropertiesContext {
		let localctx: AlterStatementSuffixSerdePropertiesContext = new AlterStatementSuffixSerdePropertiesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 528, HiveParser.RULE_alterStatementSuffixSerdeProperties);
		let _la: number;
		try {
			this.state = 3347;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 293:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3332;
				this.match(HiveParser.KW_SET);
				this.state = 3342;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 290:
					{
					this.state = 3333;
					this.match(HiveParser.KW_SERDE);
					this.state = 3334;
					localctx._serdeName = this.match(HiveParser.StringLiteral);
					this.state = 3338;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===375) {
						{
						this.state = 3335;
						this.match(HiveParser.KW_WITH);
						this.state = 3336;
						this.match(HiveParser.KW_SERDEPROPERTIES);
						this.state = 3337;
						this.tableProperties();
						}
					}

					}
					break;
				case 291:
					{
					this.state = 3340;
					this.match(HiveParser.KW_SERDEPROPERTIES);
					this.state = 3341;
					this.tableProperties();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 352:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3344;
				this.match(HiveParser.KW_UNSET);
				this.state = 3345;
				this.match(HiveParser.KW_SERDEPROPERTIES);
				this.state = 3346;
				this.tableProperties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tablePartitionPrefix(): TablePartitionPrefixContext {
		let localctx: TablePartitionPrefixContext = new TablePartitionPrefixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 530, HiveParser.RULE_tablePartitionPrefix);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3349;
			this.tableName();
			this.state = 3351;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===227) {
				{
				this.state = 3350;
				this.partitionSpec();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixFileFormat(): AlterStatementSuffixFileFormatContext {
		let localctx: AlterStatementSuffixFileFormatContext = new AlterStatementSuffixFileFormatContext(this, this._ctx, this.state);
		this.enterRule(localctx, 532, HiveParser.RULE_alterStatementSuffixFileFormat);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3353;
			this.match(HiveParser.KW_SET);
			this.state = 3354;
			this.match(HiveParser.KW_FILEFORMAT);
			this.state = 3355;
			this.fileFormat();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixClusterbySortby(): AlterStatementSuffixClusterbySortbyContext {
		let localctx: AlterStatementSuffixClusterbySortbyContext = new AlterStatementSuffixClusterbySortbyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 534, HiveParser.RULE_alterStatementSuffixClusterbySortby);
		let _la: number;
		try {
			this.state = 3360;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 206:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3357;
				this.match(HiveParser.KW_NOT);
				this.state = 3358;
				_la = this._input.LA(1);
				if(!(_la===42 || _la===304)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 42:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3359;
				this.tableBuckets();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterTblPartitionStatementSuffixSkewedLocation(): AlterTblPartitionStatementSuffixSkewedLocationContext {
		let localctx: AlterTblPartitionStatementSuffixSkewedLocationContext = new AlterTblPartitionStatementSuffixSkewedLocationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 536, HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3362;
			this.match(HiveParser.KW_SET);
			this.state = 3363;
			this.match(HiveParser.KW_SKEWED);
			this.state = 3364;
			this.match(HiveParser.KW_LOCATION);
			this.state = 3365;
			this.skewedLocations();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public skewedLocations(): SkewedLocationsContext {
		let localctx: SkewedLocationsContext = new SkewedLocationsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 538, HiveParser.RULE_skewedLocations);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3367;
			this.match(HiveParser.LPAREN);
			this.state = 3368;
			this.skewedLocationsList();
			this.state = 3369;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public skewedLocationsList(): SkewedLocationsListContext {
		let localctx: SkewedLocationsListContext = new SkewedLocationsListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 540, HiveParser.RULE_skewedLocationsList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3371;
			this.skewedLocationMap();
			this.state = 3376;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 3372;
				this.match(HiveParser.COMMA);
				this.state = 3373;
				this.skewedLocationMap();
				}
				}
				this.state = 3378;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public skewedLocationMap(): SkewedLocationMapContext {
		let localctx: SkewedLocationMapContext = new SkewedLocationMapContext(this, this._ctx, this.state);
		this.enterRule(localctx, 542, HiveParser.RULE_skewedLocationMap);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3379;
			localctx._key = this.skewedValueLocationElement();
			this.state = 3380;
			this.match(HiveParser.EQUAL);
			this.state = 3381;
			localctx._value = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixLocation(): AlterStatementSuffixLocationContext {
		let localctx: AlterStatementSuffixLocationContext = new AlterStatementSuffixLocationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 544, HiveParser.RULE_alterStatementSuffixLocation);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3383;
			this.match(HiveParser.KW_SET);
			this.state = 3384;
			this.match(HiveParser.KW_LOCATION);
			this.state = 3385;
			localctx._newLoc = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixSkewedby(): AlterStatementSuffixSkewedbyContext {
		let localctx: AlterStatementSuffixSkewedbyContext = new AlterStatementSuffixSkewedbyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 546, HiveParser.RULE_alterStatementSuffixSkewedby);
		try {
			this.state = 3393;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 299:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3387;
				this.tableSkewed();
				}
				break;
			case 206:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3388;
				this.match(HiveParser.KW_NOT);
				this.state = 3391;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 299:
					{
					this.state = 3389;
					this.match(HiveParser.KW_SKEWED);
					}
					break;
				case 310:
					{
					this.state = 3390;
					this.storedAsDirs();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixExchangePartition(): AlterStatementSuffixExchangePartitionContext {
		let localctx: AlterStatementSuffixExchangePartitionContext = new AlterStatementSuffixExchangePartitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 548, HiveParser.RULE_alterStatementSuffixExchangePartition);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3395;
			this.match(HiveParser.KW_EXCHANGE);
			this.state = 3396;
			this.partitionSpec();
			this.state = 3397;
			this.match(HiveParser.KW_WITH);
			this.state = 3398;
			this.match(HiveParser.KW_TABLE);
			this.state = 3399;
			localctx._exchangename = this.tableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixRenamePart(): AlterStatementSuffixRenamePartContext {
		let localctx: AlterStatementSuffixRenamePartContext = new AlterStatementSuffixRenamePartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 550, HiveParser.RULE_alterStatementSuffixRenamePart);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3401;
			this.match(HiveParser.KW_RENAME);
			this.state = 3402;
			this.match(HiveParser.KW_TO);
			this.state = 3403;
			this.partitionSpec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixStatsPart(): AlterStatementSuffixStatsPartContext {
		let localctx: AlterStatementSuffixStatsPartContext = new AlterStatementSuffixStatsPartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 552, HiveParser.RULE_alterStatementSuffixStatsPart);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3405;
			this.match(HiveParser.KW_UPDATE);
			this.state = 3406;
			this.match(HiveParser.KW_STATISTICS);
			this.state = 3407;
			this.match(HiveParser.KW_FOR);
			this.state = 3409;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===45) {
				{
				this.state = 3408;
				this.match(HiveParser.KW_COLUMN);
				}
			}

			this.state = 3411;
			localctx._colName = this.id_();
			this.state = 3412;
			this.match(HiveParser.KW_SET);
			this.state = 3413;
			this.tableProperties();
			this.state = 3416;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===47) {
				{
				this.state = 3414;
				this.match(HiveParser.KW_COMMENT);
				this.state = 3415;
				localctx._comment = this.match(HiveParser.StringLiteral);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixMergeFiles(): AlterStatementSuffixMergeFilesContext {
		let localctx: AlterStatementSuffixMergeFilesContext = new AlterStatementSuffixMergeFilesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 554, HiveParser.RULE_alterStatementSuffixMergeFiles);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3418;
			this.match(HiveParser.KW_CONCATENATE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixBucketNum(): AlterStatementSuffixBucketNumContext {
		let localctx: AlterStatementSuffixBucketNumContext = new AlterStatementSuffixBucketNumContext(this, this._ctx, this.state);
		this.enterRule(localctx, 556, HiveParser.RULE_alterStatementSuffixBucketNum);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3420;
			this.match(HiveParser.KW_INTO);
			this.state = 3421;
			localctx._num = this.match(HiveParser.Number);
			this.state = 3422;
			this.match(HiveParser.KW_BUCKETS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public blocking(): BlockingContext {
		let localctx: BlockingContext = new BlockingContext(this, this._ctx, this.state);
		this.enterRule(localctx, 558, HiveParser.RULE_blocking);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3424;
			this.match(HiveParser.KW_AND);
			this.state = 3425;
			this.match(HiveParser.KW_WAIT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public compactPool(): CompactPoolContext {
		let localctx: CompactPoolContext = new CompactPoolContext(this, this._ctx, this.state);
		this.enterRule(localctx, 560, HiveParser.RULE_compactPool);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3427;
			this.match(HiveParser.KW_POOL);
			this.state = 3428;
			localctx._poolName = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixCompact(): AlterStatementSuffixCompactContext {
		let localctx: AlterStatementSuffixCompactContext = new AlterStatementSuffixCompactContext(this, this._ctx, this.state);
		this.enterRule(localctx, 562, HiveParser.RULE_alterStatementSuffixCompact);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3430;
			this.match(HiveParser.KW_COMPACT);
			this.state = 3431;
			localctx._compactType = this.match(HiveParser.StringLiteral);
			this.state = 3433;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===42) {
				{
				this.state = 3432;
				this.tableImplBuckets();
				}
			}

			this.state = 3436;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===11) {
				{
				this.state = 3435;
				this.blocking();
				}
			}

			this.state = 3439;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===236) {
				{
				this.state = 3438;
				this.compactPool();
				}
			}

			this.state = 3445;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 3441;
				this.match(HiveParser.KW_WITH);
				this.state = 3442;
				this.match(HiveParser.KW_OVERWRITE);
				this.state = 3443;
				this.match(HiveParser.KW_TBLPROPERTIES);
				this.state = 3444;
				this.tableProperties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixSetOwner(): AlterStatementSuffixSetOwnerContext {
		let localctx: AlterStatementSuffixSetOwnerContext = new AlterStatementSuffixSetOwnerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 564, HiveParser.RULE_alterStatementSuffixSetOwner);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3447;
			this.match(HiveParser.KW_SET);
			this.state = 3448;
			this.match(HiveParser.KW_OWNER);
			this.state = 3449;
			this.principalName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixSetPartSpec(): AlterStatementSuffixSetPartSpecContext {
		let localctx: AlterStatementSuffixSetPartSpecContext = new AlterStatementSuffixSetPartSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 566, HiveParser.RULE_alterStatementSuffixSetPartSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3451;
			this.match(HiveParser.KW_SET);
			this.state = 3452;
			this.match(HiveParser.KW_PARTITION);
			this.state = 3453;
			this.match(HiveParser.KW_SPEC);
			this.state = 3454;
			this.match(HiveParser.LPAREN);
			this.state = 3455;
			localctx._spec = this.partitionTransformSpec();
			this.state = 3456;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterStatementSuffixExecute(): AlterStatementSuffixExecuteContext {
		let localctx: AlterStatementSuffixExecuteContext = new AlterStatementSuffixExecuteContext(this, this._ctx, this.state);
		this.enterRule(localctx, 568, HiveParser.RULE_alterStatementSuffixExecute);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3458;
			this.match(HiveParser.KW_EXECUTE);
			this.state = 3468;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 279:
				{
				this.state = 3459;
				this.match(HiveParser.KW_ROLLBACK);
				this.state = 3460;
				this.match(HiveParser.LPAREN);
				this.state = 3461;
				localctx._rollbackParam = this._input.LT(1);
				_la = this._input.LA(1);
				if(!(_la===412 || _la===417)) {
				    localctx._rollbackParam = this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 113:
				{
				this.state = 3462;
				this.match(HiveParser.KW_EXPIRE_SNAPSHOTS);
				this.state = 3463;
				this.match(HiveParser.LPAREN);
				this.state = 3464;
				localctx._expireParam = this.match(HiveParser.StringLiteral);
				}
				break;
			case 295:
				{
				this.state = 3465;
				this.match(HiveParser.KW_SET_CURRENT_SNAPSHOT);
				this.state = 3466;
				this.match(HiveParser.LPAREN);
				this.state = 3467;
				localctx._snapshotParam = this.match(HiveParser.Number);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3470;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fileFormat(): FileFormatContext {
		let localctx: FileFormatContext = new FileFormatContext(this, this._ctx, this.state);
		this.enterRule(localctx, 570, HiveParser.RULE_fileFormat);
		let _la: number;
		try {
			this.state = 3485;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 371, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3472;
				this.match(HiveParser.KW_INPUTFORMAT);
				this.state = 3473;
				localctx._inFmt = this.match(HiveParser.StringLiteral);
				this.state = 3474;
				this.match(HiveParser.KW_OUTPUTFORMAT);
				this.state = 3475;
				localctx._outFmt = this.match(HiveParser.StringLiteral);
				this.state = 3476;
				this.match(HiveParser.KW_SERDE);
				this.state = 3477;
				localctx._serdeCls = this.match(HiveParser.StringLiteral);
				this.state = 3482;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===153) {
					{
					this.state = 3478;
					this.match(HiveParser.KW_INPUTDRIVER);
					this.state = 3479;
					localctx._inDriver = this.match(HiveParser.StringLiteral);
					this.state = 3480;
					this.match(HiveParser.KW_OUTPUTDRIVER);
					this.state = 3481;
					localctx._outDriver = this.match(HiveParser.StringLiteral);
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3484;
				localctx._genericSpec = this.id_();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterDataConnectorStatementSuffix(): AlterDataConnectorStatementSuffixContext {
		let localctx: AlterDataConnectorStatementSuffixContext = new AlterDataConnectorStatementSuffixContext(this, this._ctx, this.state);
		this.enterRule(localctx, 572, HiveParser.RULE_alterDataConnectorStatementSuffix);
		try {
			this.state = 3490;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 372, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3487;
				this.alterDataConnectorSuffixProperties();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3488;
				this.alterDataConnectorSuffixSetOwner();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3489;
				this.alterDataConnectorSuffixSetUrl();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterDataConnectorSuffixProperties(): AlterDataConnectorSuffixPropertiesContext {
		let localctx: AlterDataConnectorSuffixPropertiesContext = new AlterDataConnectorSuffixPropertiesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 574, HiveParser.RULE_alterDataConnectorSuffixProperties);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3492;
			localctx._name = this.id_();
			this.state = 3493;
			this.match(HiveParser.KW_SET);
			this.state = 3494;
			this.match(HiveParser.KW_DCPROPERTIES);
			this.state = 3495;
			this.dcProperties();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterDataConnectorSuffixSetOwner(): AlterDataConnectorSuffixSetOwnerContext {
		let localctx: AlterDataConnectorSuffixSetOwnerContext = new AlterDataConnectorSuffixSetOwnerContext(this, this._ctx, this.state);
		this.enterRule(localctx, 576, HiveParser.RULE_alterDataConnectorSuffixSetOwner);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3497;
			localctx._dcName = this.id_();
			this.state = 3498;
			this.match(HiveParser.KW_SET);
			this.state = 3499;
			this.match(HiveParser.KW_OWNER);
			this.state = 3500;
			this.principalName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterDataConnectorSuffixSetUrl(): AlterDataConnectorSuffixSetUrlContext {
		let localctx: AlterDataConnectorSuffixSetUrlContext = new AlterDataConnectorSuffixSetUrlContext(this, this._ctx, this.state);
		this.enterRule(localctx, 578, HiveParser.RULE_alterDataConnectorSuffixSetUrl);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3502;
			localctx._dcName = this.id_();
			this.state = 3503;
			this.match(HiveParser.KW_SET);
			this.state = 3504;
			this.match(HiveParser.KW_URL);
			this.state = 3505;
			localctx._newUri = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public likeTableOrFile(): LikeTableOrFileContext {
		let localctx: LikeTableOrFileContext = new LikeTableOrFileContext(this, this._ctx, this.state);
		this.enterRule(localctx, 580, HiveParser.RULE_likeTableOrFile);
		try {
			this.state = 3516;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 373, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3507;
				this.match(HiveParser.KW_LIKE);
				this.state = 3508;
				this.match(HiveParser.KW_FILE);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3509;
				this.match(HiveParser.KW_LIKE);
				this.state = 3510;
				this.match(HiveParser.KW_FILE);
				this.state = 3511;
				localctx._format = this.id_();
				this.state = 3512;
				localctx._uri = this.match(HiveParser.StringLiteral);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3514;
				this.match(HiveParser.KW_LIKE);
				this.state = 3515;
				localctx._likeName = this.tableName();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTableStatement(): CreateTableStatementContext {
		let localctx: CreateTableStatementContext = new CreateTableStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 582, HiveParser.RULE_createTableStatement);
		let _la: number;
		try {
			this.state = 3641;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 410, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3518;
				this.match(HiveParser.KW_CREATE);
				this.state = 3520;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===322) {
					{
					this.state = 3519;
					localctx._temp = this.match(HiveParser.KW_TEMPORARY);
					}
				}

				this.state = 3523;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===334) {
					{
					this.state = 3522;
					localctx._trans = this.match(HiveParser.KW_TRANSACTIONAL);
					}
				}

				this.state = 3526;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===118) {
					{
					this.state = 3525;
					localctx._ext = this.match(HiveParser.KW_EXTERNAL);
					}
				}

				this.state = 3528;
				this.match(HiveParser.KW_TABLE);
				this.state = 3530;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===145) {
					{
					this.state = 3529;
					this.ifNotExists();
					}
				}

				this.state = 3532;
				localctx._name = this.tableName();
				this.state = 3583;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 176:
					{
					this.state = 3533;
					this.likeTableOrFile();
					this.state = 3535;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===228) {
						{
						this.state = 3534;
						this.createTablePartitionSpec();
						}
					}

					this.state = 3538;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===281) {
						{
						this.state = 3537;
						this.tableRowFormat();
						}
					}

					this.state = 3541;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===310) {
						{
						this.state = 3540;
						this.tableFileFormat();
						}
					}

					this.state = 3544;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===181) {
						{
						this.state = 3543;
						this.tableLocation();
						}
					}

					this.state = 3547;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===321) {
						{
						this.state = 3546;
						this.tablePropertiesPrefixed();
						}
					}

					}
					break;
				case -1:
				case 17:
				case 42:
				case 47:
				case 181:
				case 228:
				case 281:
				case 299:
				case 310:
				case 321:
				case 386:
					{
					this.state = 3553;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===386) {
						{
						this.state = 3549;
						this.match(HiveParser.LPAREN);
						this.state = 3550;
						this.columnNameTypeOrConstraintList();
						this.state = 3551;
						this.match(HiveParser.RPAREN);
						}
					}

					this.state = 3556;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===47) {
						{
						this.state = 3555;
						this.tableComment();
						}
					}

					this.state = 3559;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===228) {
						{
						this.state = 3558;
						this.createTablePartitionSpec();
						}
					}

					this.state = 3562;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===42) {
						{
						this.state = 3561;
						this.tableBuckets();
						}
					}

					this.state = 3565;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===299) {
						{
						this.state = 3564;
						this.tableSkewed();
						}
					}

					this.state = 3568;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===281) {
						{
						this.state = 3567;
						this.tableRowFormat();
						}
					}

					this.state = 3571;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===310) {
						{
						this.state = 3570;
						this.tableFileFormat();
						}
					}

					this.state = 3574;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===181) {
						{
						this.state = 3573;
						this.tableLocation();
						}
					}

					this.state = 3577;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===321) {
						{
						this.state = 3576;
						this.tablePropertiesPrefixed();
						}
					}

					this.state = 3581;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===17) {
						{
						this.state = 3579;
						this.match(HiveParser.KW_AS);
						this.state = 3580;
						this.selectStatementWithCTE();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3585;
				this.match(HiveParser.KW_CREATE);
				this.state = 3586;
				localctx._mgd = this.match(HiveParser.KW_MANAGED);
				this.state = 3587;
				this.match(HiveParser.KW_TABLE);
				this.state = 3589;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===145) {
					{
					this.state = 3588;
					this.ifNotExists();
					}
				}

				this.state = 3591;
				localctx._name = this.tableName();
				this.state = 3639;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 176:
					{
					this.state = 3592;
					this.likeTableOrFile();
					this.state = 3594;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===281) {
						{
						this.state = 3593;
						this.tableRowFormat();
						}
					}

					this.state = 3597;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===310) {
						{
						this.state = 3596;
						this.tableFileFormat();
						}
					}

					this.state = 3600;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===181) {
						{
						this.state = 3599;
						this.tableLocation();
						}
					}

					this.state = 3603;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===321) {
						{
						this.state = 3602;
						this.tablePropertiesPrefixed();
						}
					}

					}
					break;
				case -1:
				case 17:
				case 42:
				case 47:
				case 181:
				case 228:
				case 281:
				case 299:
				case 310:
				case 321:
				case 386:
					{
					this.state = 3609;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===386) {
						{
						this.state = 3605;
						this.match(HiveParser.LPAREN);
						this.state = 3606;
						this.columnNameTypeOrConstraintList();
						this.state = 3607;
						this.match(HiveParser.RPAREN);
						}
					}

					this.state = 3612;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===47) {
						{
						this.state = 3611;
						this.tableComment();
						}
					}

					this.state = 3615;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===228) {
						{
						this.state = 3614;
						this.createTablePartitionSpec();
						}
					}

					this.state = 3618;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===42) {
						{
						this.state = 3617;
						this.tableBuckets();
						}
					}

					this.state = 3621;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===299) {
						{
						this.state = 3620;
						this.tableSkewed();
						}
					}

					this.state = 3624;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===281) {
						{
						this.state = 3623;
						this.tableRowFormat();
						}
					}

					this.state = 3627;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===310) {
						{
						this.state = 3626;
						this.tableFileFormat();
						}
					}

					this.state = 3630;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===181) {
						{
						this.state = 3629;
						this.tableLocation();
						}
					}

					this.state = 3633;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===321) {
						{
						this.state = 3632;
						this.tablePropertiesPrefixed();
						}
					}

					this.state = 3637;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===17) {
						{
						this.state = 3635;
						this.match(HiveParser.KW_AS);
						this.state = 3636;
						this.selectStatementWithCTE();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createDataConnectorStatement(): CreateDataConnectorStatementContext {
		let localctx: CreateDataConnectorStatementContext = new CreateDataConnectorStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 584, HiveParser.RULE_createDataConnectorStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3643;
			this.match(HiveParser.KW_CREATE);
			this.state = 3644;
			this.match(HiveParser.KW_DATACONNECTOR);
			this.state = 3646;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 3645;
				this.ifNotExists();
				}
			}

			this.state = 3648;
			localctx._name = this.id_();
			this.state = 3649;
			this.dataConnectorType();
			this.state = 3650;
			this.dataConnectorUrl();
			this.state = 3652;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===47) {
				{
				this.state = 3651;
				this.dataConnectorComment();
				}
			}

			this.state = 3657;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 3654;
				this.match(HiveParser.KW_WITH);
				this.state = 3655;
				this.match(HiveParser.KW_DCPROPERTIES);
				this.state = 3656;
				localctx._dcprops = this.dcProperties();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dataConnectorComment(): DataConnectorCommentContext {
		let localctx: DataConnectorCommentContext = new DataConnectorCommentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 586, HiveParser.RULE_dataConnectorComment);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3659;
			this.match(HiveParser.KW_COMMENT);
			this.state = 3660;
			localctx._comment = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dataConnectorUrl(): DataConnectorUrlContext {
		let localctx: DataConnectorUrlContext = new DataConnectorUrlContext(this, this._ctx, this.state);
		this.enterRule(localctx, 588, HiveParser.RULE_dataConnectorUrl);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3662;
			this.match(HiveParser.KW_URL);
			this.state = 3663;
			localctx._url = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dataConnectorType(): DataConnectorTypeContext {
		let localctx: DataConnectorTypeContext = new DataConnectorTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 590, HiveParser.RULE_dataConnectorType);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3665;
			this.match(HiveParser.KW_TYPE);
			this.state = 3666;
			localctx._dcType = this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dcProperties(): DcPropertiesContext {
		let localctx: DcPropertiesContext = new DcPropertiesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 592, HiveParser.RULE_dcProperties);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3668;
			this.match(HiveParser.LPAREN);
			this.state = 3669;
			this.dbPropertiesList();
			this.state = 3670;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropDataConnectorStatement(): DropDataConnectorStatementContext {
		let localctx: DropDataConnectorStatementContext = new DropDataConnectorStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 594, HiveParser.RULE_dropDataConnectorStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3672;
			this.match(HiveParser.KW_DROP);
			this.state = 3673;
			this.match(HiveParser.KW_DATACONNECTOR);
			this.state = 3675;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 3674;
				this.ifExists();
				}
			}

			this.state = 3677;
			this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableAllColumns(): TableAllColumnsContext {
		let localctx: TableAllColumnsContext = new TableAllColumnsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 596, HiveParser.RULE_tableAllColumns);
		try {
			this.state = 3684;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 402:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3679;
				this.match(HiveParser.STAR);
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 8:
			case 10:
			case 15:
			case 18:
			case 19:
			case 20:
			case 22:
			case 23:
			case 24:
			case 30:
			case 31:
			case 33:
			case 34:
			case 37:
			case 38:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 46:
			case 47:
			case 49:
			case 50:
			case 52:
			case 53:
			case 56:
			case 57:
			case 59:
			case 66:
			case 68:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 78:
			case 80:
			case 81:
			case 82:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 90:
			case 91:
			case 93:
			case 94:
			case 95:
			case 97:
			case 99:
			case 100:
			case 102:
			case 104:
			case 105:
			case 106:
			case 109:
			case 110:
			case 111:
			case 113:
			case 114:
			case 115:
			case 116:
			case 122:
			case 123:
			case 124:
			case 125:
			case 132:
			case 133:
			case 137:
			case 142:
			case 143:
			case 144:
			case 146:
			case 149:
			case 150:
			case 152:
			case 153:
			case 154:
			case 161:
			case 162:
			case 163:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 175:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 187:
			case 188:
			case 189:
			case 191:
			case 192:
			case 193:
			case 194:
			case 196:
			case 198:
			case 199:
			case 201:
			case 202:
			case 204:
			case 205:
			case 207:
			case 208:
			case 210:
			case 212:
			case 213:
			case 216:
			case 217:
			case 222:
			case 223:
			case 225:
			case 226:
			case 228:
			case 229:
			case 230:
			case 233:
			case 234:
			case 235:
			case 236:
			case 242:
			case 244:
			case 245:
			case 247:
			case 248:
			case 249:
			case 251:
			case 252:
			case 255:
			case 256:
			case 257:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 277:
			case 278:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 289:
			case 290:
			case 291:
			case 292:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 301:
			case 303:
			case 304:
			case 305:
			case 306:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 316:
			case 317:
			case 319:
			case 321:
			case 322:
			case 323:
			case 328:
			case 329:
			case 331:
			case 333:
			case 334:
			case 335:
			case 338:
			case 341:
			case 342:
			case 344:
			case 346:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 355:
			case 356:
			case 357:
			case 360:
			case 361:
			case 362:
			case 364:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 373:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 418:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3680;
				this.tableName();
				this.state = 3681;
				this.match(HiveParser.DOT);
				this.state = 3682;
				this.match(HiveParser.STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableOrColumn(): TableOrColumnContext {
		let localctx: TableOrColumnContext = new TableOrColumnContext(this, this._ctx, this.state);
		this.enterRule(localctx, 598, HiveParser.RULE_tableOrColumn);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3686;
			this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public defaultValue(): DefaultValueContext {
		let localctx: DefaultValueContext = new DefaultValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 600, HiveParser.RULE_defaultValue);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3688;
			this.match(HiveParser.KW_DEFAULT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expressionList(): ExpressionListContext {
		let localctx: ExpressionListContext = new ExpressionListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 602, HiveParser.RULE_expressionList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3690;
			this.expression();
			this.state = 3695;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 3691;
				this.match(HiveParser.COMMA);
				this.state = 3692;
				this.expression();
				}
				}
				this.state = 3697;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public aliasList(): AliasListContext {
		let localctx: AliasListContext = new AliasListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 604, HiveParser.RULE_aliasList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3698;
			this.id_();
			this.state = 3703;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 3699;
				this.match(HiveParser.COMMA);
				this.state = 3700;
				this.id_();
				}
				}
				this.state = 3705;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fromClause(): FromClauseContext {
		let localctx: FromClauseContext = new FromClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 606, HiveParser.RULE_fromClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3706;
			this.match(HiveParser.KW_FROM);
			this.state = 3707;
			this.fromSource();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public fromSource(): FromSourceContext {
		let localctx: FromSourceContext = new FromSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 608, HiveParser.RULE_fromSource);
		let _la: number;
		try {
			this.state = 3718;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 348:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3709;
				this.uniqueJoinToken();
				this.state = 3710;
				this.uniqueJoinSource();
				this.state = 3713;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3711;
					this.match(HiveParser.COMMA);
					this.state = 3712;
					this.uniqueJoinSource();
					}
					}
					this.state = 3715;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la===384);
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 8:
			case 10:
			case 15:
			case 18:
			case 19:
			case 20:
			case 22:
			case 23:
			case 24:
			case 30:
			case 31:
			case 33:
			case 34:
			case 37:
			case 38:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 46:
			case 47:
			case 49:
			case 50:
			case 52:
			case 53:
			case 56:
			case 57:
			case 59:
			case 66:
			case 68:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 78:
			case 80:
			case 81:
			case 82:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 90:
			case 91:
			case 93:
			case 94:
			case 95:
			case 97:
			case 99:
			case 100:
			case 102:
			case 104:
			case 105:
			case 106:
			case 109:
			case 110:
			case 111:
			case 113:
			case 114:
			case 115:
			case 116:
			case 122:
			case 123:
			case 124:
			case 125:
			case 132:
			case 133:
			case 137:
			case 142:
			case 143:
			case 144:
			case 146:
			case 149:
			case 150:
			case 152:
			case 153:
			case 154:
			case 161:
			case 162:
			case 163:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 175:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 187:
			case 188:
			case 189:
			case 191:
			case 192:
			case 193:
			case 194:
			case 196:
			case 198:
			case 199:
			case 201:
			case 202:
			case 204:
			case 205:
			case 207:
			case 208:
			case 210:
			case 212:
			case 213:
			case 216:
			case 217:
			case 222:
			case 223:
			case 225:
			case 226:
			case 228:
			case 229:
			case 230:
			case 233:
			case 234:
			case 235:
			case 236:
			case 242:
			case 244:
			case 245:
			case 247:
			case 248:
			case 249:
			case 251:
			case 252:
			case 255:
			case 256:
			case 257:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 277:
			case 278:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 289:
			case 290:
			case 291:
			case 292:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 301:
			case 303:
			case 304:
			case 305:
			case 306:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 316:
			case 317:
			case 318:
			case 319:
			case 321:
			case 322:
			case 323:
			case 328:
			case 329:
			case 331:
			case 333:
			case 334:
			case 335:
			case 338:
			case 341:
			case 342:
			case 344:
			case 346:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 355:
			case 356:
			case 357:
			case 360:
			case 361:
			case 362:
			case 364:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 373:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 386:
			case 418:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3717;
				this.joinSource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public atomjoinSource(): AtomjoinSourceContext {
		let localctx: AtomjoinSourceContext = new AtomjoinSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 610, HiveParser.RULE_atomjoinSource);
		try {
			let _alt: number;
			this.state = 3752;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 424, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3720;
				this.tableSource();
				this.state = 3724;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 420, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3721;
						this.lateralView();
						}
						}
					}
					this.state = 3726;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 420, this._ctx);
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3727;
				this.virtualTableSource();
				this.state = 3731;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 421, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3728;
						this.lateralView();
						}
						}
					}
					this.state = 3733;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 421, this._ctx);
				}
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3734;
				this.subQuerySource();
				this.state = 3738;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 422, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3735;
						this.lateralView();
						}
						}
					}
					this.state = 3740;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 422, this._ctx);
				}
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3741;
				this.partitionedTableFunction();
				this.state = 3745;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 423, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3742;
						this.lateralView();
						}
						}
					}
					this.state = 3747;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 423, this._ctx);
				}
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3748;
				this.match(HiveParser.LPAREN);
				this.state = 3749;
				this.joinSource();
				this.state = 3750;
				this.match(HiveParser.RPAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public joinSource(): JoinSourceContext {
		let localctx: JoinSourceContext = new JoinSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 612, HiveParser.RULE_joinSource);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3754;
			this.atomjoinSource();
			this.state = 3765;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===60 || ((((_la - 135)) & ~0x1F) === 0 && ((1 << (_la - 135)) & 536936449) !== 0) || _la===173 || _la===275 || _la===384) {
				{
				{
				this.state = 3755;
				this.joinToken();
				this.state = 3756;
				this.joinSourcePart();
				this.state = 3761;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 214:
					{
					this.state = 3757;
					this.match(HiveParser.KW_ON);
					this.state = 3758;
					this.expression();
					}
					break;
				case 359:
					{
					this.state = 3759;
					this.match(HiveParser.KW_USING);
					this.state = 3760;
					this.columnParenthesesList();
					}
					break;
				case -1:
				case 41:
				case 60:
				case 93:
				case 107:
				case 135:
				case 139:
				case 141:
				case 151:
				case 155:
				case 157:
				case 164:
				case 173:
				case 177:
				case 190:
				case 197:
				case 219:
				case 246:
				case 258:
				case 275:
				case 288:
				case 303:
				case 345:
				case 372:
				case 374:
				case 384:
				case 387:
					break;
				default:
					break;
				}
				}
				}
				this.state = 3767;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public joinSourcePart(): JoinSourcePartContext {
		let localctx: JoinSourcePartContext = new JoinSourcePartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 614, HiveParser.RULE_joinSourcePart);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3772;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 427, this._ctx) ) {
			case 1:
				{
				this.state = 3768;
				this.tableSource();
				}
				break;
			case 2:
				{
				this.state = 3769;
				this.virtualTableSource();
				}
				break;
			case 3:
				{
				this.state = 3770;
				this.subQuerySource();
				}
				break;
			case 4:
				{
				this.state = 3771;
				this.partitionedTableFunction();
				}
				break;
			}
			this.state = 3777;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 428, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3774;
					this.lateralView();
					}
					}
				}
				this.state = 3779;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 428, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public uniqueJoinSource(): UniqueJoinSourceContext {
		let localctx: UniqueJoinSourceContext = new UniqueJoinSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 616, HiveParser.RULE_uniqueJoinSource);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3781;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===240) {
				{
				this.state = 3780;
				this.match(HiveParser.KW_PRESERVE);
				}
			}

			this.state = 3783;
			this.uniqueJoinTableSource();
			this.state = 3784;
			this.uniqueJoinExpr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public uniqueJoinExpr(): UniqueJoinExprContext {
		let localctx: UniqueJoinExprContext = new UniqueJoinExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 618, HiveParser.RULE_uniqueJoinExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3786;
			this.match(HiveParser.LPAREN);
			this.state = 3787;
			this.expressionList();
			this.state = 3788;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public uniqueJoinToken(): UniqueJoinTokenContext {
		let localctx: UniqueJoinTokenContext = new UniqueJoinTokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 620, HiveParser.RULE_uniqueJoinToken);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3790;
			this.match(HiveParser.KW_UNIQUEJOIN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public joinToken(): JoinTokenContext {
		let localctx: JoinTokenContext = new JoinTokenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 622, HiveParser.RULE_joinToken);
		let _la: number;
		try {
			this.state = 3806;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 384:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3792;
				this.match(HiveParser.COMMA);
				}
				break;
			case 60:
			case 135:
			case 151:
			case 164:
			case 173:
			case 275:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3803;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 151:
					{
					this.state = 3793;
					this.match(HiveParser.KW_INNER);
					}
					break;
				case 60:
					{
					this.state = 3794;
					this.match(HiveParser.KW_CROSS);
					}
					break;
				case 135:
				case 275:
					{
					this.state = 3795;
					_la = this._input.LA(1);
					if(!(_la===135 || _la===275)) {
					this._errHandler.recoverInline(this);
					}
					else {
						this._errHandler.reportMatch(this);
					    this.consume();
					}
					this.state = 3797;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===221) {
						{
						this.state = 3796;
						this.match(HiveParser.KW_OUTER);
						}
					}

					}
					break;
				case 173:
					{
					this.state = 3799;
					this.match(HiveParser.KW_LEFT);
					this.state = 3801;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===12 || _la===221 || _la===289) {
						{
						this.state = 3800;
						_la = this._input.LA(1);
						if(!(_la===12 || _la===221 || _la===289)) {
						this._errHandler.recoverInline(this);
						}
						else {
							this._errHandler.reportMatch(this);
						    this.consume();
						}
						}
					}

					}
					break;
				case 164:
					break;
				default:
					break;
				}
				this.state = 3805;
				this.match(HiveParser.KW_JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public lateralView(): LateralViewContext {
		let localctx: LateralViewContext = new LateralViewContext(this, this._ctx, this.state);
		this.enterRule(localctx, 624, HiveParser.RULE_lateralView);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3865;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 443, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3808;
				this.match(HiveParser.KW_LATERAL);
				this.state = 3809;
				this.match(HiveParser.KW_VIEW);
				this.state = 3810;
				this.match(HiveParser.KW_OUTER);
				this.state = 3811;
				this.function_();
				this.state = 3812;
				this.tableAlias();
				this.state = 3822;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===17) {
					{
					this.state = 3813;
					this.match(HiveParser.KW_AS);
					this.state = 3814;
					this.id_();
					this.state = 3819;
					this._errHandler.sync(this);
					_alt = this._interp.adaptivePredict(this._input, 434, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 3815;
							this.match(HiveParser.COMMA);
							this.state = 3816;
							this.id_();
							}
							}
						}
						this.state = 3821;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 434, this._ctx);
					}
					}
				}

				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3825;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===384) {
					{
					this.state = 3824;
					this.match(HiveParser.COMMA);
					}
				}

				this.state = 3827;
				this.match(HiveParser.KW_LATERAL);
				this.state = 3863;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 367:
					{
					this.state = 3828;
					this.match(HiveParser.KW_VIEW);
					this.state = 3829;
					this.function_();
					this.state = 3830;
					this.tableAlias();
					this.state = 3840;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===17) {
						{
						this.state = 3831;
						this.match(HiveParser.KW_AS);
						this.state = 3832;
						this.id_();
						this.state = 3837;
						this._errHandler.sync(this);
						_alt = this._interp.adaptivePredict(this._input, 437, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 3833;
								this.match(HiveParser.COMMA);
								this.state = 3834;
								this.id_();
								}
								}
							}
							this.state = 3839;
							this._errHandler.sync(this);
							_alt = this._interp.adaptivePredict(this._input, 437, this._ctx);
						}
						}
					}

					}
					break;
				case 318:
					{
					this.state = 3842;
					this.match(HiveParser.KW_TABLE);
					this.state = 3843;
					this.match(HiveParser.LPAREN);
					this.state = 3844;
					this.valuesClause();
					this.state = 3845;
					this.match(HiveParser.RPAREN);
					this.state = 3847;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===17) {
						{
						this.state = 3846;
						this.match(HiveParser.KW_AS);
						}
					}

					this.state = 3849;
					this.tableAlias();
					this.state = 3861;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===386) {
						{
						this.state = 3850;
						this.match(HiveParser.LPAREN);
						this.state = 3851;
						this.id_();
						this.state = 3856;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la===384) {
							{
							{
							this.state = 3852;
							this.match(HiveParser.COMMA);
							this.state = 3853;
							this.id_();
							}
							}
							this.state = 3858;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						this.state = 3859;
						this.match(HiveParser.RPAREN);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableAlias(): TableAliasContext {
		let localctx: TableAliasContext = new TableAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 626, HiveParser.RULE_tableAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3867;
			this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableBucketSample(): TableBucketSampleContext {
		let localctx: TableBucketSampleContext = new TableBucketSampleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 628, HiveParser.RULE_tableBucketSample);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3869;
			this.match(HiveParser.KW_TABLESAMPLE);
			this.state = 3870;
			this.match(HiveParser.LPAREN);
			this.state = 3871;
			this.match(HiveParser.KW_BUCKET);
			this.state = 3872;
			localctx._numerator = this.match(HiveParser.Number);
			this.state = 3873;
			this.match(HiveParser.KW_OUT);
			this.state = 3874;
			this.match(HiveParser.KW_OF);
			this.state = 3875;
			localctx._denominator = this.match(HiveParser.Number);
			this.state = 3885;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===214) {
				{
				this.state = 3876;
				this.match(HiveParser.KW_ON);
				this.state = 3877;
				localctx._expression = this.expression();
				localctx._expr.push(localctx._expression);
				this.state = 3882;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===384) {
					{
					{
					this.state = 3878;
					this.match(HiveParser.COMMA);
					this.state = 3879;
					localctx._expression = this.expression();
					localctx._expr.push(localctx._expression);
					}
					}
					this.state = 3884;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3887;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public splitSample(): SplitSampleContext {
		let localctx: SplitSampleContext = new SplitSampleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 630, HiveParser.RULE_splitSample);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3889;
			this.match(HiveParser.KW_TABLESAMPLE);
			this.state = 3890;
			this.match(HiveParser.LPAREN);
			this.state = 3894;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 417:
				{
				this.state = 3891;
				this.match(HiveParser.Number);
				this.state = 3892;
				_la = this._input.LA(1);
				if(!(_la===231 || _la===282)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 416:
				{
				this.state = 3893;
				this.match(HiveParser.ByteLengthLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3896;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableSample(): TableSampleContext {
		let localctx: TableSampleContext = new TableSampleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 632, HiveParser.RULE_tableSample);
		try {
			this.state = 3900;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 447, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3898;
				this.tableBucketSample();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3899;
				this.splitSample();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableSource(): TableSourceContext {
		let localctx: TableSourceContext = new TableSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 634, HiveParser.RULE_tableSource);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3902;
			localctx._tabname = this.tableName();
			this.state = 3904;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===386) {
				{
				this.state = 3903;
				localctx._props = this.tableProperties();
				}
			}

			this.state = 3907;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===320) {
				{
				this.state = 3906;
				localctx._ts = this.tableSample();
				}
			}

			this.state = 3910;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===129) {
				{
				this.state = 3909;
				localctx._asOf = this.asOfClause();
				}
			}

			this.state = 3916;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 452, this._ctx) ) {
			case 1:
				{
				this.state = 3913;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===17) {
					{
					this.state = 3912;
					this.match(HiveParser.KW_AS);
					}
				}

				this.state = 3915;
				localctx._alias = this.id_();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public asOfClause(): AsOfClauseContext {
		let localctx: AsOfClauseContext = new AsOfClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 636, HiveParser.RULE_asOfClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3918;
			this.match(HiveParser.KW_FOR);
			this.state = 3928;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 316:
				{
				this.state = 3919;
				this.match(HiveParser.KW_SYSTEM_TIME);
				this.state = 3920;
				this.match(HiveParser.KW_AS);
				this.state = 3921;
				this.match(HiveParser.KW_OF);
				this.state = 3922;
				localctx._asOfTime = this.expression();
				}
				break;
			case 129:
				{
				this.state = 3923;
				this.match(HiveParser.KW_FOR);
				this.state = 3924;
				this.match(HiveParser.KW_SYSTEM_VERSION);
				this.state = 3925;
				this.match(HiveParser.KW_AS);
				this.state = 3926;
				this.match(HiveParser.KW_OF);
				this.state = 3927;
				localctx._asOfVersion = this.match(HiveParser.Number);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public uniqueJoinTableSource(): UniqueJoinTableSourceContext {
		let localctx: UniqueJoinTableSourceContext = new UniqueJoinTableSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 638, HiveParser.RULE_uniqueJoinTableSource);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3930;
			localctx._tabname = this.tableName();
			this.state = 3932;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===320) {
				{
				this.state = 3931;
				localctx._ts = this.tableSample();
				}
			}

			this.state = 3938;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252585854) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3765853219) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 3185538111) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 3675051739) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2389627001) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2078382079) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 987750079) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 1004889323) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4138967) !== 0) || _la===418) {
				{
				this.state = 3935;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===17) {
					{
					this.state = 3934;
					this.match(HiveParser.KW_AS);
					}
				}

				this.state = 3937;
				localctx._alias = this.id_();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableName(): TableNameContext {
		let localctx: TableNameContext = new TableNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 640, HiveParser.RULE_tableName);
		try {
			this.state = 3948;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 458, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3940;
				localctx._db = this.id_();
				this.state = 3941;
				this.match(HiveParser.DOT);
				this.state = 3942;
				localctx._tab = this.id_();
				this.state = 3945;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 457, this._ctx) ) {
				case 1:
					{
					this.state = 3943;
					this.match(HiveParser.DOT);
					this.state = 3944;
					localctx._meta = this.id_();
					}
					break;
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3947;
				localctx._tab = this.id_();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public viewName(): ViewNameContext {
		let localctx: ViewNameContext = new ViewNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 642, HiveParser.RULE_viewName);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3953;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 459, this._ctx) ) {
			case 1:
				{
				this.state = 3950;
				localctx._db = this.id_();
				this.state = 3951;
				this.match(HiveParser.DOT);
				}
				break;
			}
			this.state = 3955;
			localctx._view = this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public subQuerySource(): SubQuerySourceContext {
		let localctx: SubQuerySourceContext = new SubQuerySourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 644, HiveParser.RULE_subQuerySource);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3957;
			this.match(HiveParser.LPAREN);
			this.state = 3958;
			this.queryStatementExpression();
			this.state = 3959;
			this.match(HiveParser.RPAREN);
			this.state = 3961;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===17) {
				{
				this.state = 3960;
				this.match(HiveParser.KW_AS);
				}
			}

			this.state = 3963;
			this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitioningSpec(): PartitioningSpecContext {
		let localctx: PartitioningSpecContext = new PartitioningSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 646, HiveParser.RULE_partitioningSpec);
		let _la: number;
		try {
			this.state = 3976;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 227:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3965;
				this.partitionByClause();
				this.state = 3967;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===219) {
					{
					this.state = 3966;
					this.orderByClause();
					}
				}

				}
				break;
			case 219:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3969;
				this.orderByClause();
				}
				break;
			case 93:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3970;
				this.distributeByClause();
				this.state = 3972;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===303) {
					{
					this.state = 3971;
					this.sortByClause();
					}
				}

				}
				break;
			case 303:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 3974;
				this.sortByClause();
				}
				break;
			case 41:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 3975;
				this.clusterByClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionTableFunctionSource(): PartitionTableFunctionSourceContext {
		let localctx: PartitionTableFunctionSourceContext = new PartitionTableFunctionSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 648, HiveParser.RULE_partitionTableFunctionSource);
		try {
			this.state = 3981;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 464, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 3978;
				this.subQuerySource();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 3979;
				this.tableSource();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 3980;
				this.partitionedTableFunction();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionedTableFunction(): PartitionedTableFunctionContext {
		let localctx: PartitionedTableFunctionContext = new PartitionedTableFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 650, HiveParser.RULE_partitionedTableFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 3983;
			localctx._n = this.id_();
			this.state = 3984;
			this.match(HiveParser.LPAREN);
			this.state = 3985;
			this.match(HiveParser.KW_ON);
			this.state = 3986;
			localctx._ptfsrc = this.partitionTableFunctionSource();
			this.state = 3988;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===41 || _la===93 || _la===219 || _la===227 || _la===303) {
				{
				this.state = 3987;
				localctx._spec = this.partitioningSpec();
				}
			}

			this.state = 4005;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===418) {
				{
				this.state = 3990;
				this.match(HiveParser.Identifier);
				this.state = 3991;
				this.match(HiveParser.LPAREN);
				this.state = 3992;
				this.expression();
				this.state = 3993;
				this.match(HiveParser.RPAREN);
				this.state = 4002;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===384) {
					{
					{
					this.state = 3994;
					this.match(HiveParser.COMMA);
					this.state = 3995;
					this.match(HiveParser.Identifier);
					this.state = 3996;
					this.match(HiveParser.LPAREN);
					this.state = 3997;
					this.expression();
					this.state = 3998;
					this.match(HiveParser.RPAREN);
					}
					}
					this.state = 4004;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 4007;
			this.match(HiveParser.RPAREN);
			this.state = 4009;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 468, this._ctx) ) {
			case 1:
				{
				this.state = 4008;
				localctx._alias = this.id_();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whereClause(): WhereClauseContext {
		let localctx: WhereClauseContext = new WhereClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 652, HiveParser.RULE_whereClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4011;
			this.match(HiveParser.KW_WHERE);
			this.state = 4012;
			this.searchCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public searchCondition(): SearchConditionContext {
		let localctx: SearchConditionContext = new SearchConditionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 654, HiveParser.RULE_searchCondition);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4014;
			this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valuesSource(): ValuesSourceContext {
		let localctx: ValuesSourceContext = new ValuesSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 656, HiveParser.RULE_valuesSource);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4016;
			this.valuesClause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valuesClause(): ValuesClauseContext {
		let localctx: ValuesClauseContext = new ValuesClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 658, HiveParser.RULE_valuesClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4018;
			this.match(HiveParser.KW_VALUES);
			this.state = 4019;
			this.valuesTableConstructor();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valuesTableConstructor(): ValuesTableConstructorContext {
		let localctx: ValuesTableConstructorContext = new ValuesTableConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 660, HiveParser.RULE_valuesTableConstructor);
		let _la: number;
		try {
			this.state = 4037;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 471, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4021;
				this.valueRowConstructor();
				this.state = 4026;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===384) {
					{
					{
					this.state = 4022;
					this.match(HiveParser.COMMA);
					this.state = 4023;
					this.valueRowConstructor();
					}
					}
					this.state = 4028;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4029;
				this.firstValueRowConstructor();
				this.state = 4034;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===384) {
					{
					{
					this.state = 4030;
					this.match(HiveParser.COMMA);
					this.state = 4031;
					this.valueRowConstructor();
					}
					}
					this.state = 4036;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public valueRowConstructor(): ValueRowConstructorContext {
		let localctx: ValueRowConstructorContext = new ValueRowConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 662, HiveParser.RULE_valueRowConstructor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4039;
			this.expressionsInParenthesis();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public firstValueRowConstructor(): FirstValueRowConstructorContext {
		let localctx: FirstValueRowConstructorContext = new FirstValueRowConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 664, HiveParser.RULE_firstValueRowConstructor);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4041;
			this.match(HiveParser.LPAREN);
			this.state = 4042;
			this.firstExpressionsWithAlias();
			this.state = 4043;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public virtualTableSource(): VirtualTableSourceContext {
		let localctx: VirtualTableSourceContext = new VirtualTableSourceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 666, HiveParser.RULE_virtualTableSource);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4045;
			this.match(HiveParser.KW_TABLE);
			this.state = 4046;
			this.match(HiveParser.LPAREN);
			this.state = 4047;
			this.valuesClause();
			this.state = 4048;
			this.match(HiveParser.RPAREN);
			this.state = 4050;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===17) {
				{
				this.state = 4049;
				this.match(HiveParser.KW_AS);
				}
			}

			this.state = 4052;
			this.tableAlias();
			this.state = 4062;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===386) {
				{
				this.state = 4053;
				this.match(HiveParser.LPAREN);
				this.state = 4054;
				this.id_();
				this.state = 4059;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===384) {
					{
					{
					this.state = 4055;
					this.match(HiveParser.COMMA);
					this.state = 4056;
					this.id_();
					}
					}
					this.state = 4061;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 4064;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectClause(): SelectClauseContext {
		let localctx: SelectClauseContext = new SelectClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 668, HiveParser.RULE_selectClause);
		let _la: number;
		try {
			this.state = 4079;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 288:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4066;
				this.match(HiveParser.KW_SELECT);
				this.state = 4068;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===422) {
					{
					this.state = 4067;
					this.match(HiveParser.QUERY_HINT);
					}
				}

				this.state = 4076;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 1:
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
				case 7:
				case 8:
				case 10:
				case 15:
				case 16:
				case 18:
				case 19:
				case 20:
				case 22:
				case 23:
				case 24:
				case 26:
				case 27:
				case 28:
				case 30:
				case 31:
				case 33:
				case 34:
				case 35:
				case 36:
				case 37:
				case 38:
				case 40:
				case 41:
				case 42:
				case 43:
				case 44:
				case 46:
				case 47:
				case 49:
				case 50:
				case 52:
				case 53:
				case 56:
				case 57:
				case 59:
				case 63:
				case 64:
				case 66:
				case 68:
				case 71:
				case 72:
				case 73:
				case 74:
				case 75:
				case 76:
				case 78:
				case 80:
				case 81:
				case 82:
				case 84:
				case 85:
				case 86:
				case 88:
				case 89:
				case 90:
				case 91:
				case 92:
				case 93:
				case 94:
				case 95:
				case 96:
				case 97:
				case 99:
				case 100:
				case 102:
				case 104:
				case 105:
				case 106:
				case 109:
				case 110:
				case 111:
				case 112:
				case 113:
				case 114:
				case 115:
				case 116:
				case 119:
				case 120:
				case 122:
				case 123:
				case 124:
				case 125:
				case 126:
				case 127:
				case 132:
				case 133:
				case 137:
				case 140:
				case 142:
				case 143:
				case 144:
				case 145:
				case 146:
				case 149:
				case 150:
				case 152:
				case 153:
				case 154:
				case 156:
				case 158:
				case 161:
				case 162:
				case 163:
				case 165:
				case 166:
				case 167:
				case 168:
				case 169:
				case 170:
				case 175:
				case 177:
				case 178:
				case 179:
				case 181:
				case 182:
				case 183:
				case 184:
				case 185:
				case 187:
				case 188:
				case 189:
				case 190:
				case 191:
				case 192:
				case 193:
				case 194:
				case 196:
				case 198:
				case 199:
				case 201:
				case 202:
				case 204:
				case 205:
				case 206:
				case 207:
				case 208:
				case 209:
				case 210:
				case 212:
				case 213:
				case 216:
				case 217:
				case 222:
				case 223:
				case 225:
				case 226:
				case 228:
				case 229:
				case 230:
				case 233:
				case 234:
				case 235:
				case 236:
				case 242:
				case 244:
				case 245:
				case 247:
				case 248:
				case 249:
				case 251:
				case 252:
				case 254:
				case 255:
				case 256:
				case 257:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 271:
				case 272:
				case 274:
				case 277:
				case 278:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 289:
				case 290:
				case 291:
				case 292:
				case 294:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 303:
				case 304:
				case 305:
				case 306:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 316:
				case 317:
				case 319:
				case 321:
				case 322:
				case 323:
				case 326:
				case 327:
				case 328:
				case 329:
				case 331:
				case 333:
				case 334:
				case 335:
				case 338:
				case 339:
				case 341:
				case 342:
				case 344:
				case 346:
				case 349:
				case 350:
				case 351:
				case 352:
				case 353:
				case 355:
				case 356:
				case 357:
				case 360:
				case 361:
				case 362:
				case 364:
				case 366:
				case 367:
				case 368:
				case 369:
				case 370:
				case 373:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 386:
				case 400:
				case 401:
				case 402:
				case 406:
				case 410:
				case 412:
				case 414:
				case 415:
				case 417:
				case 418:
				case 419:
					{
					this.state = 4071;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===7 || _la===92) {
						{
						this.state = 4070;
						this.all_distinct();
						}
					}

					this.state = 4073;
					this.selectList();
					}
					break;
				case 336:
					{
					this.state = 4074;
					this.match(HiveParser.KW_TRANSFORM);
					this.state = 4075;
					this.selectTrfmClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 190:
			case 258:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4078;
				this.trfmClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public all_distinct(): All_distinctContext {
		let localctx: All_distinctContext = new All_distinctContext(this, this._ctx, this.state);
		this.enterRule(localctx, 670, HiveParser.RULE_all_distinct);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4081;
			_la = this._input.LA(1);
			if(!(_la===7 || _la===92)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectList(): SelectListContext {
		let localctx: SelectListContext = new SelectListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 672, HiveParser.RULE_selectList);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4083;
			this.selectItem();
			this.state = 4088;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 479, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 4084;
					this.match(HiveParser.COMMA);
					this.state = 4085;
					this.selectItem();
					}
					}
				}
				this.state = 4090;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 479, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectTrfmClause(): SelectTrfmClauseContext {
		let localctx: SelectTrfmClauseContext = new SelectTrfmClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 674, HiveParser.RULE_selectTrfmClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4091;
			this.match(HiveParser.LPAREN);
			this.state = 4092;
			this.selectExpressionList();
			this.state = 4093;
			this.match(HiveParser.RPAREN);
			this.state = 4094;
			this.rowFormat();
			this.state = 4095;
			this.recordWriter();
			this.state = 4096;
			this.match(HiveParser.KW_USING);
			this.state = 4097;
			this.match(HiveParser.StringLiteral);
			this.state = 4110;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===17) {
				{
				this.state = 4098;
				this.match(HiveParser.KW_AS);
				this.state = 4108;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 481, this._ctx) ) {
				case 1:
					{
					this.state = 4099;
					this.match(HiveParser.LPAREN);
					this.state = 4102;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 480, this._ctx) ) {
					case 1:
						{
						this.state = 4100;
						this.aliasList();
						}
						break;
					case 2:
						{
						this.state = 4101;
						this.columnNameTypeList();
						}
						break;
					}
					this.state = 4104;
					this.match(HiveParser.RPAREN);
					}
					break;
				case 2:
					{
					this.state = 4106;
					this.aliasList();
					}
					break;
				case 3:
					{
					this.state = 4107;
					this.columnNameTypeList();
					}
					break;
				}
				}
			}

			this.state = 4112;
			this.rowFormat();
			this.state = 4113;
			this.recordReader();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectItem(): SelectItemContext {
		let localctx: SelectItemContext = new SelectItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 676, HiveParser.RULE_selectItem);
		let _la: number;
		try {
			this.state = 4135;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 486, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4115;
				this.tableAllColumns();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				{
				this.state = 4116;
				this.expression();
				this.state = 4133;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 485, this._ctx) ) {
				case 1:
					{
					this.state = 4118;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===17) {
						{
						this.state = 4117;
						this.match(HiveParser.KW_AS);
						}
					}

					this.state = 4120;
					this.id_();
					}
					break;
				case 2:
					{
					this.state = 4121;
					this.match(HiveParser.KW_AS);
					this.state = 4122;
					this.match(HiveParser.LPAREN);
					this.state = 4123;
					this.id_();
					this.state = 4128;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la===384) {
						{
						{
						this.state = 4124;
						this.match(HiveParser.COMMA);
						this.state = 4125;
						this.id_();
						}
						}
						this.state = 4130;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 4131;
					this.match(HiveParser.RPAREN);
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trfmClause(): TrfmClauseContext {
		let localctx: TrfmClauseContext = new TrfmClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 678, HiveParser.RULE_trfmClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4137;
			_la = this._input.LA(1);
			if(!(_la===190 || _la===258)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 4138;
			this.selectExpressionList();
			this.state = 4139;
			this.rowFormat();
			this.state = 4140;
			this.recordWriter();
			this.state = 4141;
			this.match(HiveParser.KW_USING);
			this.state = 4142;
			this.match(HiveParser.StringLiteral);
			this.state = 4155;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===17) {
				{
				this.state = 4143;
				this.match(HiveParser.KW_AS);
				this.state = 4153;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 488, this._ctx) ) {
				case 1:
					{
					this.state = 4144;
					this.match(HiveParser.LPAREN);
					this.state = 4147;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 487, this._ctx) ) {
					case 1:
						{
						this.state = 4145;
						this.aliasList();
						}
						break;
					case 2:
						{
						this.state = 4146;
						this.columnNameTypeList();
						}
						break;
					}
					this.state = 4149;
					this.match(HiveParser.RPAREN);
					}
					break;
				case 2:
					{
					this.state = 4151;
					this.aliasList();
					}
					break;
				case 3:
					{
					this.state = 4152;
					this.columnNameTypeList();
					}
					break;
				}
				}
			}

			this.state = 4157;
			this.rowFormat();
			this.state = 4158;
			this.recordReader();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectExpression(): SelectExpressionContext {
		let localctx: SelectExpressionContext = new SelectExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 680, HiveParser.RULE_selectExpression);
		try {
			this.state = 4162;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 490, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4160;
				this.tableAllColumns();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4161;
				this.expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public selectExpressionList(): SelectExpressionListContext {
		let localctx: SelectExpressionListContext = new SelectExpressionListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 682, HiveParser.RULE_selectExpressionList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4164;
			this.selectExpression();
			this.state = 4169;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4165;
				this.match(HiveParser.COMMA);
				this.state = 4166;
				this.selectExpression();
				}
				}
				this.state = 4171;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public window_clause(): Window_clauseContext {
		let localctx: Window_clauseContext = new Window_clauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 684, HiveParser.RULE_window_clause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4172;
			this.match(HiveParser.KW_WINDOW);
			this.state = 4173;
			this.window_defn();
			this.state = 4178;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4174;
				this.match(HiveParser.COMMA);
				this.state = 4175;
				this.window_defn();
				}
				}
				this.state = 4180;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public window_defn(): Window_defnContext {
		let localctx: Window_defnContext = new Window_defnContext(this, this._ctx, this.state);
		this.enterRule(localctx, 686, HiveParser.RULE_window_defn);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4181;
			this.id_();
			this.state = 4182;
			this.match(HiveParser.KW_AS);
			this.state = 4183;
			this.window_specification();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public window_specification(): Window_specificationContext {
		let localctx: Window_specificationContext = new Window_specificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 688, HiveParser.RULE_window_specification);
		let _la: number;
		try {
			this.state = 4197;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 8:
			case 10:
			case 15:
			case 18:
			case 19:
			case 20:
			case 22:
			case 23:
			case 24:
			case 30:
			case 31:
			case 33:
			case 34:
			case 37:
			case 38:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 46:
			case 47:
			case 49:
			case 50:
			case 52:
			case 53:
			case 56:
			case 57:
			case 59:
			case 66:
			case 68:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 78:
			case 80:
			case 81:
			case 82:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 90:
			case 91:
			case 93:
			case 94:
			case 95:
			case 97:
			case 99:
			case 100:
			case 102:
			case 104:
			case 105:
			case 106:
			case 109:
			case 110:
			case 111:
			case 113:
			case 114:
			case 115:
			case 116:
			case 122:
			case 123:
			case 124:
			case 125:
			case 132:
			case 133:
			case 137:
			case 142:
			case 143:
			case 144:
			case 146:
			case 149:
			case 150:
			case 152:
			case 153:
			case 154:
			case 161:
			case 162:
			case 163:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 175:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 187:
			case 188:
			case 189:
			case 191:
			case 192:
			case 193:
			case 194:
			case 196:
			case 198:
			case 199:
			case 201:
			case 202:
			case 204:
			case 205:
			case 207:
			case 208:
			case 210:
			case 212:
			case 213:
			case 216:
			case 217:
			case 222:
			case 223:
			case 225:
			case 226:
			case 228:
			case 229:
			case 230:
			case 233:
			case 234:
			case 235:
			case 236:
			case 242:
			case 244:
			case 245:
			case 247:
			case 248:
			case 249:
			case 251:
			case 252:
			case 255:
			case 256:
			case 257:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 277:
			case 278:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 289:
			case 290:
			case 291:
			case 292:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 301:
			case 303:
			case 304:
			case 305:
			case 306:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 316:
			case 317:
			case 319:
			case 321:
			case 322:
			case 323:
			case 328:
			case 329:
			case 331:
			case 333:
			case 334:
			case 335:
			case 338:
			case 341:
			case 342:
			case 344:
			case 346:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 355:
			case 356:
			case 357:
			case 360:
			case 361:
			case 362:
			case 364:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 373:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 418:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4185;
				this.id_();
				}
				break;
			case 386:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4186;
				this.match(HiveParser.LPAREN);
				this.state = 4188;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 493, this._ctx) ) {
				case 1:
					{
					this.state = 4187;
					this.id_();
					}
					break;
				}
				this.state = 4191;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===41 || _la===93 || _la===219 || _la===227 || _la===303) {
					{
					this.state = 4190;
					this.partitioningSpec();
					}
				}

				this.state = 4194;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===250 || _la===282) {
					{
					this.state = 4193;
					this.window_frame();
					}
				}

				this.state = 4196;
				this.match(HiveParser.RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public window_frame(): Window_frameContext {
		let localctx: Window_frameContext = new Window_frameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 690, HiveParser.RULE_window_frame);
		try {
			this.state = 4201;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 282:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4199;
				this.window_range_expression();
				}
				break;
			case 250:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4200;
				this.window_value_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public window_range_expression(): Window_range_expressionContext {
		let localctx: Window_range_expressionContext = new Window_range_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 692, HiveParser.RULE_window_range_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4203;
			this.match(HiveParser.KW_ROWS);
			this.state = 4210;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 62:
			case 343:
			case 417:
				{
				this.state = 4204;
				this.window_frame_start_boundary();
				}
				break;
			case 25:
				{
				this.state = 4205;
				this.match(HiveParser.KW_BETWEEN);
				this.state = 4206;
				this.window_frame_boundary();
				this.state = 4207;
				this.match(HiveParser.KW_AND);
				this.state = 4208;
				this.window_frame_boundary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public window_value_expression(): Window_value_expressionContext {
		let localctx: Window_value_expressionContext = new Window_value_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 694, HiveParser.RULE_window_value_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4212;
			this.match(HiveParser.KW_RANGE);
			this.state = 4219;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 62:
			case 343:
			case 417:
				{
				this.state = 4213;
				this.window_frame_start_boundary();
				}
				break;
			case 25:
				{
				this.state = 4214;
				this.match(HiveParser.KW_BETWEEN);
				this.state = 4215;
				this.window_frame_boundary();
				this.state = 4216;
				this.match(HiveParser.KW_AND);
				this.state = 4217;
				this.window_frame_boundary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public window_frame_start_boundary(): Window_frame_start_boundaryContext {
		let localctx: Window_frame_start_boundaryContext = new Window_frame_start_boundaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 696, HiveParser.RULE_window_frame_start_boundary);
		try {
			this.state = 4227;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 343:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4221;
				this.match(HiveParser.KW_UNBOUNDED);
				this.state = 4222;
				this.match(HiveParser.KW_PRECEDING);
				}
				break;
			case 62:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4223;
				this.match(HiveParser.KW_CURRENT);
				this.state = 4224;
				this.match(HiveParser.KW_ROW);
				}
				break;
			case 417:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4225;
				this.match(HiveParser.Number);
				this.state = 4226;
				this.match(HiveParser.KW_PRECEDING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public window_frame_boundary(): Window_frame_boundaryContext {
		let localctx: Window_frame_boundaryContext = new Window_frame_boundaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 698, HiveParser.RULE_window_frame_boundary);
		let _la: number;
		try {
			this.state = 4233;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 343:
			case 417:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4229;
				_la = this._input.LA(1);
				if(!(_la===343 || _la===417)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 4230;
				_la = this._input.LA(1);
				if(!(_la===128 || _la===237)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				}
				break;
			case 62:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4231;
				this.match(HiveParser.KW_CURRENT);
				this.state = 4232;
				this.match(HiveParser.KW_ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupByClause(): GroupByClauseContext {
		let localctx: GroupByClauseContext = new GroupByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 700, HiveParser.RULE_groupByClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4235;
			this.match(HiveParser.KW_GROUP);
			this.state = 4236;
			this.match(HiveParser.KW_BY);
			this.state = 4237;
			this.groupby_expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupby_expression(): Groupby_expressionContext {
		let localctx: Groupby_expressionContext = new Groupby_expressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 702, HiveParser.RULE_groupby_expression);
		try {
			this.state = 4242;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 502, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4239;
				this.rollupStandard();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4240;
				this.rollupOldSyntax();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4241;
				this.groupByEmpty();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupByEmpty(): GroupByEmptyContext {
		let localctx: GroupByEmptyContext = new GroupByEmptyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 704, HiveParser.RULE_groupByEmpty);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4244;
			this.match(HiveParser.LPAREN);
			this.state = 4245;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rollupStandard(): RollupStandardContext {
		let localctx: RollupStandardContext = new RollupStandardContext(this, this._ctx, this.state);
		this.enterRule(localctx, 706, HiveParser.RULE_rollupStandard);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4249;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 280:
				{
				this.state = 4247;
				localctx._rollup = this.match(HiveParser.KW_ROLLUP);
				}
				break;
			case 61:
				{
				this.state = 4248;
				localctx._cube = this.match(HiveParser.KW_CUBE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4251;
			this.match(HiveParser.LPAREN);
			this.state = 4252;
			this.expression();
			this.state = 4257;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4253;
				this.match(HiveParser.COMMA);
				this.state = 4254;
				this.expression();
				}
				}
				this.state = 4259;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4260;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rollupOldSyntax(): RollupOldSyntaxContext {
		let localctx: RollupOldSyntaxContext = new RollupOldSyntaxContext(this, this._ctx, this.state);
		this.enterRule(localctx, 708, HiveParser.RULE_rollupOldSyntax);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4262;
			localctx._expr = this.expressionsNotInParenthesis();
			this.state = 4267;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 505, this._ctx) ) {
			case 1:
				{
				this.state = 4263;
				localctx._rollup = this.match(HiveParser.KW_WITH);
				this.state = 4264;
				this.match(HiveParser.KW_ROLLUP);
				}
				break;
			case 2:
				{
				this.state = 4265;
				localctx._cube = this.match(HiveParser.KW_WITH);
				this.state = 4266;
				this.match(HiveParser.KW_CUBE);
				}
				break;
			}
			this.state = 4282;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===140) {
				{
				this.state = 4269;
				localctx._sets = this.match(HiveParser.KW_GROUPING);
				this.state = 4270;
				this.match(HiveParser.KW_SETS);
				this.state = 4271;
				this.match(HiveParser.LPAREN);
				this.state = 4272;
				this.groupingSetExpression();
				this.state = 4277;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la===384) {
					{
					{
					this.state = 4273;
					this.match(HiveParser.COMMA);
					this.state = 4274;
					this.groupingSetExpression();
					}
					}
					this.state = 4279;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 4280;
				this.match(HiveParser.RPAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupingSetExpression(): GroupingSetExpressionContext {
		let localctx: GroupingSetExpressionContext = new GroupingSetExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 710, HiveParser.RULE_groupingSetExpression);
		try {
			this.state = 4286;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 508, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4284;
				this.groupingSetExpressionMultiple();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4285;
				this.groupingExpressionSingle();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupingSetExpressionMultiple(): GroupingSetExpressionMultipleContext {
		let localctx: GroupingSetExpressionMultipleContext = new GroupingSetExpressionMultipleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 712, HiveParser.RULE_groupingSetExpressionMultiple);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4288;
			this.match(HiveParser.LPAREN);
			this.state = 4290;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3722282366) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3315298239) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 4225619941) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 531889387) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3849747747) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 3219092543) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 3675054043) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2406404217) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2078382079) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 987750143) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4019565487) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 71247831) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & 971843) !== 0)) {
				{
				this.state = 4289;
				this.expression();
				}
			}

			this.state = 4296;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4292;
				this.match(HiveParser.COMMA);
				this.state = 4293;
				this.expression();
				}
				}
				this.state = 4298;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4299;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public groupingExpressionSingle(): GroupingExpressionSingleContext {
		let localctx: GroupingExpressionSingleContext = new GroupingExpressionSingleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 714, HiveParser.RULE_groupingExpressionSingle);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4301;
			this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public havingClause(): HavingClauseContext {
		let localctx: HavingClauseContext = new HavingClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 716, HiveParser.RULE_havingClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4303;
			this.match(HiveParser.KW_HAVING);
			this.state = 4304;
			this.havingCondition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public qualifyClause(): QualifyClauseContext {
		let localctx: QualifyClauseContext = new QualifyClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 718, HiveParser.RULE_qualifyClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4306;
			this.match(HiveParser.KW_QUALIFY);
			this.state = 4307;
			this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public havingCondition(): HavingConditionContext {
		let localctx: HavingConditionContext = new HavingConditionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 720, HiveParser.RULE_havingCondition);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4309;
			this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expressionsInParenthesis(): ExpressionsInParenthesisContext {
		let localctx: ExpressionsInParenthesisContext = new ExpressionsInParenthesisContext(this, this._ctx, this.state);
		this.enterRule(localctx, 722, HiveParser.RULE_expressionsInParenthesis);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4311;
			this.match(HiveParser.LPAREN);
			this.state = 4312;
			this.expressionsNotInParenthesis();
			this.state = 4313;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
		let localctx: ExpressionsNotInParenthesisContext = new ExpressionsNotInParenthesisContext(this, this._ctx, this.state);
		this.enterRule(localctx, 724, HiveParser.RULE_expressionsNotInParenthesis);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4315;
			localctx._first = this.expressionOrDefault();
			this.state = 4317;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===384) {
				{
				this.state = 4316;
				localctx._more = this.expressionPart();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expressionPart(): ExpressionPartContext {
		let localctx: ExpressionPartContext = new ExpressionPartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 726, HiveParser.RULE_expressionPart);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4321;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4319;
				this.match(HiveParser.COMMA);
				this.state = 4320;
				this.expressionOrDefault();
				}
				}
				this.state = 4323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===384);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expressionOrDefault(): ExpressionOrDefaultContext {
		let localctx: ExpressionOrDefaultContext = new ExpressionOrDefaultContext(this, this._ctx, this.state);
		this.enterRule(localctx, 728, HiveParser.RULE_expressionOrDefault);
		try {
			this.state = 4327;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 513, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4325;
				this.defaultValue();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4326;
				this.expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public firstExpressionsWithAlias(): FirstExpressionsWithAliasContext {
		let localctx: FirstExpressionsWithAliasContext = new FirstExpressionsWithAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 730, HiveParser.RULE_firstExpressionsWithAlias);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4329;
			localctx._first = this.expression();
			this.state = 4331;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===17) {
				{
				this.state = 4330;
				this.match(HiveParser.KW_AS);
				}
			}

			this.state = 4334;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3765853219) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 3185538111) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 3675051739) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2389627001) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2078382079) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 987750079) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 1004889323) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4138967) !== 0) || _la===418) {
				{
				this.state = 4333;
				localctx._colAlias = this.id_();
				}
			}

			this.state = 4340;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4336;
				this.match(HiveParser.COMMA);
				this.state = 4337;
				this.expressionWithAlias();
				}
				}
				this.state = 4342;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expressionWithAlias(): ExpressionWithAliasContext {
		let localctx: ExpressionWithAliasContext = new ExpressionWithAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 732, HiveParser.RULE_expressionWithAlias);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4343;
			this.expression();
			this.state = 4345;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===17) {
				{
				this.state = 4344;
				this.match(HiveParser.KW_AS);
				}
			}

			this.state = 4348;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3765853219) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 3185538111) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 3675051739) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2389627001) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2078382079) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 987750079) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 1004889323) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4138967) !== 0) || _la===418) {
				{
				this.state = 4347;
				localctx._alias = this.id_();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expressions(): ExpressionsContext {
		let localctx: ExpressionsContext = new ExpressionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 734, HiveParser.RULE_expressions);
		try {
			this.state = 4352;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 519, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4350;
				this.expressionsInParenthesis();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4351;
				this.expressionsNotInParenthesis();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnRefOrderInParenthesis(): ColumnRefOrderInParenthesisContext {
		let localctx: ColumnRefOrderInParenthesisContext = new ColumnRefOrderInParenthesisContext(this, this._ctx, this.state);
		this.enterRule(localctx, 736, HiveParser.RULE_columnRefOrderInParenthesis);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4354;
			this.match(HiveParser.LPAREN);
			this.state = 4355;
			this.columnRefOrder();
			this.state = 4360;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4356;
				this.match(HiveParser.COMMA);
				this.state = 4357;
				this.columnRefOrder();
				}
				}
				this.state = 4362;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4363;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public columnRefOrderNotInParenthesis(): ColumnRefOrderNotInParenthesisContext {
		let localctx: ColumnRefOrderNotInParenthesisContext = new ColumnRefOrderNotInParenthesisContext(this, this._ctx, this.state);
		this.enterRule(localctx, 738, HiveParser.RULE_columnRefOrderNotInParenthesis);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4365;
			this.columnRefOrder();
			this.state = 4370;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4366;
				this.match(HiveParser.COMMA);
				this.state = 4367;
				this.columnRefOrder();
				}
				}
				this.state = 4372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public orderByClause(): OrderByClauseContext {
		let localctx: OrderByClauseContext = new OrderByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 740, HiveParser.RULE_orderByClause);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4373;
			this.match(HiveParser.KW_ORDER);
			this.state = 4374;
			this.match(HiveParser.KW_BY);
			this.state = 4375;
			this.columnRefOrder();
			this.state = 4380;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4376;
				this.match(HiveParser.COMMA);
				this.state = 4377;
				this.columnRefOrder();
				}
				}
				this.state = 4382;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public clusterByClause(): ClusterByClauseContext {
		let localctx: ClusterByClauseContext = new ClusterByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 742, HiveParser.RULE_clusterByClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4383;
			this.match(HiveParser.KW_CLUSTER);
			this.state = 4384;
			this.match(HiveParser.KW_BY);
			this.state = 4385;
			this.expressions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionByClause(): PartitionByClauseContext {
		let localctx: PartitionByClauseContext = new PartitionByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 744, HiveParser.RULE_partitionByClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4387;
			this.match(HiveParser.KW_PARTITION);
			this.state = 4388;
			this.match(HiveParser.KW_BY);
			this.state = 4389;
			this.expressions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public distributeByClause(): DistributeByClauseContext {
		let localctx: DistributeByClauseContext = new DistributeByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 746, HiveParser.RULE_distributeByClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4391;
			this.match(HiveParser.KW_DISTRIBUTE);
			this.state = 4392;
			this.match(HiveParser.KW_BY);
			this.state = 4393;
			this.expressions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sortByClause(): SortByClauseContext {
		let localctx: SortByClauseContext = new SortByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 748, HiveParser.RULE_sortByClause);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4395;
			this.match(HiveParser.KW_SORT);
			this.state = 4396;
			this.match(HiveParser.KW_BY);
			this.state = 4399;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 523, this._ctx) ) {
			case 1:
				{
				this.state = 4397;
				this.columnRefOrderInParenthesis();
				}
				break;
			case 2:
				{
				this.state = 4398;
				this.columnRefOrderNotInParenthesis();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public trimFunction(): TrimFunctionContext {
		let localctx: TrimFunctionContext = new TrimFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 750, HiveParser.RULE_trimFunction);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4401;
			this.match(HiveParser.KW_TRIM);
			this.state = 4402;
			this.match(HiveParser.LPAREN);
			this.state = 4406;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 172:
				{
				this.state = 4403;
				localctx._leading = this.match(HiveParser.KW_LEADING);
				}
				break;
			case 332:
				{
				this.state = 4404;
				localctx._trailing = this.match(HiveParser.KW_TRAILING);
				}
				break;
			case 29:
				{
				this.state = 4405;
				this.match(HiveParser.KW_BOTH);
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 8:
			case 10:
			case 15:
			case 16:
			case 18:
			case 19:
			case 20:
			case 22:
			case 23:
			case 24:
			case 26:
			case 27:
			case 28:
			case 30:
			case 31:
			case 33:
			case 34:
			case 35:
			case 36:
			case 37:
			case 38:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 46:
			case 47:
			case 49:
			case 50:
			case 52:
			case 53:
			case 56:
			case 57:
			case 59:
			case 63:
			case 64:
			case 66:
			case 68:
			case 71:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 78:
			case 80:
			case 81:
			case 82:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 90:
			case 91:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 99:
			case 100:
			case 102:
			case 104:
			case 105:
			case 106:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 119:
			case 120:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 132:
			case 133:
			case 134:
			case 137:
			case 140:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 149:
			case 150:
			case 152:
			case 153:
			case 154:
			case 156:
			case 158:
			case 161:
			case 162:
			case 163:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 175:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 187:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 196:
			case 198:
			case 199:
			case 201:
			case 202:
			case 204:
			case 205:
			case 206:
			case 207:
			case 208:
			case 209:
			case 210:
			case 212:
			case 213:
			case 216:
			case 217:
			case 222:
			case 223:
			case 225:
			case 226:
			case 228:
			case 229:
			case 230:
			case 233:
			case 234:
			case 235:
			case 236:
			case 242:
			case 244:
			case 245:
			case 247:
			case 248:
			case 249:
			case 251:
			case 252:
			case 254:
			case 255:
			case 256:
			case 257:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 277:
			case 278:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 289:
			case 290:
			case 291:
			case 292:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 303:
			case 304:
			case 305:
			case 306:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 316:
			case 317:
			case 319:
			case 321:
			case 322:
			case 323:
			case 326:
			case 327:
			case 328:
			case 329:
			case 331:
			case 333:
			case 334:
			case 335:
			case 338:
			case 339:
			case 341:
			case 342:
			case 344:
			case 346:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 355:
			case 356:
			case 357:
			case 360:
			case 361:
			case 362:
			case 364:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 373:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 386:
			case 400:
			case 401:
			case 402:
			case 406:
			case 410:
			case 412:
			case 414:
			case 415:
			case 417:
			case 418:
			case 419:
				break;
			default:
				break;
			}
			this.state = 4409;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3722282366) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 3315298239) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 4225619941) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 531889387) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3849747747) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 3219092543) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 3675054043) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2406404217) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2078382079) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 987750143) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4019565487) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 71247831) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & 971847) !== 0)) {
				{
				this.state = 4408;
				localctx._trim_characters = this.selectExpression();
				}
			}

			this.state = 4411;
			this.match(HiveParser.KW_FROM);
			this.state = 4412;
			localctx._str = this.selectExpression();
			this.state = 4413;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public function_(): Function_Context {
		let localctx: Function_Context = new Function_Context(this, this._ctx, this.state);
		this.enterRule(localctx, 752, HiveParser.RULE_function_);
		let _la: number;
		try {
			this.state = 4455;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 532, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4415;
				this.trimFunction();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4416;
				this.functionName();
				this.state = 4417;
				this.match(HiveParser.LPAREN);
				this.state = 4432;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 529, this._ctx) ) {
				case 1:
					{
					this.state = 4418;
					localctx._star = this.match(HiveParser.STAR);
					}
					break;
				case 2:
					{
					this.state = 4420;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===7 || _la===92) {
						{
						this.state = 4419;
						localctx._dist = this.all_distinct();
						}
					}

					this.state = 4430;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 528, this._ctx) ) {
					case 1:
						{
						this.state = 4422;
						this.selectExpression();
						this.state = 4427;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						while (_la===384) {
							{
							{
							this.state = 4423;
							this.match(HiveParser.COMMA);
							this.state = 4424;
							this.selectExpression();
							}
							}
							this.state = 4429;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
						}
						}
						break;
					}
					}
					break;
				}
				this.state = 4453;
				this._errHandler.sync(this);
				switch ( this._interp.adaptivePredict(this._input, 531, this._ctx) ) {
				case 1:
					{
					this.state = 4434;
					this.match(HiveParser.RPAREN);
					this.state = 4435;
					localctx._within = this.match(HiveParser.KW_WITHIN);
					this.state = 4436;
					this.match(HiveParser.KW_GROUP);
					this.state = 4437;
					this.match(HiveParser.LPAREN);
					this.state = 4438;
					localctx._ordBy = this.orderByClause();
					this.state = 4439;
					this.match(HiveParser.RPAREN);
					}
					break;
				case 2:
					{
					this.state = 4441;
					this.match(HiveParser.RPAREN);
					this.state = 4443;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la===146 || _la===271) {
						{
						this.state = 4442;
						localctx._nt = this.null_treatment();
						}
					}

					this.state = 4445;
					this.match(HiveParser.KW_OVER);
					this.state = 4446;
					localctx._ws = this.window_specification();
					}
					break;
				case 3:
					{
					this.state = 4447;
					localctx._nt = this.null_treatment();
					this.state = 4448;
					this.match(HiveParser.RPAREN);
					this.state = 4449;
					this.match(HiveParser.KW_OVER);
					this.state = 4450;
					localctx._ws = this.window_specification();
					}
					break;
				case 4:
					{
					this.state = 4452;
					this.match(HiveParser.RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public null_treatment(): Null_treatmentContext {
		let localctx: Null_treatmentContext = new Null_treatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 754, HiveParser.RULE_null_treatment);
		try {
			this.state = 4461;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 271:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4457;
				this.match(HiveParser.KW_RESPECT);
				this.state = 4458;
				this.match(HiveParser.KW_NULLS);
				}
				break;
			case 146:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4459;
				this.match(HiveParser.KW_IGNORE);
				this.state = 4460;
				this.match(HiveParser.KW_NULLS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public functionName(): FunctionNameContext {
		let localctx: FunctionNameContext = new FunctionNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 756, HiveParser.RULE_functionName);
		try {
			this.state = 4465;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 8:
			case 10:
			case 15:
			case 18:
			case 19:
			case 20:
			case 22:
			case 23:
			case 24:
			case 30:
			case 31:
			case 33:
			case 34:
			case 37:
			case 38:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 46:
			case 47:
			case 49:
			case 50:
			case 52:
			case 53:
			case 56:
			case 57:
			case 59:
			case 66:
			case 68:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 78:
			case 80:
			case 81:
			case 82:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 90:
			case 91:
			case 93:
			case 94:
			case 95:
			case 97:
			case 99:
			case 100:
			case 102:
			case 104:
			case 105:
			case 106:
			case 109:
			case 110:
			case 111:
			case 113:
			case 114:
			case 115:
			case 116:
			case 122:
			case 123:
			case 124:
			case 125:
			case 132:
			case 133:
			case 137:
			case 142:
			case 143:
			case 144:
			case 146:
			case 149:
			case 150:
			case 152:
			case 153:
			case 154:
			case 161:
			case 162:
			case 163:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 175:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 187:
			case 188:
			case 189:
			case 191:
			case 192:
			case 193:
			case 194:
			case 196:
			case 198:
			case 199:
			case 201:
			case 202:
			case 204:
			case 205:
			case 207:
			case 208:
			case 210:
			case 212:
			case 213:
			case 216:
			case 217:
			case 222:
			case 223:
			case 225:
			case 226:
			case 228:
			case 229:
			case 230:
			case 233:
			case 234:
			case 235:
			case 236:
			case 242:
			case 244:
			case 245:
			case 247:
			case 248:
			case 249:
			case 251:
			case 252:
			case 255:
			case 256:
			case 257:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 277:
			case 278:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 289:
			case 290:
			case 291:
			case 292:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 301:
			case 303:
			case 304:
			case 305:
			case 306:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 316:
			case 317:
			case 319:
			case 321:
			case 322:
			case 323:
			case 328:
			case 329:
			case 331:
			case 333:
			case 334:
			case 335:
			case 338:
			case 341:
			case 342:
			case 344:
			case 346:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 355:
			case 356:
			case 357:
			case 360:
			case 361:
			case 362:
			case 364:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 373:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 418:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4463;
				this.functionIdentifier();
				}
				break;
			case 16:
			case 26:
			case 27:
			case 28:
			case 63:
			case 64:
			case 71:
			case 96:
			case 126:
			case 140:
			case 145:
			case 156:
			case 190:
			case 254:
			case 300:
			case 326:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4464;
				this.sql11ReservedKeywordsUsedAsFunctionName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public castExpression(): CastExpressionContext {
		let localctx: CastExpressionContext = new CastExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 758, HiveParser.RULE_castExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4467;
			this.match(HiveParser.KW_CAST);
			this.state = 4468;
			this.match(HiveParser.LPAREN);
			this.state = 4469;
			this.expression();
			this.state = 4470;
			this.match(HiveParser.KW_AS);
			this.state = 4471;
			localctx._toType = this.primitiveType();
			this.state = 4474;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===132) {
				{
				this.state = 4472;
				localctx._fmt = this.match(HiveParser.KW_FORMAT);
				this.state = 4473;
				this.match(HiveParser.StringLiteral);
				}
			}

			this.state = 4476;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public caseExpression(): CaseExpressionContext {
		let localctx: CaseExpressionContext = new CaseExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 760, HiveParser.RULE_caseExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4478;
			this.match(HiveParser.KW_CASE);
			this.state = 4479;
			this.expression();
			this.state = 4485;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4480;
				this.match(HiveParser.KW_WHEN);
				this.state = 4481;
				this.expression();
				this.state = 4482;
				this.match(HiveParser.KW_THEN);
				this.state = 4483;
				this.expression();
				}
				}
				this.state = 4487;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===371);
			this.state = 4491;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===101) {
				{
				this.state = 4489;
				this.match(HiveParser.KW_ELSE);
				this.state = 4490;
				this.expression();
				}
			}

			this.state = 4493;
			this.match(HiveParser.KW_END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public whenExpression(): WhenExpressionContext {
		let localctx: WhenExpressionContext = new WhenExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 762, HiveParser.RULE_whenExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4495;
			this.match(HiveParser.KW_CASE);
			this.state = 4501;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4496;
				this.match(HiveParser.KW_WHEN);
				this.state = 4497;
				this.expression();
				this.state = 4498;
				this.match(HiveParser.KW_THEN);
				this.state = 4499;
				this.expression();
				}
				}
				this.state = 4503;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===371);
			this.state = 4507;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===101) {
				{
				this.state = 4505;
				this.match(HiveParser.KW_ELSE);
				this.state = 4506;
				this.expression();
				}
			}

			this.state = 4509;
			this.match(HiveParser.KW_END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public floorExpression(): FloorExpressionContext {
		let localctx: FloorExpressionContext = new FloorExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 764, HiveParser.RULE_floorExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4511;
			this.match(HiveParser.KW_FLOOR);
			this.state = 4512;
			this.match(HiveParser.LPAREN);
			this.state = 4513;
			this.expression();
			this.state = 4516;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===330) {
				{
				this.state = 4514;
				this.match(HiveParser.KW_TO);
				this.state = 4515;
				localctx._floorUnit = this.floorDateQualifiers();
				}
			}

			this.state = 4518;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public floorDateQualifiers(): FloorDateQualifiersContext {
		let localctx: FloorDateQualifiersContext = new FloorDateQualifiersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 766, HiveParser.RULE_floorDateQualifiers);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4520;
			_la = this._input.LA(1);
			if(!(_la===73 || _la===143 || _la===198 || _la===199 || _la===247 || _la===287 || _la===370 || _la===380)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public extractExpression(): ExtractExpressionContext {
		let localctx: ExtractExpressionContext = new ExtractExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 768, HiveParser.RULE_extractExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4522;
			this.match(HiveParser.KW_EXTRACT);
			this.state = 4523;
			this.match(HiveParser.LPAREN);
			this.state = 4524;
			localctx._timeUnit = this.timeQualifiers();
			this.state = 4525;
			this.match(HiveParser.KW_FROM);
			this.state = 4526;
			this.expression();
			this.state = 4527;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timeQualifiers(): TimeQualifiersContext {
		let localctx: TimeQualifiersContext = new TimeQualifiersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 770, HiveParser.RULE_timeQualifiers);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4529;
			_la = this._input.LA(1);
			if(!(_la===73 || _la===97 || _la===143 || _la===198 || _la===199 || _la===247 || _la===287 || _la===370 || _la===380)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public constant(): ConstantContext {
		let localctx: ConstantContext = new ConstantContext(this, this._ctx, this.state);
		this.enterRule(localctx, 772, HiveParser.RULE_constant);
		try {
			this.state = 4544;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 541, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4531;
				this.intervalLiteral();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4532;
				this.match(HiveParser.Number);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4533;
				this.dateLiteral();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4534;
				this.timestampLiteral();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4535;
				this.timestampLocalTZLiteral();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4536;
				this.match(HiveParser.StringLiteral);
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4537;
				this.stringLiteralSequence();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4538;
				this.match(HiveParser.IntegralLiteral);
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 4539;
				this.match(HiveParser.NumberLiteral);
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 4540;
				this.charSetStringLiteral();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 4541;
				this.booleanValue();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 4542;
				this.match(HiveParser.KW_NULL);
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 4543;
				this.prepareStmtParam();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public prepareStmtParam(): PrepareStmtParamContext {
		let localctx: PrepareStmtParamContext = new PrepareStmtParamContext(this, this._ctx, this.state);
		this.enterRule(localctx, 774, HiveParser.RULE_prepareStmtParam);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4546;
			localctx._p = this.parameterIdx();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public parameterIdx(): ParameterIdxContext {
		let localctx: ParameterIdxContext = new ParameterIdxContext(this, this._ctx, this.state);
		this.enterRule(localctx, 776, HiveParser.RULE_parameterIdx);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4548;
			this.match(HiveParser.QUESTION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public stringLiteralSequence(): StringLiteralSequenceContext {
		let localctx: StringLiteralSequenceContext = new StringLiteralSequenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 778, HiveParser.RULE_stringLiteralSequence);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4550;
			this.match(HiveParser.StringLiteral);
			this.state = 4552;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4551;
				this.match(HiveParser.StringLiteral);
				}
				}
				this.state = 4554;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la===412);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public charSetStringLiteral(): CharSetStringLiteralContext {
		let localctx: CharSetStringLiteralContext = new CharSetStringLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 780, HiveParser.RULE_charSetStringLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4556;
			localctx._csName = this.match(HiveParser.CharSetName);
			this.state = 4557;
			localctx._csLiteral = this.match(HiveParser.CharSetLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dateLiteral(): DateLiteralContext {
		let localctx: DateLiteralContext = new DateLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 782, HiveParser.RULE_dateLiteral);
		try {
			this.state = 4562;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 71:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4559;
				this.match(HiveParser.KW_DATE);
				this.state = 4560;
				this.match(HiveParser.StringLiteral);
				}
				break;
			case 63:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4561;
				this.match(HiveParser.KW_CURRENT_DATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timestampLiteral(): TimestampLiteralContext {
		let localctx: TimestampLiteralContext = new TimestampLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 784, HiveParser.RULE_timestampLiteral);
		try {
			this.state = 4567;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 326:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4564;
				this.match(HiveParser.KW_TIMESTAMP);
				this.state = 4565;
				this.match(HiveParser.StringLiteral);
				}
				break;
			case 64:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4566;
				this.match(HiveParser.KW_CURRENT_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public timestampLocalTZLiteral(): TimestampLocalTZLiteralContext {
		let localctx: TimestampLocalTZLiteralContext = new TimestampLocalTZLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 786, HiveParser.RULE_timestampLocalTZLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4569;
			this.match(HiveParser.KW_TIMESTAMPLOCALTZ);
			this.state = 4570;
			this.match(HiveParser.StringLiteral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public intervalValue(): IntervalValueContext {
		let localctx: IntervalValueContext = new IntervalValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 788, HiveParser.RULE_intervalValue);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4572;
			_la = this._input.LA(1);
			if(!(_la===412 || _la===417)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public intervalLiteral(): IntervalLiteralContext {
		let localctx: IntervalLiteralContext = new IntervalLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 790, HiveParser.RULE_intervalLiteral);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4574;
			localctx._value = this.intervalValue();
			this.state = 4575;
			localctx._qualifiers = this.intervalQualifiers();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public intervalExpression(): IntervalExpressionContext {
		let localctx: IntervalExpressionContext = new IntervalExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 792, HiveParser.RULE_intervalExpression);
		try {
			this.state = 4592;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 386:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4577;
				this.match(HiveParser.LPAREN);
				this.state = 4578;
				localctx._value = this.intervalValue();
				this.state = 4579;
				this.match(HiveParser.RPAREN);
				this.state = 4580;
				localctx._qualifiers = this.intervalQualifiers();
				}
				break;
			case 158:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4582;
				this.match(HiveParser.KW_INTERVAL);
				this.state = 4588;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 412:
				case 417:
					{
					this.state = 4583;
					localctx._value = this.intervalValue();
					}
					break;
				case 386:
					{
					this.state = 4584;
					this.match(HiveParser.LPAREN);
					this.state = 4585;
					localctx._expr = this.expression();
					this.state = 4586;
					this.match(HiveParser.RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4590;
				localctx._qualifiers = this.intervalQualifiers();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public intervalQualifiers(): IntervalQualifiersContext {
		let localctx: IntervalQualifiersContext = new IntervalQualifiersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 794, HiveParser.RULE_intervalQualifiers);
		try {
			this.state = 4606;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 547, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4594;
				this.match(HiveParser.KW_YEAR);
				this.state = 4595;
				this.match(HiveParser.KW_TO);
				this.state = 4596;
				this.match(HiveParser.KW_MONTH);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4597;
				this.match(HiveParser.KW_DAY);
				this.state = 4598;
				this.match(HiveParser.KW_TO);
				this.state = 4599;
				this.match(HiveParser.KW_SECOND);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4600;
				this.match(HiveParser.KW_YEAR);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4601;
				this.match(HiveParser.KW_MONTH);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4602;
				this.match(HiveParser.KW_DAY);
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4603;
				this.match(HiveParser.KW_HOUR);
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4604;
				this.match(HiveParser.KW_MINUTE);
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4605;
				this.match(HiveParser.KW_SECOND);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public expression(): ExpressionContext {
		let localctx: ExpressionContext = new ExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 796, HiveParser.RULE_expression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4608;
			this.precedenceOrExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public atomExpression(): AtomExpressionContext {
		let localctx: AtomExpressionContext = new AtomExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 798, HiveParser.RULE_atomExpression);
		try {
			this.state = 4621;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 548, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4610;
				this.constant();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4611;
				this.intervalExpression();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4612;
				this.castExpression();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4613;
				this.extractExpression();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4614;
				this.floorExpression();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4615;
				this.caseExpression();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4616;
				this.whenExpression();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4617;
				this.subQueryExpression();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 4618;
				this.function_();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 4619;
				this.tableOrColumn();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 4620;
				this.expressionsInParenthesis();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceFieldExpression(): PrecedenceFieldExpressionContext {
		let localctx: PrecedenceFieldExpressionContext = new PrecedenceFieldExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 800, HiveParser.RULE_precedenceFieldExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4623;
			this.atomExpression();
			this.state = 4632;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===382 || _la===388) {
				{
				this.state = 4630;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 388:
					{
					this.state = 4624;
					this.match(HiveParser.LSQUARE);
					this.state = 4625;
					this.expression();
					this.state = 4626;
					this.match(HiveParser.RSQUARE);
					}
					break;
				case 382:
					{
					this.state = 4628;
					this.match(HiveParser.DOT);
					this.state = 4629;
					this.id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 4634;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceUnaryOperator(): PrecedenceUnaryOperatorContext {
		let localctx: PrecedenceUnaryOperatorContext = new PrecedenceUnaryOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 802, HiveParser.RULE_precedenceUnaryOperator);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4635;
			_la = this._input.LA(1);
			if(!(((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & 67) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceUnaryPrefixExpression(): PrecedenceUnaryPrefixExpressionContext {
		let localctx: PrecedenceUnaryPrefixExpressionContext = new PrecedenceUnaryPrefixExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 804, HiveParser.RULE_precedenceUnaryPrefixExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4640;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & 67) !== 0)) {
				{
				{
				this.state = 4637;
				this.precedenceUnaryOperator();
				}
				}
				this.state = 4642;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4643;
			this.precedenceFieldExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceBitwiseXorOperator(): PrecedenceBitwiseXorOperatorContext {
		let localctx: PrecedenceBitwiseXorOperatorContext = new PrecedenceBitwiseXorOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 806, HiveParser.RULE_precedenceBitwiseXorOperator);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4645;
			this.match(HiveParser.BITWISEXOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceBitwiseXorExpression(): PrecedenceBitwiseXorExpressionContext {
		let localctx: PrecedenceBitwiseXorExpressionContext = new PrecedenceBitwiseXorExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 808, HiveParser.RULE_precedenceBitwiseXorExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4647;
			this.precedenceUnaryPrefixExpression();
			this.state = 4653;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===409) {
				{
				{
				this.state = 4648;
				this.precedenceBitwiseXorOperator();
				this.state = 4649;
				this.precedenceUnaryPrefixExpression();
				}
				}
				this.state = 4655;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceStarOperator(): PrecedenceStarOperatorContext {
		let localctx: PrecedenceStarOperatorContext = new PrecedenceStarOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 810, HiveParser.RULE_precedenceStarOperator);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4656;
			_la = this._input.LA(1);
			if(!(((((_la - 399)) & ~0x1F) === 0 && ((1 << (_la - 399)) & 57) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceStarExpression(): PrecedenceStarExpressionContext {
		let localctx: PrecedenceStarExpressionContext = new PrecedenceStarExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 812, HiveParser.RULE_precedenceStarExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4658;
			this.precedenceBitwiseXorExpression();
			this.state = 4664;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 399)) & ~0x1F) === 0 && ((1 << (_la - 399)) & 57) !== 0)) {
				{
				{
				this.state = 4659;
				this.precedenceStarOperator();
				this.state = 4660;
				this.precedenceBitwiseXorExpression();
				}
				}
				this.state = 4666;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedencePlusOperator(): PrecedencePlusOperatorContext {
		let localctx: PrecedencePlusOperatorContext = new PrecedencePlusOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 814, HiveParser.RULE_precedencePlusOperator);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4667;
			_la = this._input.LA(1);
			if(!(_la===400 || _la===401)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedencePlusExpression(): PrecedencePlusExpressionContext {
		let localctx: PrecedencePlusExpressionContext = new PrecedencePlusExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 816, HiveParser.RULE_precedencePlusExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4669;
			this.precedenceStarExpression();
			this.state = 4675;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===400 || _la===401) {
				{
				{
				this.state = 4670;
				this.precedencePlusOperator();
				this.state = 4671;
				this.precedenceStarExpression();
				}
				}
				this.state = 4677;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceConcatenateOperator(): PrecedenceConcatenateOperatorContext {
		let localctx: PrecedenceConcatenateOperatorContext = new PrecedenceConcatenateOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 818, HiveParser.RULE_precedenceConcatenateOperator);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4678;
			this.match(HiveParser.CONCATENATE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceConcatenateExpression(): PrecedenceConcatenateExpressionContext {
		let localctx: PrecedenceConcatenateExpressionContext = new PrecedenceConcatenateExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 820, HiveParser.RULE_precedenceConcatenateExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4680;
			this.precedencePlusExpression();
			this.state = 4686;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===408) {
				{
				{
				this.state = 4681;
				this.precedenceConcatenateOperator();
				this.state = 4682;
				localctx._plus = this.precedencePlusExpression();
				}
				}
				this.state = 4688;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceAmpersandOperator(): PrecedenceAmpersandOperatorContext {
		let localctx: PrecedenceAmpersandOperatorContext = new PrecedenceAmpersandOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 822, HiveParser.RULE_precedenceAmpersandOperator);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4689;
			this.match(HiveParser.AMPERSAND);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceAmpersandExpression(): PrecedenceAmpersandExpressionContext {
		let localctx: PrecedenceAmpersandExpressionContext = new PrecedenceAmpersandExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 824, HiveParser.RULE_precedenceAmpersandExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4691;
			this.precedenceConcatenateExpression();
			this.state = 4697;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===405) {
				{
				{
				this.state = 4692;
				this.precedenceAmpersandOperator();
				this.state = 4693;
				this.precedenceConcatenateExpression();
				}
				}
				this.state = 4699;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceBitwiseOrOperator(): PrecedenceBitwiseOrOperatorContext {
		let localctx: PrecedenceBitwiseOrOperatorContext = new PrecedenceBitwiseOrOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 826, HiveParser.RULE_precedenceBitwiseOrOperator);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4700;
			this.match(HiveParser.BITWISEOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext {
		let localctx: PrecedenceBitwiseOrExpressionContext = new PrecedenceBitwiseOrExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 828, HiveParser.RULE_precedenceBitwiseOrExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4702;
			this.precedenceAmpersandExpression();
			this.state = 4708;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===407) {
				{
				{
				this.state = 4703;
				this.precedenceBitwiseOrOperator();
				this.state = 4704;
				this.precedenceAmpersandExpression();
				}
				}
				this.state = 4710;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceRegexpOperator(): PrecedenceRegexpOperatorContext {
		let localctx: PrecedenceRegexpOperatorContext = new PrecedenceRegexpOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 830, HiveParser.RULE_precedenceRegexpOperator);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4711;
			_la = this._input.LA(1);
			if(!(_la===176 || _la===260 || _la===276)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceSimilarOperator(): PrecedenceSimilarOperatorContext {
		let localctx: PrecedenceSimilarOperatorContext = new PrecedenceSimilarOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 832, HiveParser.RULE_precedenceSimilarOperator);
		try {
			this.state = 4718;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 176:
			case 260:
			case 276:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4713;
				this.precedenceRegexpOperator();
				}
				break;
			case 395:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4714;
				this.match(HiveParser.LESSTHANOREQUALTO);
				}
				break;
			case 396:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4715;
				this.match(HiveParser.LESSTHAN);
				}
				break;
			case 397:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4716;
				this.match(HiveParser.GREATERTHANOREQUALTO);
				}
				break;
			case 398:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4717;
				this.match(HiveParser.GREATERTHAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public subQueryExpression(): SubQueryExpressionContext {
		let localctx: SubQueryExpressionContext = new SubQueryExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 834, HiveParser.RULE_subQueryExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4720;
			this.match(HiveParser.LPAREN);
			this.state = 4721;
			this.selectStatement();
			this.state = 4722;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceSimilarExpression(): PrecedenceSimilarExpressionContext {
		let localctx: PrecedenceSimilarExpressionContext = new PrecedenceSimilarExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 836, HiveParser.RULE_precedenceSimilarExpression);
		try {
			this.state = 4727;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 8:
			case 10:
			case 15:
			case 16:
			case 18:
			case 19:
			case 20:
			case 22:
			case 23:
			case 24:
			case 26:
			case 27:
			case 28:
			case 30:
			case 31:
			case 33:
			case 34:
			case 35:
			case 36:
			case 37:
			case 38:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 46:
			case 47:
			case 49:
			case 50:
			case 52:
			case 53:
			case 56:
			case 57:
			case 59:
			case 63:
			case 64:
			case 66:
			case 68:
			case 71:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 78:
			case 80:
			case 81:
			case 82:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 90:
			case 91:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 99:
			case 100:
			case 102:
			case 104:
			case 105:
			case 106:
			case 109:
			case 110:
			case 111:
			case 113:
			case 114:
			case 115:
			case 116:
			case 119:
			case 120:
			case 122:
			case 123:
			case 124:
			case 125:
			case 126:
			case 127:
			case 132:
			case 133:
			case 137:
			case 140:
			case 142:
			case 143:
			case 144:
			case 145:
			case 146:
			case 149:
			case 150:
			case 152:
			case 153:
			case 154:
			case 156:
			case 158:
			case 161:
			case 162:
			case 163:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 175:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 187:
			case 188:
			case 189:
			case 190:
			case 191:
			case 192:
			case 193:
			case 194:
			case 196:
			case 198:
			case 199:
			case 201:
			case 202:
			case 204:
			case 205:
			case 207:
			case 208:
			case 209:
			case 210:
			case 212:
			case 213:
			case 216:
			case 217:
			case 222:
			case 223:
			case 225:
			case 226:
			case 228:
			case 229:
			case 230:
			case 233:
			case 234:
			case 235:
			case 236:
			case 242:
			case 244:
			case 245:
			case 247:
			case 248:
			case 249:
			case 251:
			case 252:
			case 254:
			case 255:
			case 256:
			case 257:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 277:
			case 278:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 289:
			case 290:
			case 291:
			case 292:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 300:
			case 301:
			case 303:
			case 304:
			case 305:
			case 306:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 316:
			case 317:
			case 319:
			case 321:
			case 322:
			case 323:
			case 326:
			case 327:
			case 328:
			case 329:
			case 331:
			case 333:
			case 334:
			case 335:
			case 338:
			case 339:
			case 341:
			case 342:
			case 344:
			case 346:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 355:
			case 356:
			case 357:
			case 360:
			case 361:
			case 362:
			case 364:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 373:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
			case 386:
			case 400:
			case 401:
			case 406:
			case 410:
			case 412:
			case 414:
			case 415:
			case 417:
			case 418:
			case 419:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4724;
				this.precedenceSimilarExpressionMain();
				}
				break;
			case 112:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4725;
				this.match(HiveParser.KW_EXISTS);
				this.state = 4726;
				this.subQueryExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceSimilarExpressionMain(): PrecedenceSimilarExpressionMainContext {
		let localctx: PrecedenceSimilarExpressionMainContext = new PrecedenceSimilarExpressionMainContext(this, this._ctx, this.state);
		this.enterRule(localctx, 838, HiveParser.RULE_precedenceSimilarExpressionMain);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4729;
			localctx._a = this.precedenceBitwiseOrExpression();
			this.state = 4731;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 560, this._ctx) ) {
			case 1:
				{
				this.state = 4730;
				localctx._part = this.precedenceSimilarExpressionPart();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceSimilarExpressionPart(): PrecedenceSimilarExpressionPartContext {
		let localctx: PrecedenceSimilarExpressionPartContext = new PrecedenceSimilarExpressionPartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 840, HiveParser.RULE_precedenceSimilarExpressionPart);
		try {
			this.state = 4739;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 561, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4733;
				this.precedenceSimilarOperator();
				this.state = 4734;
				localctx._equalExpr = this.precedenceBitwiseOrExpression();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4736;
				this.precedenceSimilarExpressionAtom();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4737;
				this.match(HiveParser.KW_NOT);
				this.state = 4738;
				this.precedenceSimilarExpressionPartNot();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceSimilarExpressionAtom(): PrecedenceSimilarExpressionAtomContext {
		let localctx: PrecedenceSimilarExpressionAtomContext = new PrecedenceSimilarExpressionAtomContext(this, this._ctx, this.state);
		this.enterRule(localctx, 842, HiveParser.RULE_precedenceSimilarExpressionAtom);
		let _la: number;
		try {
			this.state = 4752;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 148:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4741;
				this.match(HiveParser.KW_IN);
				this.state = 4742;
				this.precedenceSimilarExpressionIn();
				}
				break;
			case 25:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4743;
				this.match(HiveParser.KW_BETWEEN);
				this.state = 4744;
				localctx._min = this.precedenceBitwiseOrExpression();
				this.state = 4745;
				this.match(HiveParser.KW_AND);
				this.state = 4746;
				localctx._max = this.precedenceBitwiseOrExpression();
				}
				break;
			case 176:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4748;
				this.match(HiveParser.KW_LIKE);
				this.state = 4749;
				_la = this._input.LA(1);
				if(!(_la===7 || _la===13)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 4750;
				localctx._expr = this.expressionsInParenthesis();
				}
				break;
			case 392:
			case 394:
			case 395:
			case 396:
			case 397:
			case 398:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4751;
				this.precedenceSimilarExpressionQuantifierPredicate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceSimilarExpressionQuantifierPredicate(): PrecedenceSimilarExpressionQuantifierPredicateContext {
		let localctx: PrecedenceSimilarExpressionQuantifierPredicateContext = new PrecedenceSimilarExpressionQuantifierPredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 844, HiveParser.RULE_precedenceSimilarExpressionQuantifierPredicate);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4754;
			this.subQuerySelectorOperator();
			this.state = 4755;
			this.quantifierType();
			this.state = 4756;
			this.subQueryExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public quantifierType(): QuantifierTypeContext {
		let localctx: QuantifierTypeContext = new QuantifierTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 846, HiveParser.RULE_quantifierType);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4758;
			_la = this._input.LA(1);
			if(!(_la===7 || _la===13 || _la===302)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceSimilarExpressionIn(): PrecedenceSimilarExpressionInContext {
		let localctx: PrecedenceSimilarExpressionInContext = new PrecedenceSimilarExpressionInContext(this, this._ctx, this.state);
		this.enterRule(localctx, 848, HiveParser.RULE_precedenceSimilarExpressionIn);
		try {
			this.state = 4762;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 563, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4760;
				this.subQueryExpression();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4761;
				localctx._expr = this.expressionsInParenthesis();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceSimilarExpressionPartNot(): PrecedenceSimilarExpressionPartNotContext {
		let localctx: PrecedenceSimilarExpressionPartNotContext = new PrecedenceSimilarExpressionPartNotContext(this, this._ctx, this.state);
		this.enterRule(localctx, 850, HiveParser.RULE_precedenceSimilarExpressionPartNot);
		try {
			this.state = 4768;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 564, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4764;
				this.precedenceRegexpOperator();
				this.state = 4765;
				localctx._notExpr = this.precedenceBitwiseOrExpression();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4767;
				this.precedenceSimilarExpressionAtom();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceDistinctOperator(): PrecedenceDistinctOperatorContext {
		let localctx: PrecedenceDistinctOperatorContext = new PrecedenceDistinctOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 852, HiveParser.RULE_precedenceDistinctOperator);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4770;
			this.match(HiveParser.KW_IS);
			this.state = 4771;
			this.match(HiveParser.KW_DISTINCT);
			this.state = 4772;
			this.match(HiveParser.KW_FROM);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceEqualOperator(): PrecedenceEqualOperatorContext {
		let localctx: PrecedenceEqualOperatorContext = new PrecedenceEqualOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 854, HiveParser.RULE_precedenceEqualOperator);
		try {
			this.state = 4781;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 392:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4774;
				this.match(HiveParser.EQUAL);
				}
				break;
			case 393:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4775;
				this.match(HiveParser.EQUAL_NS);
				}
				break;
			case 394:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4776;
				this.match(HiveParser.NOTEQUAL);
				}
				break;
			case 160:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4777;
				this.match(HiveParser.KW_IS);
				this.state = 4778;
				this.match(HiveParser.KW_NOT);
				this.state = 4779;
				this.match(HiveParser.KW_DISTINCT);
				this.state = 4780;
				this.match(HiveParser.KW_FROM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceEqualExpression(): PrecedenceEqualExpressionContext {
		let localctx: PrecedenceEqualExpressionContext = new PrecedenceEqualExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 856, HiveParser.RULE_precedenceEqualExpression);
		try {
			let _alt: number;
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4783;
			this.precedenceSimilarExpression();
			this.state = 4792;
			this._errHandler.sync(this);
			_alt = this._interp.adaptivePredict(this._input, 567, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 4790;
					this._errHandler.sync(this);
					switch ( this._interp.adaptivePredict(this._input, 566, this._ctx) ) {
					case 1:
						{
						this.state = 4784;
						localctx._precedenceEqualOperator = this.precedenceEqualOperator();
						localctx._equal.push(localctx._precedenceEqualOperator);
						this.state = 4785;
						localctx._precedenceSimilarExpression = this.precedenceSimilarExpression();
						localctx._p.push(localctx._precedenceSimilarExpression);
						}
						break;
					case 2:
						{
						this.state = 4787;
						localctx._precedenceDistinctOperator = this.precedenceDistinctOperator();
						localctx._dist.push(localctx._precedenceDistinctOperator);
						this.state = 4788;
						localctx._precedenceSimilarExpression = this.precedenceSimilarExpression();
						localctx._p.push(localctx._precedenceSimilarExpression);
						}
						break;
					}
					}
				}
				this.state = 4794;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 567, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public isCondition(): IsConditionContext {
		let localctx: IsConditionContext = new IsConditionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 858, HiveParser.RULE_isCondition);
		try {
			this.state = 4807;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 568, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4795;
				this.match(HiveParser.KW_NULL);
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4796;
				this.match(HiveParser.KW_TRUE);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4797;
				this.match(HiveParser.KW_FALSE);
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4798;
				this.match(HiveParser.KW_UNKNOWN);
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4799;
				this.match(HiveParser.KW_NOT);
				this.state = 4800;
				this.match(HiveParser.KW_NULL);
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4801;
				this.match(HiveParser.KW_NOT);
				this.state = 4802;
				this.match(HiveParser.KW_TRUE);
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4803;
				this.match(HiveParser.KW_NOT);
				this.state = 4804;
				this.match(HiveParser.KW_FALSE);
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4805;
				this.match(HiveParser.KW_NOT);
				this.state = 4806;
				this.match(HiveParser.KW_UNKNOWN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceUnarySuffixExpression(): PrecedenceUnarySuffixExpressionContext {
		let localctx: PrecedenceUnarySuffixExpressionContext = new PrecedenceUnarySuffixExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 860, HiveParser.RULE_precedenceUnarySuffixExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4809;
			this.precedenceEqualExpression();
			this.state = 4812;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===160) {
				{
				this.state = 4810;
				localctx._a = this.match(HiveParser.KW_IS);
				this.state = 4811;
				this.isCondition();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceNotOperator(): PrecedenceNotOperatorContext {
		let localctx: PrecedenceNotOperatorContext = new PrecedenceNotOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 862, HiveParser.RULE_precedenceNotOperator);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4814;
			this.match(HiveParser.KW_NOT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceNotExpression(): PrecedenceNotExpressionContext {
		let localctx: PrecedenceNotExpressionContext = new PrecedenceNotExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 864, HiveParser.RULE_precedenceNotExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4819;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===206) {
				{
				{
				this.state = 4816;
				this.precedenceNotOperator();
				}
				}
				this.state = 4821;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4822;
			this.precedenceUnarySuffixExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceAndOperator(): PrecedenceAndOperatorContext {
		let localctx: PrecedenceAndOperatorContext = new PrecedenceAndOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 866, HiveParser.RULE_precedenceAndOperator);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4824;
			this.match(HiveParser.KW_AND);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceAndExpression(): PrecedenceAndExpressionContext {
		let localctx: PrecedenceAndExpressionContext = new PrecedenceAndExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 868, HiveParser.RULE_precedenceAndExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4826;
			this.precedenceNotExpression();
			this.state = 4832;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===11) {
				{
				{
				this.state = 4827;
				this.precedenceAndOperator();
				this.state = 4828;
				this.precedenceNotExpression();
				}
				}
				this.state = 4834;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceOrOperator(): PrecedenceOrOperatorContext {
		let localctx: PrecedenceOrOperatorContext = new PrecedenceOrOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 870, HiveParser.RULE_precedenceOrOperator);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4835;
			this.match(HiveParser.KW_OR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public precedenceOrExpression(): PrecedenceOrExpressionContext {
		let localctx: PrecedenceOrExpressionContext = new PrecedenceOrExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 872, HiveParser.RULE_precedenceOrExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4837;
			this.precedenceAndExpression();
			this.state = 4843;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===218) {
				{
				{
				this.state = 4838;
				this.precedenceOrOperator();
				this.state = 4839;
				this.precedenceAndExpression();
				}
				}
				this.state = 4845;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanValue(): BooleanValueContext {
		let localctx: BooleanValueContext = new BooleanValueContext(this, this._ctx, this.state);
		this.enterRule(localctx, 874, HiveParser.RULE_booleanValue);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4846;
			_la = this._input.LA(1);
			if(!(_la===120 || _la===339)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public booleanValueTok(): BooleanValueTokContext {
		let localctx: BooleanValueTokContext = new BooleanValueTokContext(this, this._ctx, this.state);
		this.enterRule(localctx, 876, HiveParser.RULE_booleanValueTok);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4848;
			_la = this._input.LA(1);
			if(!(_la===120 || _la===339)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public tableOrPartition(): TableOrPartitionContext {
		let localctx: TableOrPartitionContext = new TableOrPartitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 878, HiveParser.RULE_tableOrPartition);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4850;
			this.tableName();
			this.state = 4852;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===227) {
				{
				this.state = 4851;
				this.partitionSpec();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionSpec(): PartitionSpecContext {
		let localctx: PartitionSpecContext = new PartitionSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 880, HiveParser.RULE_partitionSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4854;
			this.match(HiveParser.KW_PARTITION);
			this.state = 4855;
			this.match(HiveParser.LPAREN);
			this.state = 4856;
			this.partitionVal();
			this.state = 4861;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4857;
				this.match(HiveParser.COMMA);
				this.state = 4858;
				this.partitionVal();
				}
				}
				this.state = 4863;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4864;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionVal(): PartitionValContext {
		let localctx: PartitionValContext = new PartitionValContext(this, this._ctx, this.state);
		this.enterRule(localctx, 882, HiveParser.RULE_partitionVal);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4866;
			this.id_();
			this.state = 4869;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===392) {
				{
				this.state = 4867;
				this.match(HiveParser.EQUAL);
				this.state = 4868;
				this.constant();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionSelectorSpec(): PartitionSelectorSpecContext {
		let localctx: PartitionSelectorSpecContext = new PartitionSelectorSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 884, HiveParser.RULE_partitionSelectorSpec);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4871;
			this.match(HiveParser.LPAREN);
			this.state = 4872;
			this.partitionSelectorVal();
			this.state = 4877;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4873;
				this.match(HiveParser.COMMA);
				this.state = 4874;
				this.partitionSelectorVal();
				}
				}
				this.state = 4879;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 4880;
			this.match(HiveParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionSelectorVal(): PartitionSelectorValContext {
		let localctx: PartitionSelectorValContext = new PartitionSelectorValContext(this, this._ctx, this.state);
		this.enterRule(localctx, 886, HiveParser.RULE_partitionSelectorVal);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4882;
			this.id_();
			this.state = 4883;
			this.partitionSelectorOperator();
			this.state = 4884;
			this.constant();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public partitionSelectorOperator(): PartitionSelectorOperatorContext {
		let localctx: PartitionSelectorOperatorContext = new PartitionSelectorOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 888, HiveParser.RULE_partitionSelectorOperator);
		try {
			this.state = 4888;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 176:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4886;
				this.match(HiveParser.KW_LIKE);
				}
				break;
			case 392:
			case 394:
			case 395:
			case 396:
			case 397:
			case 398:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4887;
				this.subQuerySelectorOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public subQuerySelectorOperator(): SubQuerySelectorOperatorContext {
		let localctx: SubQuerySelectorOperatorContext = new SubQuerySelectorOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 890, HiveParser.RULE_subQuerySelectorOperator);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4890;
			_la = this._input.LA(1);
			if(!(((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & 125) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sysFuncNames(): SysFuncNamesContext {
		let localctx: SysFuncNamesContext = new SysFuncNamesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 892, HiveParser.RULE_sysFuncNames);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4892;
			_la = this._input.LA(1);
			if(!(((((_la - 11)) & ~0x1F) === 0 && ((1 << (_la - 11)) & 17023009) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 3221225473) !== 0) || ((((_la - 145)) & ~0x1F) === 0 && ((1 << (_la - 145)) & 2147485705) !== 0) || ((((_la - 190)) & ~0x1F) === 0 && ((1 << (_la - 190)) & 268500993) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & 4194369) !== 0) || ((((_la - 300)) & ~0x1F) === 0 && ((1 << (_la - 300)) & 536883201) !== 0) || _la===346 || _la===371 || ((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & 196607) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public descFuncNames(): DescFuncNamesContext {
		let localctx: DescFuncNamesContext = new DescFuncNamesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 894, HiveParser.RULE_descFuncNames);
		try {
			this.state = 4897;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 578, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4894;
				this.sysFuncNames();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4895;
				this.match(HiveParser.StringLiteral);
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4896;
				this.functionIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public id_(): Id_Context {
		let localctx: Id_Context = new Id_Context(this, this._ctx, this.state);
		this.enterRule(localctx, 896, HiveParser.RULE_id_);
		try {
			this.state = 4901;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 418:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4899;
				this.match(HiveParser.Identifier);
				}
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 8:
			case 10:
			case 15:
			case 18:
			case 19:
			case 20:
			case 22:
			case 23:
			case 24:
			case 30:
			case 31:
			case 33:
			case 34:
			case 37:
			case 38:
			case 40:
			case 41:
			case 42:
			case 43:
			case 44:
			case 46:
			case 47:
			case 49:
			case 50:
			case 52:
			case 53:
			case 56:
			case 57:
			case 59:
			case 66:
			case 68:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 78:
			case 80:
			case 81:
			case 82:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 90:
			case 91:
			case 93:
			case 94:
			case 95:
			case 97:
			case 99:
			case 100:
			case 102:
			case 104:
			case 105:
			case 106:
			case 109:
			case 110:
			case 111:
			case 113:
			case 114:
			case 115:
			case 116:
			case 122:
			case 123:
			case 124:
			case 125:
			case 132:
			case 133:
			case 137:
			case 142:
			case 143:
			case 144:
			case 146:
			case 149:
			case 150:
			case 152:
			case 153:
			case 154:
			case 161:
			case 162:
			case 163:
			case 165:
			case 166:
			case 167:
			case 168:
			case 169:
			case 170:
			case 175:
			case 177:
			case 178:
			case 179:
			case 181:
			case 182:
			case 183:
			case 184:
			case 185:
			case 187:
			case 188:
			case 189:
			case 191:
			case 192:
			case 193:
			case 194:
			case 196:
			case 198:
			case 199:
			case 201:
			case 202:
			case 204:
			case 205:
			case 207:
			case 208:
			case 210:
			case 212:
			case 213:
			case 216:
			case 217:
			case 222:
			case 223:
			case 225:
			case 226:
			case 228:
			case 229:
			case 230:
			case 233:
			case 234:
			case 235:
			case 236:
			case 242:
			case 244:
			case 245:
			case 247:
			case 248:
			case 249:
			case 251:
			case 252:
			case 255:
			case 256:
			case 257:
			case 261:
			case 262:
			case 263:
			case 264:
			case 265:
			case 266:
			case 267:
			case 268:
			case 269:
			case 270:
			case 271:
			case 272:
			case 274:
			case 277:
			case 278:
			case 283:
			case 284:
			case 285:
			case 286:
			case 287:
			case 289:
			case 290:
			case 291:
			case 292:
			case 294:
			case 295:
			case 296:
			case 297:
			case 298:
			case 299:
			case 301:
			case 303:
			case 304:
			case 305:
			case 306:
			case 308:
			case 309:
			case 310:
			case 311:
			case 312:
			case 313:
			case 314:
			case 316:
			case 317:
			case 319:
			case 321:
			case 322:
			case 323:
			case 328:
			case 329:
			case 331:
			case 333:
			case 334:
			case 335:
			case 338:
			case 341:
			case 342:
			case 344:
			case 346:
			case 349:
			case 350:
			case 351:
			case 352:
			case 353:
			case 355:
			case 356:
			case 357:
			case 360:
			case 361:
			case 362:
			case 364:
			case 366:
			case 367:
			case 368:
			case 369:
			case 370:
			case 373:
			case 376:
			case 377:
			case 378:
			case 379:
			case 380:
			case 381:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4900;
				this.nonReserved();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public functionIdentifier(): FunctionIdentifierContext {
		let localctx: FunctionIdentifierContext = new FunctionIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 898, HiveParser.RULE_functionIdentifier);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4903;
			this.id_();
			this.state = 4906;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===382) {
				{
				this.state = 4904;
				this.match(HiveParser.DOT);
				this.state = 4905;
				localctx._fn = this.id_();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public principalIdentifier(): PrincipalIdentifierContext {
		let localctx: PrincipalIdentifierContext = new PrincipalIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 900, HiveParser.RULE_principalIdentifier);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4908;
			this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public nonReserved(): NonReservedContext {
		let localctx: NonReservedContext = new NonReservedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 902, HiveParser.RULE_nonReserved);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4910;
			_la = this._input.LA(1);
			if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 3252454782) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 94072755) !== 0) || ((((_la - 66)) & ~0x1F) === 0 && ((1 << (_la - 66)) & 3151878085) !== 0) || ((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 126082283) !== 0) || ((((_la - 132)) & ~0x1F) === 0 && ((1 << (_la - 132)) & 3765853219) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & 3185538111) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 3675051739) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 2389627001) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 2078382079) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 987750079) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 1004889323) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4138967) !== 0))) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public sql11ReservedKeywordsUsedAsFunctionName(): Sql11ReservedKeywordsUsedAsFunctionNameContext {
		let localctx: Sql11ReservedKeywordsUsedAsFunctionNameContext = new Sql11ReservedKeywordsUsedAsFunctionNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 904, HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4912;
			_la = this._input.LA(1);
			if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 469827584) !== 0) || ((((_la - 63)) & ~0x1F) === 0 && ((1 << (_la - 63)) & 259) !== 0) || _la===96 || _la===126 || ((((_la - 140)) & ~0x1F) === 0 && ((1 << (_la - 140)) & 65569) !== 0) || _la===190 || _la===254 || _la===300 || _la===326)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public hint(): HintContext {
		let localctx: HintContext = new HintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 906, HiveParser.RULE_hint);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4914;
			this.hintList();
			this.state = 4915;
			this.match(HiveParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public hintList(): HintListContext {
		let localctx: HintListContext = new HintListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 908, HiveParser.RULE_hintList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4917;
			this.hintItem();
			this.state = 4922;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4918;
				this.match(HiveParser.COMMA);
				this.state = 4919;
				this.hintItem();
				}
				}
				this.state = 4924;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public hintItem(): HintItemContext {
		let localctx: HintItemContext = new HintItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 910, HiveParser.RULE_hintItem);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4925;
			this.hintName();
			this.state = 4930;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===386) {
				{
				this.state = 4926;
				this.match(HiveParser.LPAREN);
				this.state = 4927;
				this.hintArgs();
				this.state = 4928;
				this.match(HiveParser.RPAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public hintName(): HintNameContext {
		let localctx: HintNameContext = new HintNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 912, HiveParser.RULE_hintName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4932;
			_la = this._input.LA(1);
			if(!(_la===191 || _la===232 || _la===289 || _la===311)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public hintArgs(): HintArgsContext {
		let localctx: HintArgsContext = new HintArgsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 914, HiveParser.RULE_hintArgs);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4934;
			this.hintArgName();
			this.state = 4939;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4935;
				this.match(HiveParser.COMMA);
				this.state = 4936;
				this.hintArgName();
				}
				}
				this.state = 4941;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public hintArgName(): HintArgNameContext {
		let localctx: HintArgNameContext = new HintArgNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 916, HiveParser.RULE_hintArgName);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4942;
			_la = this._input.LA(1);
			if(!(_la===203 || _la===417 || _la===418)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public prepareStatement(): PrepareStatementContext {
		let localctx: PrepareStatementContext = new PrepareStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 918, HiveParser.RULE_prepareStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4944;
			this.match(HiveParser.KW_PREPARE);
			this.state = 4945;
			this.id_();
			this.state = 4946;
			this.match(HiveParser.KW_FROM);
			this.state = 4947;
			this.queryStatementExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public executeStatement(): ExecuteStatementContext {
		let localctx: ExecuteStatementContext = new ExecuteStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 920, HiveParser.RULE_executeStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4949;
			this.match(HiveParser.KW_EXECUTE);
			this.state = 4950;
			this.id_();
			this.state = 4951;
			this.match(HiveParser.KW_USING);
			this.state = 4952;
			this.executeParamList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public executeParamList(): ExecuteParamListContext {
		let localctx: ExecuteParamListContext = new ExecuteParamListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 922, HiveParser.RULE_executeParamList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4954;
			this.constant();
			this.state = 4959;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4955;
				this.match(HiveParser.COMMA);
				this.state = 4956;
				this.constant();
				}
				}
				this.state = 4961;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public resourcePlanDdlStatements(): ResourcePlanDdlStatementsContext {
		let localctx: ResourcePlanDdlStatementsContext = new ResourcePlanDdlStatementsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 924, HiveParser.RULE_resourcePlanDdlStatements);
		try {
			this.state = 4976;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 585, this._ctx) ) {
			case 1:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4962;
				this.createResourcePlanStatement();
				}
				break;
			case 2:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4963;
				this.alterResourcePlanStatement();
				}
				break;
			case 3:
				this.enterOuterAlt(localctx, 3);
				{
				this.state = 4964;
				this.dropResourcePlanStatement();
				}
				break;
			case 4:
				this.enterOuterAlt(localctx, 4);
				{
				this.state = 4965;
				this.globalWmStatement();
				}
				break;
			case 5:
				this.enterOuterAlt(localctx, 5);
				{
				this.state = 4966;
				this.replaceResourcePlanStatement();
				}
				break;
			case 6:
				this.enterOuterAlt(localctx, 6);
				{
				this.state = 4967;
				this.createTriggerStatement();
				}
				break;
			case 7:
				this.enterOuterAlt(localctx, 7);
				{
				this.state = 4968;
				this.alterTriggerStatement();
				}
				break;
			case 8:
				this.enterOuterAlt(localctx, 8);
				{
				this.state = 4969;
				this.dropTriggerStatement();
				}
				break;
			case 9:
				this.enterOuterAlt(localctx, 9);
				{
				this.state = 4970;
				this.createPoolStatement();
				}
				break;
			case 10:
				this.enterOuterAlt(localctx, 10);
				{
				this.state = 4971;
				this.alterPoolStatement();
				}
				break;
			case 11:
				this.enterOuterAlt(localctx, 11);
				{
				this.state = 4972;
				this.dropPoolStatement();
				}
				break;
			case 12:
				this.enterOuterAlt(localctx, 12);
				{
				this.state = 4973;
				this.createMappingStatement();
				}
				break;
			case 13:
				this.enterOuterAlt(localctx, 13);
				{
				this.state = 4974;
				this.alterMappingStatement();
				}
				break;
			case 14:
				this.enterOuterAlt(localctx, 14);
				{
				this.state = 4975;
				this.dropMappingStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rpAssign(): RpAssignContext {
		let localctx: RpAssignContext = new RpAssignContext(this, this._ctx, this.state);
		this.enterRule(localctx, 926, HiveParser.RULE_rpAssign);
		try {
			this.state = 4985;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 249:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4978;
				this.match(HiveParser.KW_QUERY_PARALLELISM);
				this.state = 4979;
				this.match(HiveParser.EQUAL);
				this.state = 4980;
				localctx._parallelism = this.match(HiveParser.Number);
				}
				break;
			case 80:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4981;
				this.match(HiveParser.KW_DEFAULT);
				this.state = 4982;
				this.match(HiveParser.KW_POOL);
				this.state = 4983;
				this.match(HiveParser.EQUAL);
				this.state = 4984;
				this.poolPath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rpAssignList(): RpAssignListContext {
		let localctx: RpAssignListContext = new RpAssignListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 928, HiveParser.RULE_rpAssignList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 4987;
			this.rpAssign();
			this.state = 4992;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 4988;
				this.match(HiveParser.COMMA);
				this.state = 4989;
				this.rpAssign();
				}
				}
				this.state = 4994;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rpUnassign(): RpUnassignContext {
		let localctx: RpUnassignContext = new RpUnassignContext(this, this._ctx, this.state);
		this.enterRule(localctx, 930, HiveParser.RULE_rpUnassign);
		try {
			this.state = 4998;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 249:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 4995;
				this.match(HiveParser.KW_QUERY_PARALLELISM);
				}
				break;
			case 80:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 4996;
				this.match(HiveParser.KW_DEFAULT);
				this.state = 4997;
				this.match(HiveParser.KW_POOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public rpUnassignList(): RpUnassignListContext {
		let localctx: RpUnassignListContext = new RpUnassignListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 932, HiveParser.RULE_rpUnassignList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5000;
			this.rpUnassign();
			this.state = 5005;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 5001;
				this.match(HiveParser.COMMA);
				this.state = 5002;
				this.rpUnassign();
				}
				}
				this.state = 5007;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createResourcePlanStatement(): CreateResourcePlanStatementContext {
		let localctx: CreateResourcePlanStatementContext = new CreateResourcePlanStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 934, HiveParser.RULE_createResourcePlanStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5008;
			this.match(HiveParser.KW_CREATE);
			this.state = 5009;
			this.match(HiveParser.KW_RESOURCE);
			this.state = 5010;
			this.match(HiveParser.KW_PLAN);
			this.state = 5012;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 5011;
				this.ifNotExists();
				}
			}

			this.state = 5023;
			this._errHandler.sync(this);
			switch ( this._interp.adaptivePredict(this._input, 592, this._ctx) ) {
			case 1:
				{
				this.state = 5014;
				localctx._name = this.id_();
				this.state = 5015;
				this.match(HiveParser.KW_LIKE);
				this.state = 5016;
				localctx._likeName = this.id_();
				}
				break;
			case 2:
				{
				this.state = 5018;
				localctx._name = this.id_();
				this.state = 5021;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===375) {
					{
					this.state = 5019;
					this.match(HiveParser.KW_WITH);
					this.state = 5020;
					this.rpAssignList();
					}
				}

				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public withReplace(): WithReplaceContext {
		let localctx: WithReplaceContext = new WithReplaceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 936, HiveParser.RULE_withReplace);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5025;
			this.match(HiveParser.KW_WITH);
			this.state = 5026;
			this.match(HiveParser.KW_REPLACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public activate(): ActivateContext {
		let localctx: ActivateContext = new ActivateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 938, HiveParser.RULE_activate);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5028;
			this.match(HiveParser.KW_ACTIVATE);
			this.state = 5030;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 5029;
				this.withReplace();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public enable(): EnableContext {
		let localctx: EnableContext = new EnableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 940, HiveParser.RULE_enable);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5032;
			this.match(HiveParser.KW_ENABLE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public disable(): DisableContext {
		let localctx: DisableContext = new DisableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 942, HiveParser.RULE_disable);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5034;
			this.match(HiveParser.KW_DISABLE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public unmanaged(): UnmanagedContext {
		let localctx: UnmanagedContext = new UnmanagedContext(this, this._ctx, this.state);
		this.enterRule(localctx, 944, HiveParser.RULE_unmanaged);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5036;
			this.match(HiveParser.KW_UNMANAGED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterResourcePlanStatement(): AlterResourcePlanStatementContext {
		let localctx: AlterResourcePlanStatementContext = new AlterResourcePlanStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 946, HiveParser.RULE_alterResourcePlanStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5038;
			this.match(HiveParser.KW_ALTER);
			this.state = 5039;
			this.match(HiveParser.KW_RESOURCE);
			this.state = 5040;
			this.match(HiveParser.KW_PLAN);
			this.state = 5041;
			localctx._name = this.id_();
			this.state = 5059;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 362:
				{
				this.state = 5042;
				this.match(HiveParser.KW_VALIDATE);
				}
				break;
			case 91:
				{
				this.state = 5043;
				this.match(HiveParser.KW_DISABLE);
				}
				break;
			case 293:
				{
				this.state = 5044;
				this.match(HiveParser.KW_SET);
				this.state = 5045;
				this.rpAssignList();
				}
				break;
			case 352:
				{
				this.state = 5046;
				this.match(HiveParser.KW_UNSET);
				this.state = 5047;
				this.rpUnassignList();
				}
				break;
			case 264:
				{
				this.state = 5048;
				this.match(HiveParser.KW_RENAME);
				this.state = 5049;
				this.match(HiveParser.KW_TO);
				this.state = 5050;
				localctx._newName = this.id_();
				}
				break;
			case 2:
				{
				this.state = 5051;
				this.activate();
				this.state = 5053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===102) {
					{
					this.state = 5052;
					this.enable();
					}
				}

				}
				break;
			case 102:
				{
				this.state = 5055;
				this.enable();
				this.state = 5057;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la===2) {
					{
					this.state = 5056;
					this.activate();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public globalWmStatement(): GlobalWmStatementContext {
		let localctx: GlobalWmStatementContext = new GlobalWmStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 948, HiveParser.RULE_globalWmStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5061;
			_la = this._input.LA(1);
			if(!(_la===91 || _la===102)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5062;
			this.match(HiveParser.KW_WORKLOAD);
			this.state = 5063;
			this.match(HiveParser.KW_MANAGEMENT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public replaceResourcePlanStatement(): ReplaceResourcePlanStatementContext {
		let localctx: ReplaceResourcePlanStatementContext = new ReplaceResourcePlanStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 950, HiveParser.RULE_replaceResourcePlanStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5065;
			this.match(HiveParser.KW_REPLACE);
			this.state = 5077;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 3:
				{
				this.state = 5066;
				this.match(HiveParser.KW_ACTIVE);
				this.state = 5067;
				this.match(HiveParser.KW_RESOURCE);
				this.state = 5068;
				this.match(HiveParser.KW_PLAN);
				this.state = 5069;
				this.match(HiveParser.KW_WITH);
				this.state = 5070;
				localctx._src = this.id_();
				}
				break;
			case 270:
				{
				this.state = 5071;
				this.match(HiveParser.KW_RESOURCE);
				this.state = 5072;
				this.match(HiveParser.KW_PLAN);
				this.state = 5073;
				localctx._dest = this.id_();
				this.state = 5074;
				this.match(HiveParser.KW_WITH);
				this.state = 5075;
				localctx._src = this.id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropResourcePlanStatement(): DropResourcePlanStatementContext {
		let localctx: DropResourcePlanStatementContext = new DropResourcePlanStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 952, HiveParser.RULE_dropResourcePlanStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5079;
			this.match(HiveParser.KW_DROP);
			this.state = 5080;
			this.match(HiveParser.KW_RESOURCE);
			this.state = 5081;
			this.match(HiveParser.KW_PLAN);
			this.state = 5083;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===145) {
				{
				this.state = 5082;
				this.ifExists();
				}
			}

			this.state = 5085;
			localctx._name = this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public poolPath(): PoolPathContext {
		let localctx: PoolPathContext = new PoolPathContext(this, this._ctx, this.state);
		this.enterRule(localctx, 954, HiveParser.RULE_poolPath);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5087;
			this.id_();
			this.state = 5092;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===382) {
				{
				{
				this.state = 5088;
				this.match(HiveParser.DOT);
				this.state = 5089;
				this.id_();
				}
				}
				this.state = 5094;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public triggerExpression(): TriggerExpressionContext {
		let localctx: TriggerExpressionContext = new TriggerExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 956, HiveParser.RULE_triggerExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5095;
			this.triggerAtomExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public triggerExpressionStandalone(): TriggerExpressionStandaloneContext {
		let localctx: TriggerExpressionStandaloneContext = new TriggerExpressionStandaloneContext(this, this._ctx, this.state);
		this.enterRule(localctx, 958, HiveParser.RULE_triggerExpressionStandalone);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5097;
			this.triggerExpression();
			this.state = 5098;
			this.match(HiveParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public triggerOrExpression(): TriggerOrExpressionContext {
		let localctx: TriggerOrExpressionContext = new TriggerOrExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 960, HiveParser.RULE_triggerOrExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5100;
			this.triggerAndExpression();
			this.state = 5105;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===218) {
				{
				{
				this.state = 5101;
				this.match(HiveParser.KW_OR);
				this.state = 5102;
				this.triggerAndExpression();
				}
				}
				this.state = 5107;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public triggerAndExpression(): TriggerAndExpressionContext {
		let localctx: TriggerAndExpressionContext = new TriggerAndExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 962, HiveParser.RULE_triggerAndExpression);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5108;
			this.triggerAtomExpression();
			this.state = 5113;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===11) {
				{
				{
				this.state = 5109;
				this.match(HiveParser.KW_AND);
				this.state = 5110;
				this.triggerAtomExpression();
				}
				}
				this.state = 5115;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public triggerAtomExpression(): TriggerAtomExpressionContext {
		let localctx: TriggerAtomExpressionContext = new TriggerAtomExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 964, HiveParser.RULE_triggerAtomExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5116;
			this.id_();
			this.state = 5117;
			this.comparisionOperator();
			this.state = 5118;
			this.triggerLiteral();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public triggerLiteral(): TriggerLiteralContext {
		let localctx: TriggerLiteralContext = new TriggerLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 966, HiveParser.RULE_triggerLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5120;
			_la = this._input.LA(1);
			if(!(_la===412 || _la===417)) {
			this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public comparisionOperator(): ComparisionOperatorContext {
		let localctx: ComparisionOperatorContext = new ComparisionOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 968, HiveParser.RULE_comparisionOperator);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5122;
			this.match(HiveParser.GREATERTHAN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public triggerActionExpression(): TriggerActionExpressionContext {
		let localctx: TriggerActionExpressionContext = new TriggerActionExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 970, HiveParser.RULE_triggerActionExpression);
		try {
			this.state = 5128;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 169:
				this.enterOuterAlt(localctx, 1);
				{
				this.state = 5124;
				this.match(HiveParser.KW_KILL);
				}
				break;
			case 201:
				this.enterOuterAlt(localctx, 2);
				{
				this.state = 5125;
				this.match(HiveParser.KW_MOVE);
				this.state = 5126;
				this.match(HiveParser.KW_TO);
				this.state = 5127;
				this.poolPath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public triggerActionExpressionStandalone(): TriggerActionExpressionStandaloneContext {
		let localctx: TriggerActionExpressionStandaloneContext = new TriggerActionExpressionStandaloneContext(this, this._ctx, this.state);
		this.enterRule(localctx, 972, HiveParser.RULE_triggerActionExpressionStandalone);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5130;
			this.triggerActionExpression();
			this.state = 5131;
			this.match(HiveParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createTriggerStatement(): CreateTriggerStatementContext {
		let localctx: CreateTriggerStatementContext = new CreateTriggerStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 974, HiveParser.RULE_createTriggerStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5133;
			this.match(HiveParser.KW_CREATE);
			this.state = 5134;
			this.match(HiveParser.KW_TRIGGER);
			this.state = 5135;
			localctx._rpName = this.id_();
			this.state = 5136;
			this.match(HiveParser.DOT);
			this.state = 5137;
			localctx._triggerName = this.id_();
			this.state = 5138;
			this.match(HiveParser.KW_WHEN);
			this.state = 5139;
			this.triggerExpression();
			this.state = 5140;
			this.match(HiveParser.KW_DO);
			this.state = 5141;
			this.triggerActionExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterTriggerStatement(): AlterTriggerStatementContext {
		let localctx: AlterTriggerStatementContext = new AlterTriggerStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 976, HiveParser.RULE_alterTriggerStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5143;
			this.match(HiveParser.KW_ALTER);
			this.state = 5144;
			this.match(HiveParser.KW_TRIGGER);
			this.state = 5145;
			localctx._rpName = this.id_();
			this.state = 5146;
			this.match(HiveParser.DOT);
			this.state = 5147;
			localctx._triggerName = this.id_();
			this.state = 5164;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 371:
				{
				this.state = 5148;
				this.match(HiveParser.KW_WHEN);
				this.state = 5149;
				this.triggerExpression();
				this.state = 5150;
				this.match(HiveParser.KW_DO);
				this.state = 5151;
				this.triggerActionExpression();
				}
				break;
			case 4:
			case 98:
				{
				this.state = 5157;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 4:
					{
					this.state = 5153;
					this.match(HiveParser.KW_ADD);
					this.state = 5154;
					this.match(HiveParser.KW_TO);
					}
					break;
				case 98:
					{
					this.state = 5155;
					this.match(HiveParser.KW_DROP);
					this.state = 5156;
					this.match(HiveParser.KW_FROM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5162;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case 236:
					{
					this.state = 5159;
					this.match(HiveParser.KW_POOL);
					this.state = 5160;
					localctx._poolName = this.poolPath();
					}
					break;
				case 351:
					{
					this.state = 5161;
					this.match(HiveParser.KW_UNMANAGED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropTriggerStatement(): DropTriggerStatementContext {
		let localctx: DropTriggerStatementContext = new DropTriggerStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 978, HiveParser.RULE_dropTriggerStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5166;
			this.match(HiveParser.KW_DROP);
			this.state = 5167;
			this.match(HiveParser.KW_TRIGGER);
			this.state = 5168;
			localctx._rpName = this.id_();
			this.state = 5169;
			this.match(HiveParser.DOT);
			this.state = 5170;
			localctx._triggerName = this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public poolAssign(): PoolAssignContext {
		let localctx: PoolAssignContext = new PoolAssignContext(this, this._ctx, this.state);
		this.enterRule(localctx, 980, HiveParser.RULE_poolAssign);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5184;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 8:
				{
				this.state = 5172;
				this.match(HiveParser.KW_ALLOC_FRACTION);
				this.state = 5173;
				this.match(HiveParser.EQUAL);
				this.state = 5174;
				localctx._allocFraction = this.match(HiveParser.Number);
				}
				break;
			case 249:
				{
				this.state = 5175;
				this.match(HiveParser.KW_QUERY_PARALLELISM);
				this.state = 5176;
				this.match(HiveParser.EQUAL);
				this.state = 5177;
				localctx._parallelism = this.match(HiveParser.Number);
				}
				break;
			case 284:
				{
				this.state = 5178;
				this.match(HiveParser.KW_SCHEDULING_POLICY);
				this.state = 5179;
				this.match(HiveParser.EQUAL);
				this.state = 5180;
				localctx._policy = this.match(HiveParser.StringLiteral);
				}
				break;
			case 230:
				{
				this.state = 5181;
				this.match(HiveParser.KW_PATH);
				this.state = 5182;
				this.match(HiveParser.EQUAL);
				this.state = 5183;
				localctx._path = this.poolPath();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public poolAssignList(): PoolAssignListContext {
		let localctx: PoolAssignListContext = new PoolAssignListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 982, HiveParser.RULE_poolAssignList);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5186;
			this.poolAssign();
			this.state = 5191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la===384) {
				{
				{
				this.state = 5187;
				this.match(HiveParser.COMMA);
				this.state = 5188;
				this.poolAssign();
				}
				}
				this.state = 5193;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createPoolStatement(): CreatePoolStatementContext {
		let localctx: CreatePoolStatementContext = new CreatePoolStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 984, HiveParser.RULE_createPoolStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5194;
			this.match(HiveParser.KW_CREATE);
			this.state = 5195;
			this.match(HiveParser.KW_POOL);
			this.state = 5196;
			localctx._rpName = this.id_();
			this.state = 5197;
			this.match(HiveParser.DOT);
			this.state = 5198;
			this.poolPath();
			this.state = 5199;
			this.match(HiveParser.KW_WITH);
			this.state = 5200;
			this.poolAssignList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterPoolStatement(): AlterPoolStatementContext {
		let localctx: AlterPoolStatementContext = new AlterPoolStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 986, HiveParser.RULE_alterPoolStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5202;
			this.match(HiveParser.KW_ALTER);
			this.state = 5203;
			this.match(HiveParser.KW_POOL);
			this.state = 5204;
			localctx._rpName = this.id_();
			this.state = 5205;
			this.match(HiveParser.DOT);
			this.state = 5206;
			this.poolPath();
			this.state = 5214;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 293:
				{
				this.state = 5207;
				this.match(HiveParser.KW_SET);
				this.state = 5208;
				this.poolAssignList();
				}
				break;
			case 352:
				{
				this.state = 5209;
				this.match(HiveParser.KW_UNSET);
				this.state = 5210;
				this.match(HiveParser.KW_SCHEDULING_POLICY);
				}
				break;
			case 4:
			case 98:
				{
				this.state = 5211;
				_la = this._input.LA(1);
				if(!(_la===4 || _la===98)) {
				this._errHandler.recoverInline(this);
				}
				else {
					this._errHandler.reportMatch(this);
				    this.consume();
				}
				this.state = 5212;
				this.match(HiveParser.KW_TRIGGER);
				this.state = 5213;
				localctx._triggerName = this.id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropPoolStatement(): DropPoolStatementContext {
		let localctx: DropPoolStatementContext = new DropPoolStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 988, HiveParser.RULE_dropPoolStatement);
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5216;
			this.match(HiveParser.KW_DROP);
			this.state = 5217;
			this.match(HiveParser.KW_POOL);
			this.state = 5218;
			localctx._rpName = this.id_();
			this.state = 5219;
			this.match(HiveParser.DOT);
			this.state = 5220;
			this.poolPath();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public createMappingStatement(): CreateMappingStatementContext {
		let localctx: CreateMappingStatementContext = new CreateMappingStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 990, HiveParser.RULE_createMappingStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5222;
			this.match(HiveParser.KW_CREATE);
			this.state = 5223;
			localctx._mappingType = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===14 || _la===139 || _la===358)) {
			    localctx._mappingType = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5224;
			this.match(HiveParser.KW_MAPPING);
			this.state = 5225;
			localctx._name = this.match(HiveParser.StringLiteral);
			this.state = 5226;
			this.match(HiveParser.KW_IN);
			this.state = 5227;
			localctx._rpName = this.id_();
			this.state = 5231;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 330:
				{
				this.state = 5228;
				this.match(HiveParser.KW_TO);
				this.state = 5229;
				localctx._path = this.poolPath();
				}
				break;
			case 351:
				{
				this.state = 5230;
				this.unmanaged();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5236;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 5233;
				this.match(HiveParser.KW_WITH);
				this.state = 5234;
				this.match(HiveParser.KW_ORDER);
				this.state = 5235;
				localctx._order = this.match(HiveParser.Number);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public alterMappingStatement(): AlterMappingStatementContext {
		let localctx: AlterMappingStatementContext = new AlterMappingStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 992, HiveParser.RULE_alterMappingStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5238;
			this.match(HiveParser.KW_ALTER);
			this.state = 5239;
			localctx._mappingType = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===14 || _la===139 || _la===358)) {
			    localctx._mappingType = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5240;
			this.match(HiveParser.KW_MAPPING);
			this.state = 5241;
			localctx._name = this.match(HiveParser.StringLiteral);
			this.state = 5242;
			this.match(HiveParser.KW_IN);
			this.state = 5243;
			localctx._rpName = this.id_();
			this.state = 5247;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case 330:
				{
				this.state = 5244;
				this.match(HiveParser.KW_TO);
				this.state = 5245;
				localctx._path = this.poolPath();
				}
				break;
			case 351:
				{
				this.state = 5246;
				this.unmanaged();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 5252;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la===375) {
				{
				this.state = 5249;
				this.match(HiveParser.KW_WITH);
				this.state = 5250;
				this.match(HiveParser.KW_ORDER);
				this.state = 5251;
				localctx._order = this.match(HiveParser.Number);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}
	// @RuleVersion(0)
	public dropMappingStatement(): DropMappingStatementContext {
		let localctx: DropMappingStatementContext = new DropMappingStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 994, HiveParser.RULE_dropMappingStatement);
		let _la: number;
		try {
			this.enterOuterAlt(localctx, 1);
			{
			this.state = 5254;
			this.match(HiveParser.KW_DROP);
			this.state = 5255;
			localctx._mappingType = this._input.LT(1);
			_la = this._input.LA(1);
			if(!(_la===14 || _la===139 || _la===358)) {
			    localctx._mappingType = this._errHandler.recoverInline(this);
			}
			else {
				this._errHandler.reportMatch(this);
			    this.consume();
			}
			this.state = 5256;
			this.match(HiveParser.KW_MAPPING);
			this.state = 5257;
			localctx._name = this.match(HiveParser.StringLiteral);
			this.state = 5258;
			this.match(HiveParser.KW_IN);
			this.state = 5259;
			localctx._rpName = this.id_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return localctx;
	}

	public static readonly _serializedATN: number[] = [4,1,424,5262,2,0,7,0,
	2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,
	2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,
	17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,
	7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,
	31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,
	2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
	46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,
	7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,
	60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,
	2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,
	75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,
	7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,
	89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,
	2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,
	7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
	7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,
	7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,
	7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,
	7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,
	7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,
	7,139,2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,
	7,145,2,146,7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,
	7,151,2,152,7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,
	7,157,2,158,7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,
	7,163,2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
	7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
	7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,
	7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,
	7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,
	7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,
	7,199,2,200,7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,
	7,205,2,206,7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,
	7,211,2,212,7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,
	7,217,2,218,7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,
	7,223,2,224,7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,
	7,229,2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
	7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
	7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,
	7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,
	7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,
	7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,
	7,265,2,266,7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,
	7,271,2,272,7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,
	7,277,2,278,7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,
	7,283,2,284,7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,
	7,289,2,290,7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,
	7,295,2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
	7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
	7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,
	7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,
	7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,
	7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,
	7,331,2,332,7,332,2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,
	7,337,2,338,7,338,2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,
	7,343,2,344,7,344,2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,
	7,349,2,350,7,350,2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,
	7,355,2,356,7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,
	7,361,2,362,7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,
	7,367,2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
	7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,
	7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,
	7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,
	7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,
	7,397,2,398,7,398,2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,
	7,403,2,404,7,404,2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,
	7,409,2,410,7,410,2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,
	7,415,2,416,7,416,2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,
	7,421,2,422,7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,
	7,427,2,428,7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,
	7,433,2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,
	7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,
	7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,
	7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,
	7,457,2,458,7,458,2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,
	7,463,2,464,7,464,2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,
	7,469,2,470,7,470,2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,
	7,475,2,476,7,476,2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,
	7,481,2,482,7,482,2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,
	7,487,2,488,7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,
	7,493,2,494,7,494,2,495,7,495,2,496,7,496,2,497,7,497,1,0,1,0,3,0,999,8,
	0,1,0,1,0,1,1,1,1,5,1,1005,8,1,10,1,12,1,1008,9,1,1,1,1,1,1,1,3,1,1013,
	8,1,1,2,1,2,1,2,1,2,1,2,3,2,1020,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
	2,1030,8,2,1,2,3,2,1033,8,2,1,2,1,2,3,2,1037,8,2,1,3,1,3,1,4,1,4,1,5,1,
	5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,1057,8,5,1,6,1,6,
	1,6,3,6,1062,8,6,1,6,1,6,1,6,3,6,1067,8,6,1,6,1,6,1,6,1,6,3,6,1073,8,6,
	1,7,1,7,3,7,1077,8,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,1090,
	8,8,1,9,1,9,3,9,1094,8,9,1,9,1,9,3,9,1098,8,9,1,9,1,9,1,9,3,9,1103,8,9,
	1,10,1,10,1,10,1,10,1,10,3,10,1110,8,10,1,10,1,10,3,10,1114,8,10,1,11,1,
	11,1,11,3,11,1119,8,11,1,12,1,12,1,12,1,12,1,12,3,12,1126,8,12,1,12,1,12,
	3,12,1130,8,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,5,14,1139,8,14,10,14,
	12,14,1142,9,14,1,15,1,15,1,15,3,15,1147,8,15,1,16,1,16,1,16,1,16,1,16,
	3,16,1154,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
	17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
	17,1,17,1,17,1,17,1,17,3,17,1201,8,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,
	1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
	25,1,25,1,25,1,26,1,26,1,26,3,26,1230,8,26,1,26,1,26,3,26,1234,8,26,1,26,
	3,26,1237,8,26,1,26,3,26,1240,8,26,1,26,1,26,1,26,3,26,1245,8,26,1,26,1,
	26,1,26,1,26,3,26,1251,8,26,1,26,1,26,3,26,1255,8,26,1,26,1,26,1,26,1,26,
	3,26,1261,8,26,3,26,1263,8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,
	29,1,29,1,30,1,30,1,30,5,30,1278,8,30,10,30,12,30,1281,9,30,1,31,1,31,1,
	31,1,32,1,32,1,32,1,33,1,33,1,33,3,33,1292,8,33,1,33,1,33,3,33,1296,8,33,
	1,34,1,34,1,34,1,35,1,35,3,35,1303,8,35,1,35,1,35,1,35,1,35,1,35,1,35,3,
	35,1311,8,35,1,35,3,35,1314,8,35,1,36,1,36,1,36,3,36,1319,8,36,1,36,1,36,
	3,36,1323,8,36,1,36,3,36,1326,8,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,
	38,3,38,1336,8,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1344,8,38,5,38,1346,
	8,38,10,38,12,38,1349,9,38,3,38,1351,8,38,1,39,1,39,3,39,1355,8,39,1,40,
	1,40,3,40,1359,8,40,1,40,3,40,1362,8,40,1,41,1,41,1,41,3,41,1367,8,41,1,
	41,1,41,1,41,1,41,3,41,1373,8,41,1,41,1,41,1,41,3,41,1378,8,41,1,41,1,41,
	1,41,3,41,1383,8,41,1,41,1,41,3,41,1387,8,41,1,42,1,42,1,42,1,42,1,42,1,
	42,1,42,1,42,1,42,3,42,1398,8,42,3,42,1400,8,42,1,42,1,42,3,42,1404,8,42,
	1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,3,45,1414,8,45,1,45,1,45,3,45,1418,
	8,45,1,45,1,45,1,45,1,45,3,45,1424,8,45,1,45,3,45,1427,8,45,1,45,1,45,1,
	45,1,45,1,45,3,45,1434,8,45,1,45,1,45,1,45,3,45,1439,8,45,1,45,1,45,1,45,
	1,45,1,45,1,45,3,45,1447,8,45,1,45,1,45,1,45,3,45,1452,8,45,1,45,1,45,3,
	45,1456,8,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1464,8,45,1,45,1,45,1,45,
	3,45,1469,8,45,1,45,1,45,1,45,1,45,3,45,1475,8,45,1,45,1,45,1,45,1,45,3,
	45,1481,8,45,1,45,3,45,1484,8,45,1,45,3,45,1487,8,45,1,45,3,45,1490,8,45,
	1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1499,8,45,1,45,1,45,1,45,1,45,1,
	45,1,45,3,45,1507,8,45,1,45,1,45,1,45,3,45,1512,8,45,1,45,1,45,1,45,1,45,
	1,45,1,45,3,45,1520,8,45,1,45,1,45,1,45,1,45,1,45,3,45,1527,8,45,1,45,3,
	45,1530,8,45,1,45,3,45,1533,8,45,3,45,1535,8,45,1,45,1,45,1,45,1,45,1,45,
	1,45,3,45,1543,8,45,1,45,3,45,1546,8,45,1,45,3,45,1549,8,45,1,45,3,45,1552,
	8,45,1,45,3,45,1555,8,45,1,45,3,45,1558,8,45,1,45,3,45,1561,8,45,1,45,3,
	45,1564,8,45,1,45,3,45,1567,8,45,1,45,3,45,1570,8,45,1,45,3,45,1573,8,45,
	3,45,1575,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1587,
	8,45,1,45,1,45,3,45,1591,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,
	46,1601,8,46,1,47,1,47,1,47,1,47,3,47,1607,8,47,1,47,1,47,1,48,1,48,1,48,
	1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,3,50,1622,8,50,1,51,1,51,1,51,1,
	51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,3,54,1639,8,54,
	1,54,1,54,1,54,3,54,1644,8,54,1,55,1,55,3,55,1648,8,55,1,55,1,55,3,55,1652,
	8,55,1,55,1,55,1,55,1,56,1,56,3,56,1659,8,56,1,56,1,56,1,56,5,56,1664,8,
	56,10,56,12,56,1667,9,56,1,56,1,56,1,56,3,56,1672,8,56,1,57,1,57,3,57,1676,
	8,57,1,57,3,57,1679,8,57,1,57,1,57,1,57,5,57,1684,8,57,10,57,12,57,1687,
	9,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,
	60,1,60,1,61,1,61,1,61,1,61,1,61,3,61,1709,8,61,1,62,1,62,1,62,3,62,1714,
	8,62,1,62,1,62,3,62,1718,8,62,1,63,1,63,1,63,1,63,1,64,1,64,3,64,1726,8,
	64,1,65,1,65,1,65,1,66,1,66,1,66,1,66,3,66,1735,8,66,1,66,1,66,3,66,1739,
	8,66,1,66,1,66,1,66,1,66,3,66,1745,8,66,1,67,1,67,1,67,1,67,3,67,1751,8,
	67,1,67,1,67,1,67,1,67,1,67,3,67,1758,8,67,1,67,3,67,1761,8,67,1,67,1,67,
	1,67,1,67,3,67,1767,8,67,1,68,1,68,1,68,5,68,1772,8,68,10,68,12,68,1775,
	9,68,1,69,1,69,1,69,1,69,1,69,3,69,1782,8,69,1,70,1,70,1,71,1,71,1,71,5,
	71,1789,8,71,10,71,12,71,1792,9,71,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1800,
	8,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,
	76,1,76,1,76,1,77,1,77,3,77,1820,8,77,1,77,1,77,1,77,1,77,1,77,3,77,1827,
	8,77,3,77,1829,8,77,1,78,1,78,1,78,5,78,1834,8,78,10,78,12,78,1837,9,78,
	1,79,1,79,1,79,1,80,1,80,1,81,1,81,3,81,1846,8,81,1,81,1,81,1,81,1,81,1,
	81,1,81,3,81,1854,8,81,1,82,1,82,3,82,1858,8,82,1,82,1,82,3,82,1862,8,82,
	1,82,1,82,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1875,8,84,1,
	84,1,84,1,84,1,85,1,85,1,85,1,85,3,85,1884,8,85,1,85,1,85,1,86,1,86,3,86,
	1890,8,86,1,86,1,86,3,86,1894,8,86,1,86,1,86,1,86,1,86,1,86,3,86,1901,8,
	86,1,86,3,86,1904,8,86,1,86,3,86,1907,8,86,1,86,3,86,1910,8,86,1,86,1,86,
	1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1922,8,87,1,87,1,87,1,88,1,
	88,3,88,1928,8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,91,1,91,
	1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,3,93,1954,
	8,93,1,93,1,93,1,94,1,94,1,94,1,94,3,94,1962,8,94,1,94,1,94,3,94,1966,8,
	94,1,94,3,94,1969,8,94,1,94,3,94,1972,8,94,1,94,3,94,1975,8,94,1,94,3,94,
	1978,8,94,1,94,3,94,1981,8,94,1,94,3,94,1984,8,94,1,94,3,94,1987,8,94,1,
	94,1,94,1,94,1,95,1,95,1,95,1,95,3,95,1996,8,95,1,95,1,95,1,96,1,96,1,96,
	1,96,1,96,1,96,3,96,2006,8,96,1,96,3,96,2009,8,96,1,96,1,96,1,97,1,97,1,
	97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,3,99,
	2029,8,99,1,100,1,100,1,100,1,100,3,100,2035,8,100,1,100,1,100,1,100,1,
	100,3,100,2041,8,100,1,100,3,100,2044,8,100,3,100,2046,8,100,1,101,1,101,
	1,101,1,101,1,102,3,102,2053,8,102,1,102,1,102,1,102,1,103,1,103,3,103,
	2060,8,103,1,104,1,104,3,104,2064,8,104,1,105,1,105,1,105,1,106,1,106,1,
	106,1,106,1,106,3,106,2074,8,106,1,106,1,106,1,106,3,106,2079,8,106,1,106,
	1,106,1,107,1,107,1,107,5,107,2086,8,107,10,107,12,107,2089,9,107,1,108,
	1,108,1,108,5,108,2094,8,108,10,108,12,108,2097,9,108,1,109,1,109,1,109,
	5,109,2102,8,109,10,109,12,109,2105,9,109,1,110,1,110,1,111,1,111,1,111,
	1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,2122,
	8,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
	3,112,2135,8,112,1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,
	1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,2156,
	8,114,1,115,1,115,3,115,2160,8,115,1,116,1,116,1,116,1,117,1,117,1,117,
	1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,2175,8,118,1,119,1,119,
	1,119,1,119,3,119,2181,8,119,1,119,3,119,2184,8,119,1,119,3,119,2187,8,
	119,1,119,3,119,2190,8,119,1,119,3,119,2193,8,119,1,120,1,120,3,120,2197,
	8,120,1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,123,1,123,1,123,5,123,
	2209,8,123,10,123,12,123,2212,9,123,1,123,1,123,1,123,5,123,2217,8,123,
	10,123,12,123,2220,9,123,3,123,2222,8,123,1,124,1,124,1,124,1,124,1,125,
	1,125,1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,2237,8,126,1,127,
	1,127,1,127,1,127,1,127,1,127,1,128,1,128,1,128,1,128,1,128,1,128,1,129,
	1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,1,130,1,131,1,131,1,131,
	1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,2271,8,131,1,131,1,131,
	1,131,1,131,1,131,1,131,3,131,2279,8,131,1,131,1,131,1,131,3,131,2284,8,
	131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,2292,8,131,1,131,1,131,1,
	131,3,131,2297,8,131,1,131,1,131,1,131,3,131,2302,8,131,1,132,1,132,1,132,
	1,133,1,133,1,133,5,133,2310,8,133,10,133,12,133,2313,9,133,1,134,1,134,
	1,134,5,134,2318,8,134,10,134,12,134,2321,9,134,1,135,1,135,1,135,5,135,
	2326,8,135,10,135,12,135,2329,9,135,1,136,1,136,1,136,5,136,2334,8,136,
	10,136,12,136,2337,9,136,1,137,1,137,1,138,1,138,1,138,1,138,1,138,1,138,
	3,138,2347,8,138,5,138,2349,8,138,10,138,12,138,2352,9,138,1,139,1,139,
	1,139,5,139,2357,8,139,10,139,12,139,2360,9,139,1,140,1,140,1,140,1,140,
	1,141,1,141,3,141,2368,8,141,1,141,3,141,2371,8,141,1,142,1,142,1,143,1,
	143,1,144,1,144,1,144,3,144,2380,8,144,1,145,1,145,1,146,1,146,3,146,2386,
	8,146,1,146,1,146,3,146,2390,8,146,1,147,1,147,1,147,1,147,3,147,2396,8,
	147,1,148,1,148,3,148,2400,8,148,1,149,1,149,1,149,1,150,1,150,1,150,1,
	150,1,150,1,151,1,151,3,151,2412,8,151,1,151,1,151,1,151,1,151,1,151,1,
	151,1,151,3,151,2421,8,151,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,
	152,1,152,3,152,2432,8,152,1,153,1,153,3,153,2436,8,153,1,154,1,154,1,154,
	5,154,2441,8,154,10,154,12,154,2444,9,154,1,155,1,155,1,155,1,155,1,156,
	1,156,1,156,5,156,2453,8,156,10,156,12,156,2456,9,156,1,157,1,157,1,158,
	1,158,3,158,2462,8,158,1,159,1,159,1,160,1,160,1,160,1,161,1,161,3,161,
	2471,8,161,1,161,3,161,2474,8,161,1,162,1,162,1,162,5,162,2479,8,162,10,
	162,12,162,2482,9,162,1,163,1,163,1,163,3,163,2487,8,163,1,164,1,164,1,
	165,1,165,3,165,2493,8,165,1,165,3,165,2496,8,165,1,166,1,166,1,166,1,166,
	3,166,2502,8,166,1,167,1,167,3,167,2506,8,167,1,168,1,168,3,168,2510,8,
	168,1,169,1,169,1,169,3,169,2515,8,169,1,169,1,169,3,169,2519,8,169,1,170,
	1,170,3,170,2523,8,170,1,171,1,171,3,171,2527,8,171,1,171,1,171,1,171,1,
	171,1,171,1,171,3,171,2535,8,171,1,172,1,172,3,172,2539,8,172,1,172,1,172,
	3,172,2543,8,172,1,173,1,173,3,173,2547,8,173,1,174,1,174,3,174,2551,8,
	174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,2559,8,174,1,175,1,175,3,
	175,2563,8,175,1,175,1,175,3,175,2567,8,175,1,176,1,176,1,176,1,176,1,176,
	1,176,3,176,2575,8,176,1,177,1,177,1,177,3,177,2580,8,177,1,178,1,178,1,
	178,3,178,2585,8,178,1,179,1,179,3,179,2589,8,179,1,180,1,180,3,180,2593,
	8,180,1,181,1,181,1,181,1,181,1,181,3,181,2600,8,181,1,182,1,182,1,183,
	1,183,1,183,5,183,2607,8,183,10,183,12,183,2610,9,183,1,184,1,184,1,184,
	1,184,1,184,3,184,2617,8,184,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
	1,185,1,185,3,185,2628,8,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
	1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,3,185,2646,8,185,
	1,185,3,185,2649,8,185,1,185,1,185,1,185,1,185,3,185,2655,8,185,1,186,1,
	186,1,186,1,186,1,186,1,187,1,187,1,187,1,187,1,187,1,188,1,188,1,188,1,
	188,1,188,1,188,1,188,1,189,1,189,1,189,1,189,1,189,1,190,1,190,3,190,2681,
	8,190,1,191,3,191,2684,8,191,1,191,1,191,1,192,1,192,3,192,2690,8,192,1,
	193,1,193,1,193,1,193,5,193,2696,8,193,10,193,12,193,2699,9,193,1,194,1,
	194,1,194,1,194,1,194,3,194,2706,8,194,1,194,1,194,1,194,1,194,1,194,1,
	195,1,195,1,195,1,195,5,195,2717,8,195,10,195,12,195,2720,9,195,1,196,1,
	196,4,196,2724,8,196,11,196,12,196,2725,1,197,1,197,1,197,1,197,3,197,2732,
	8,197,1,198,1,198,3,198,2736,8,198,1,198,3,198,2739,8,198,1,198,3,198,2742,
	8,198,1,198,3,198,2745,8,198,1,198,3,198,2748,8,198,1,198,3,198,2751,8,
	198,1,198,1,198,1,198,1,198,1,198,3,198,2758,8,198,1,199,1,199,3,199,2762,
	8,199,1,199,3,199,2765,8,199,1,199,3,199,2768,8,199,1,199,3,199,2771,8,
	199,1,199,3,199,2774,8,199,1,199,3,199,2777,8,199,1,200,1,200,1,200,4,200,
	2782,8,200,11,200,12,200,2783,1,201,3,201,2787,8,201,1,201,1,201,1,202,
	1,202,1,202,3,202,2794,8,202,1,202,3,202,2797,8,202,1,202,3,202,2800,8,
	202,1,202,3,202,2803,8,202,1,202,3,202,2806,8,202,1,202,3,202,2809,8,202,
	1,202,3,202,2812,8,202,1,202,3,202,2815,8,202,1,202,3,202,2818,8,202,1,
	202,3,202,2821,8,202,1,202,3,202,2824,8,202,1,202,1,202,3,202,2828,8,202,
	1,202,3,202,2831,8,202,1,202,3,202,2834,8,202,1,202,3,202,2837,8,202,1,
	202,3,202,2840,8,202,1,202,3,202,2843,8,202,1,202,3,202,2846,8,202,1,202,
	3,202,2849,8,202,1,202,3,202,2852,8,202,1,202,3,202,2855,8,202,1,202,3,
	202,2858,8,202,3,202,2860,8,202,1,203,1,203,1,203,1,203,3,203,2866,8,203,
	1,203,1,203,3,203,2870,8,203,1,203,1,203,1,203,1,203,1,203,3,203,2877,8,
	203,3,203,2879,8,203,1,204,3,204,2882,8,204,1,204,1,204,1,204,3,204,2887,
	8,204,1,204,3,204,2890,8,204,1,204,1,204,3,204,2894,8,204,1,205,1,205,1,
	205,3,205,2899,8,205,1,205,1,205,1,205,1,205,3,205,2905,8,205,1,206,1,206,
	1,206,1,206,3,206,2911,8,206,1,207,1,207,1,207,1,207,1,208,1,208,3,208,
	2919,8,208,1,209,1,209,1,209,1,209,5,209,2925,8,209,10,209,12,209,2928,
	9,209,1,210,1,210,1,210,1,210,3,210,2934,8,210,1,211,1,211,1,211,1,211,
	3,211,2940,8,211,1,212,1,212,1,212,1,212,1,212,5,212,2947,8,212,10,212,
	12,212,2950,9,212,3,212,2952,8,212,1,213,1,213,3,213,2956,8,213,1,214,1,
	214,1,214,1,215,1,215,1,215,1,215,1,216,1,216,1,217,1,217,3,217,2969,8,
	217,1,218,1,218,3,218,2973,8,218,1,219,1,219,1,219,1,219,1,220,1,220,1,
	220,4,220,2982,8,220,11,220,12,220,2983,1,221,1,221,1,221,4,221,2989,8,
	221,11,221,12,221,2990,1,222,1,222,3,222,2995,8,222,1,222,1,222,1,222,3,
	222,3000,8,222,1,222,3,222,3003,8,222,1,222,1,222,1,222,1,222,1,222,1,222,
	1,223,1,223,5,223,3013,8,223,10,223,12,223,3016,9,223,1,223,3,223,3019,
	8,223,1,224,1,224,1,224,1,224,1,224,3,224,3026,8,224,1,224,1,224,1,224,
	3,224,3031,8,224,1,224,1,224,1,224,1,225,1,225,1,225,1,225,1,225,1,225,
	1,225,1,226,1,226,1,226,1,226,1,226,1,227,1,227,1,227,3,227,3051,8,227,
	1,228,1,228,1,228,4,228,3056,8,228,11,228,12,228,3057,1,229,1,229,1,229,
	1,229,1,230,1,230,1,230,1,231,1,231,1,231,1,232,1,232,1,232,1,233,1,233,
	1,233,1,233,1,233,1,233,1,233,1,233,3,233,3081,8,233,1,233,1,233,1,233,
	1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,3095,8,233,
	1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,
	1,234,1,234,1,234,1,234,1,234,1,234,1,234,3,234,3116,8,234,1,235,1,235,
	1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,
	3,235,3132,8,235,1,236,1,236,1,236,1,236,1,236,1,236,1,237,1,237,1,237,
	1,237,1,237,3,237,3145,8,237,1,238,1,238,3,238,3149,8,238,1,239,1,239,3,
	239,3153,8,239,1,240,1,240,1,241,1,241,1,241,3,241,3160,8,241,1,242,1,242,
	1,242,1,242,1,242,1,243,1,243,1,243,1,243,1,243,1,244,1,244,1,244,1,244,
	1,244,1,245,1,245,1,245,1,245,1,245,1,246,1,246,1,246,1,246,1,247,1,247,
	3,247,3188,8,247,1,247,1,247,1,247,1,247,1,247,3,247,3195,8,247,1,248,1,
	248,1,248,3,248,3200,8,248,1,249,1,249,1,249,3,249,3205,8,249,1,250,1,250,
	1,250,1,250,1,251,1,251,3,251,3213,8,251,1,251,1,251,1,251,1,251,3,251,
	3219,8,251,1,251,1,251,3,251,3223,8,251,1,251,3,251,3226,8,251,1,251,3,
	251,3229,8,251,1,252,1,252,1,252,1,252,3,252,3235,8,252,1,252,1,252,1,252,
	1,252,1,252,3,252,3242,8,252,1,253,1,253,1,253,1,253,1,253,1,254,1,254,
	1,254,3,254,3252,8,254,1,255,1,255,3,255,3256,8,255,1,255,4,255,3259,8,
	255,11,255,12,255,3260,1,256,1,256,3,256,3265,8,256,1,257,1,257,5,257,3269,
	8,257,10,257,12,257,3272,9,257,1,258,1,258,5,258,3276,8,258,10,258,12,258,
	3279,9,258,1,259,1,259,5,259,3283,8,259,10,259,12,259,3286,9,259,1,260,
	1,260,1,260,1,261,1,261,3,261,3293,8,261,1,261,1,261,1,261,1,261,1,261,
	5,261,3300,8,261,10,261,12,261,3303,9,261,1,261,3,261,3306,8,261,1,261,
	3,261,3309,8,261,1,262,1,262,1,262,1,262,1,262,1,262,3,262,3317,8,262,1,
	262,3,262,3320,8,262,1,263,1,263,1,263,1,263,1,263,1,263,3,263,3328,8,263,
	1,263,3,263,3331,8,263,1,264,1,264,1,264,1,264,1,264,1,264,3,264,3339,8,
	264,1,264,1,264,3,264,3343,8,264,1,264,1,264,1,264,3,264,3348,8,264,1,265,
	1,265,3,265,3352,8,265,1,266,1,266,1,266,1,266,1,267,1,267,1,267,3,267,
	3361,8,267,1,268,1,268,1,268,1,268,1,268,1,269,1,269,1,269,1,269,1,270,
	1,270,1,270,5,270,3375,8,270,10,270,12,270,3378,9,270,1,271,1,271,1,271,
	1,271,1,272,1,272,1,272,1,272,1,273,1,273,1,273,1,273,3,273,3392,8,273,
	3,273,3394,8,273,1,274,1,274,1,274,1,274,1,274,1,274,1,275,1,275,1,275,
	1,275,1,276,1,276,1,276,1,276,3,276,3410,8,276,1,276,1,276,1,276,1,276,
	1,276,3,276,3417,8,276,1,277,1,277,1,278,1,278,1,278,1,278,1,279,1,279,
	1,279,1,280,1,280,1,280,1,281,1,281,1,281,3,281,3434,8,281,1,281,3,281,
	3437,8,281,1,281,3,281,3440,8,281,1,281,1,281,1,281,1,281,3,281,3446,8,
	281,1,282,1,282,1,282,1,282,1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,
	284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,1,284,3,284,3469,8,
	284,1,284,1,284,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,285,1,
	285,3,285,3483,8,285,1,285,3,285,3486,8,285,1,286,1,286,1,286,3,286,3491,
	8,286,1,287,1,287,1,287,1,287,1,287,1,288,1,288,1,288,1,288,1,288,1,289,
	1,289,1,289,1,289,1,289,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,
	1,290,3,290,3517,8,290,1,291,1,291,3,291,3521,8,291,1,291,3,291,3524,8,
	291,1,291,3,291,3527,8,291,1,291,1,291,3,291,3531,8,291,1,291,1,291,1,291,
	3,291,3536,8,291,1,291,3,291,3539,8,291,1,291,3,291,3542,8,291,1,291,3,
	291,3545,8,291,1,291,3,291,3548,8,291,1,291,1,291,1,291,1,291,3,291,3554,
	8,291,1,291,3,291,3557,8,291,1,291,3,291,3560,8,291,1,291,3,291,3563,8,
	291,1,291,3,291,3566,8,291,1,291,3,291,3569,8,291,1,291,3,291,3572,8,291,
	1,291,3,291,3575,8,291,1,291,3,291,3578,8,291,1,291,1,291,3,291,3582,8,
	291,3,291,3584,8,291,1,291,1,291,1,291,1,291,3,291,3590,8,291,1,291,1,291,
	1,291,3,291,3595,8,291,1,291,3,291,3598,8,291,1,291,3,291,3601,8,291,1,
	291,3,291,3604,8,291,1,291,1,291,1,291,1,291,3,291,3610,8,291,1,291,3,291,
	3613,8,291,1,291,3,291,3616,8,291,1,291,3,291,3619,8,291,1,291,3,291,3622,
	8,291,1,291,3,291,3625,8,291,1,291,3,291,3628,8,291,1,291,3,291,3631,8,
	291,1,291,3,291,3634,8,291,1,291,1,291,3,291,3638,8,291,3,291,3640,8,291,
	3,291,3642,8,291,1,292,1,292,1,292,3,292,3647,8,292,1,292,1,292,1,292,1,
	292,3,292,3653,8,292,1,292,1,292,1,292,3,292,3658,8,292,1,293,1,293,1,293,
	1,294,1,294,1,294,1,295,1,295,1,295,1,296,1,296,1,296,1,296,1,297,1,297,
	1,297,3,297,3676,8,297,1,297,1,297,1,298,1,298,1,298,1,298,1,298,3,298,
	3685,8,298,1,299,1,299,1,300,1,300,1,301,1,301,1,301,5,301,3694,8,301,10,
	301,12,301,3697,9,301,1,302,1,302,1,302,5,302,3702,8,302,10,302,12,302,
	3705,9,302,1,303,1,303,1,303,1,304,1,304,1,304,1,304,4,304,3714,8,304,11,
	304,12,304,3715,1,304,3,304,3719,8,304,1,305,1,305,5,305,3723,8,305,10,
	305,12,305,3726,9,305,1,305,1,305,5,305,3730,8,305,10,305,12,305,3733,9,
	305,1,305,1,305,5,305,3737,8,305,10,305,12,305,3740,9,305,1,305,1,305,5,
	305,3744,8,305,10,305,12,305,3747,9,305,1,305,1,305,1,305,1,305,3,305,3753,
	8,305,1,306,1,306,1,306,1,306,1,306,1,306,1,306,3,306,3762,8,306,5,306,
	3764,8,306,10,306,12,306,3767,9,306,1,307,1,307,1,307,1,307,3,307,3773,
	8,307,1,307,5,307,3776,8,307,10,307,12,307,3779,9,307,1,308,3,308,3782,
	8,308,1,308,1,308,1,308,1,309,1,309,1,309,1,309,1,310,1,310,1,311,1,311,
	1,311,1,311,1,311,3,311,3798,8,311,1,311,1,311,3,311,3802,8,311,3,311,3804,
	8,311,1,311,3,311,3807,8,311,1,312,1,312,1,312,1,312,1,312,1,312,1,312,
	1,312,1,312,5,312,3818,8,312,10,312,12,312,3821,9,312,3,312,3823,8,312,
	1,312,3,312,3826,8,312,1,312,1,312,1,312,1,312,1,312,1,312,1,312,1,312,
	5,312,3836,8,312,10,312,12,312,3839,9,312,3,312,3841,8,312,1,312,1,312,
	1,312,1,312,1,312,3,312,3848,8,312,1,312,1,312,1,312,1,312,1,312,5,312,
	3855,8,312,10,312,12,312,3858,9,312,1,312,1,312,3,312,3862,8,312,3,312,
	3864,8,312,3,312,3866,8,312,1,313,1,313,1,314,1,314,1,314,1,314,1,314,1,
	314,1,314,1,314,1,314,1,314,1,314,5,314,3881,8,314,10,314,12,314,3884,9,
	314,3,314,3886,8,314,1,314,1,314,1,315,1,315,1,315,1,315,1,315,3,315,3895,
	8,315,1,315,1,315,1,316,1,316,3,316,3901,8,316,1,317,1,317,3,317,3905,8,
	317,1,317,3,317,3908,8,317,1,317,3,317,3911,8,317,1,317,3,317,3914,8,317,
	1,317,3,317,3917,8,317,1,318,1,318,1,318,1,318,1,318,1,318,1,318,1,318,
	1,318,1,318,3,318,3929,8,318,1,319,1,319,3,319,3933,8,319,1,319,3,319,3936,
	8,319,1,319,3,319,3939,8,319,1,320,1,320,1,320,1,320,1,320,3,320,3946,8,
	320,1,320,3,320,3949,8,320,1,321,1,321,1,321,3,321,3954,8,321,1,321,1,321,
	1,322,1,322,1,322,1,322,3,322,3962,8,322,1,322,1,322,1,323,1,323,3,323,
	3968,8,323,1,323,1,323,1,323,3,323,3973,8,323,1,323,1,323,3,323,3977,8,
	323,1,324,1,324,1,324,3,324,3982,8,324,1,325,1,325,1,325,1,325,1,325,3,
	325,3989,8,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,
	325,5,325,4001,8,325,10,325,12,325,4004,9,325,3,325,4006,8,325,1,325,1,
	325,3,325,4010,8,325,1,326,1,326,1,326,1,327,1,327,1,328,1,328,1,329,1,
	329,1,329,1,330,1,330,1,330,5,330,4025,8,330,10,330,12,330,4028,9,330,1,
	330,1,330,1,330,5,330,4033,8,330,10,330,12,330,4036,9,330,3,330,4038,8,
	330,1,331,1,331,1,332,1,332,1,332,1,332,1,333,1,333,1,333,1,333,1,333,3,
	333,4051,8,333,1,333,1,333,1,333,1,333,1,333,5,333,4058,8,333,10,333,12,
	333,4061,9,333,3,333,4063,8,333,1,333,1,333,1,334,1,334,3,334,4069,8,334,
	1,334,3,334,4072,8,334,1,334,1,334,1,334,3,334,4077,8,334,1,334,3,334,4080,
	8,334,1,335,1,335,1,336,1,336,1,336,5,336,4087,8,336,10,336,12,336,4090,
	9,336,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,
	3,337,4103,8,337,1,337,1,337,1,337,1,337,3,337,4109,8,337,3,337,4111,8,
	337,1,337,1,337,1,337,1,338,1,338,1,338,3,338,4119,8,338,1,338,1,338,1,
	338,1,338,1,338,1,338,5,338,4127,8,338,10,338,12,338,4130,9,338,1,338,1,
	338,3,338,4134,8,338,3,338,4136,8,338,1,339,1,339,1,339,1,339,1,339,1,339,
	1,339,1,339,1,339,1,339,3,339,4148,8,339,1,339,1,339,1,339,1,339,3,339,
	4154,8,339,3,339,4156,8,339,1,339,1,339,1,339,1,340,1,340,3,340,4163,8,
	340,1,341,1,341,1,341,5,341,4168,8,341,10,341,12,341,4171,9,341,1,342,1,
	342,1,342,1,342,5,342,4177,8,342,10,342,12,342,4180,9,342,1,343,1,343,1,
	343,1,343,1,344,1,344,1,344,3,344,4189,8,344,1,344,3,344,4192,8,344,1,344,
	3,344,4195,8,344,1,344,3,344,4198,8,344,1,345,1,345,3,345,4202,8,345,1,
	346,1,346,1,346,1,346,1,346,1,346,1,346,3,346,4211,8,346,1,347,1,347,1,
	347,1,347,1,347,1,347,1,347,3,347,4220,8,347,1,348,1,348,1,348,1,348,1,
	348,1,348,3,348,4228,8,348,1,349,1,349,1,349,1,349,3,349,4234,8,349,1,350,
	1,350,1,350,1,350,1,351,1,351,1,351,3,351,4243,8,351,1,352,1,352,1,352,
	1,353,1,353,3,353,4250,8,353,1,353,1,353,1,353,1,353,5,353,4256,8,353,10,
	353,12,353,4259,9,353,1,353,1,353,1,354,1,354,1,354,1,354,1,354,3,354,4268,
	8,354,1,354,1,354,1,354,1,354,1,354,1,354,5,354,4276,8,354,10,354,12,354,
	4279,9,354,1,354,1,354,3,354,4283,8,354,1,355,1,355,3,355,4287,8,355,1,
	356,1,356,3,356,4291,8,356,1,356,1,356,5,356,4295,8,356,10,356,12,356,4298,
	9,356,1,356,1,356,1,357,1,357,1,358,1,358,1,358,1,359,1,359,1,359,1,360,
	1,360,1,361,1,361,1,361,1,361,1,362,1,362,3,362,4318,8,362,1,363,1,363,
	4,363,4322,8,363,11,363,12,363,4323,1,364,1,364,3,364,4328,8,364,1,365,
	1,365,3,365,4332,8,365,1,365,3,365,4335,8,365,1,365,1,365,5,365,4339,8,
	365,10,365,12,365,4342,9,365,1,366,1,366,3,366,4346,8,366,1,366,3,366,4349,
	8,366,1,367,1,367,3,367,4353,8,367,1,368,1,368,1,368,1,368,5,368,4359,8,
	368,10,368,12,368,4362,9,368,1,368,1,368,1,369,1,369,1,369,5,369,4369,8,
	369,10,369,12,369,4372,9,369,1,370,1,370,1,370,1,370,1,370,5,370,4379,8,
	370,10,370,12,370,4382,9,370,1,371,1,371,1,371,1,371,1,372,1,372,1,372,
	1,372,1,373,1,373,1,373,1,373,1,374,1,374,1,374,1,374,3,374,4400,8,374,
	1,375,1,375,1,375,1,375,1,375,3,375,4407,8,375,1,375,3,375,4410,8,375,1,
	375,1,375,1,375,1,375,1,376,1,376,1,376,1,376,1,376,3,376,4421,8,376,1,
	376,1,376,1,376,5,376,4426,8,376,10,376,12,376,4429,9,376,3,376,4431,8,
	376,3,376,4433,8,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,
	376,3,376,4444,8,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,1,376,3,
	376,4454,8,376,3,376,4456,8,376,1,377,1,377,1,377,1,377,3,377,4462,8,377,
	1,378,1,378,3,378,4466,8,378,1,379,1,379,1,379,1,379,1,379,1,379,1,379,
	3,379,4475,8,379,1,379,1,379,1,380,1,380,1,380,1,380,1,380,1,380,1,380,
	4,380,4486,8,380,11,380,12,380,4487,1,380,1,380,3,380,4492,8,380,1,380,
	1,380,1,381,1,381,1,381,1,381,1,381,1,381,4,381,4502,8,381,11,381,12,381,
	4503,1,381,1,381,3,381,4508,8,381,1,381,1,381,1,382,1,382,1,382,1,382,1,
	382,3,382,4517,8,382,1,382,1,382,1,383,1,383,1,384,1,384,1,384,1,384,1,
	384,1,384,1,384,1,385,1,385,1,386,1,386,1,386,1,386,1,386,1,386,1,386,1,
	386,1,386,1,386,1,386,1,386,1,386,3,386,4545,8,386,1,387,1,387,1,388,1,
	388,1,389,1,389,4,389,4553,8,389,11,389,12,389,4554,1,390,1,390,1,390,1,
	391,1,391,1,391,3,391,4563,8,391,1,392,1,392,1,392,3,392,4568,8,392,1,393,
	1,393,1,393,1,394,1,394,1,395,1,395,1,395,1,396,1,396,1,396,1,396,1,396,
	1,396,1,396,1,396,1,396,1,396,1,396,3,396,4589,8,396,1,396,1,396,3,396,
	4593,8,396,1,397,1,397,1,397,1,397,1,397,1,397,1,397,1,397,1,397,1,397,
	1,397,1,397,3,397,4607,8,397,1,398,1,398,1,399,1,399,1,399,1,399,1,399,
	1,399,1,399,1,399,1,399,1,399,1,399,3,399,4622,8,399,1,400,1,400,1,400,
	1,400,1,400,1,400,1,400,5,400,4631,8,400,10,400,12,400,4634,9,400,1,401,
	1,401,1,402,5,402,4639,8,402,10,402,12,402,4642,9,402,1,402,1,402,1,403,
	1,403,1,404,1,404,1,404,1,404,5,404,4652,8,404,10,404,12,404,4655,9,404,
	1,405,1,405,1,406,1,406,1,406,1,406,5,406,4663,8,406,10,406,12,406,4666,
	9,406,1,407,1,407,1,408,1,408,1,408,1,408,5,408,4674,8,408,10,408,12,408,
	4677,9,408,1,409,1,409,1,410,1,410,1,410,1,410,5,410,4685,8,410,10,410,
	12,410,4688,9,410,1,411,1,411,1,412,1,412,1,412,1,412,5,412,4696,8,412,
	10,412,12,412,4699,9,412,1,413,1,413,1,414,1,414,1,414,1,414,5,414,4707,
	8,414,10,414,12,414,4710,9,414,1,415,1,415,1,416,1,416,1,416,1,416,1,416,
	3,416,4719,8,416,1,417,1,417,1,417,1,417,1,418,1,418,1,418,3,418,4728,8,
	418,1,419,1,419,3,419,4732,8,419,1,420,1,420,1,420,1,420,1,420,1,420,3,
	420,4740,8,420,1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,
	421,1,421,3,421,4753,8,421,1,422,1,422,1,422,1,422,1,423,1,423,1,424,1,
	424,3,424,4763,8,424,1,425,1,425,1,425,1,425,3,425,4769,8,425,1,426,1,426,
	1,426,1,426,1,427,1,427,1,427,1,427,1,427,1,427,1,427,3,427,4782,8,427,
	1,428,1,428,1,428,1,428,1,428,1,428,1,428,5,428,4791,8,428,10,428,12,428,
	4794,9,428,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,1,429,
	1,429,1,429,3,429,4808,8,429,1,430,1,430,1,430,3,430,4813,8,430,1,431,1,
	431,1,432,5,432,4818,8,432,10,432,12,432,4821,9,432,1,432,1,432,1,433,1,
	433,1,434,1,434,1,434,1,434,5,434,4831,8,434,10,434,12,434,4834,9,434,1,
	435,1,435,1,436,1,436,1,436,1,436,5,436,4842,8,436,10,436,12,436,4845,9,
	436,1,437,1,437,1,438,1,438,1,439,1,439,3,439,4853,8,439,1,440,1,440,1,
	440,1,440,1,440,5,440,4860,8,440,10,440,12,440,4863,9,440,1,440,1,440,1,
	441,1,441,1,441,3,441,4870,8,441,1,442,1,442,1,442,1,442,5,442,4876,8,442,
	10,442,12,442,4879,9,442,1,442,1,442,1,443,1,443,1,443,1,443,1,444,1,444,
	3,444,4889,8,444,1,445,1,445,1,446,1,446,1,447,1,447,1,447,3,447,4898,8,
	447,1,448,1,448,3,448,4902,8,448,1,449,1,449,1,449,3,449,4907,8,449,1,450,
	1,450,1,451,1,451,1,452,1,452,1,453,1,453,1,453,1,454,1,454,1,454,5,454,
	4921,8,454,10,454,12,454,4924,9,454,1,455,1,455,1,455,1,455,1,455,3,455,
	4931,8,455,1,456,1,456,1,457,1,457,1,457,5,457,4938,8,457,10,457,12,457,
	4941,9,457,1,458,1,458,1,459,1,459,1,459,1,459,1,459,1,460,1,460,1,460,
	1,460,1,460,1,461,1,461,1,461,5,461,4958,8,461,10,461,12,461,4961,9,461,
	1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,
	1,462,1,462,3,462,4977,8,462,1,463,1,463,1,463,1,463,1,463,1,463,1,463,
	3,463,4986,8,463,1,464,1,464,1,464,5,464,4991,8,464,10,464,12,464,4994,
	9,464,1,465,1,465,1,465,3,465,4999,8,465,1,466,1,466,1,466,5,466,5004,8,
	466,10,466,12,466,5007,9,466,1,467,1,467,1,467,1,467,3,467,5013,8,467,1,
	467,1,467,1,467,1,467,1,467,1,467,1,467,3,467,5022,8,467,3,467,5024,8,467,
	1,468,1,468,1,468,1,469,1,469,3,469,5031,8,469,1,470,1,470,1,471,1,471,
	1,472,1,472,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,
	1,473,1,473,1,473,1,473,1,473,3,473,5054,8,473,1,473,1,473,3,473,5058,8,
	473,3,473,5060,8,473,1,474,1,474,1,474,1,474,1,475,1,475,1,475,1,475,1,
	475,1,475,1,475,1,475,1,475,1,475,1,475,1,475,3,475,5078,8,475,1,476,1,
	476,1,476,1,476,3,476,5084,8,476,1,476,1,476,1,477,1,477,1,477,5,477,5091,
	8,477,10,477,12,477,5094,9,477,1,478,1,478,1,479,1,479,1,479,1,480,1,480,
	1,480,5,480,5104,8,480,10,480,12,480,5107,9,480,1,481,1,481,1,481,5,481,
	5112,8,481,10,481,12,481,5115,9,481,1,482,1,482,1,482,1,482,1,483,1,483,
	1,484,1,484,1,485,1,485,1,485,1,485,3,485,5129,8,485,1,486,1,486,1,486,
	1,487,1,487,1,487,1,487,1,487,1,487,1,487,1,487,1,487,1,487,1,488,1,488,
	1,488,1,488,1,488,1,488,1,488,1,488,1,488,1,488,1,488,1,488,1,488,1,488,
	3,488,5158,8,488,1,488,1,488,1,488,3,488,5163,8,488,3,488,5165,8,488,1,
	489,1,489,1,489,1,489,1,489,1,489,1,490,1,490,1,490,1,490,1,490,1,490,1,
	490,1,490,1,490,1,490,1,490,1,490,3,490,5185,8,490,1,491,1,491,1,491,5,
	491,5190,8,491,10,491,12,491,5193,9,491,1,492,1,492,1,492,1,492,1,492,1,
	492,1,492,1,492,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,493,1,
	493,1,493,1,493,3,493,5215,8,493,1,494,1,494,1,494,1,494,1,494,1,494,1,
	495,1,495,1,495,1,495,1,495,1,495,1,495,1,495,1,495,3,495,5232,8,495,1,
	495,1,495,1,495,3,495,5237,8,495,1,496,1,496,1,496,1,496,1,496,1,496,1,
	496,1,496,1,496,3,496,5248,8,496,1,496,1,496,1,496,3,496,5253,8,496,1,497,
	1,497,1,497,1,497,1,497,1,497,1,497,1,497,0,0,498,0,2,4,6,8,10,12,14,16,
	18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
	66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
	110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
	146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
	182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
	218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
	254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,
	290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
	326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,
	362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,
	398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,
	434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,
	470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,
	506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,
	542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,
	578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,
	614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,
	650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,
	686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,
	722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,
	758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,
	794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,
	830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,
	866,868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900,
	902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,
	938,940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,
	974,976,978,980,982,984,986,988,990,992,994,0,49,2,0,57,57,165,165,4,0,
	88,88,116,116,216,216,314,314,2,0,34,34,272,272,1,0,86,87,2,0,134,134,148,
	148,2,0,67,67,285,285,2,0,68,68,286,286,2,0,109,109,296,296,10,0,7,7,9,
	9,58,58,83,83,98,98,155,155,182,182,288,288,298,298,354,354,3,0,4,4,98,
	98,315,315,3,0,15,15,123,123,163,163,1,0,136,137,4,0,73,73,143,143,199,
	199,380,380,2,0,30,30,340,340,2,0,91,91,102,102,2,0,207,207,362,362,2,0,
	204,204,262,262,2,0,18,18,86,86,2,0,125,125,170,170,2,0,39,39,365,365,4,
	0,107,107,157,157,197,197,345,345,2,0,7,7,92,92,2,0,215,215,379,379,2,0,
	181,181,188,188,2,0,42,42,304,304,2,0,412,412,417,417,2,0,135,135,275,275,
	3,0,12,12,221,221,289,289,2,0,231,231,282,282,2,0,190,190,258,258,2,0,343,
	343,417,417,2,0,128,128,237,237,7,0,73,73,143,143,198,199,247,247,287,287,
	370,370,380,380,8,0,73,73,97,97,143,143,198,199,247,247,287,287,370,370,
	380,380,2,0,400,401,406,406,2,0,399,399,402,404,1,0,400,401,3,0,176,176,
	260,260,276,276,2,0,7,7,13,13,3,0,7,7,13,13,302,302,2,0,120,120,339,339,
	2,0,392,392,394,398,23,0,11,11,16,16,25,28,35,35,96,96,126,127,145,145,
	148,148,156,156,176,176,190,190,206,206,218,218,254,254,260,260,276,276,
	300,300,312,313,329,329,346,346,371,371,392,407,409,409,86,0,1,6,8,8,10,
	10,15,15,18,20,22,24,30,31,33,34,37,38,40,44,46,47,49,50,52,53,56,57,59,
	59,66,66,68,68,72,76,78,78,80,82,84,86,88,91,93,95,97,97,99,100,102,102,
	104,106,109,111,113,116,122,125,132,133,137,137,142,144,146,146,149,150,
	152,154,161,163,165,170,175,175,177,179,181,185,187,189,191,194,196,196,
	198,199,201,202,204,205,207,208,210,210,212,213,216,217,222,223,225,226,
	228,230,233,236,242,242,244,245,247,249,251,252,255,257,261,272,274,274,
	277,278,283,287,289,292,294,299,301,301,303,306,308,314,316,317,319,319,
	321,323,328,329,331,331,333,335,338,338,341,342,344,344,346,346,349,353,
	355,357,360,362,364,364,366,370,373,373,376,381,13,0,16,16,26,28,63,64,
	71,71,96,96,126,126,140,140,145,145,156,156,190,190,254,254,300,300,326,
	326,4,0,191,191,232,232,289,289,311,311,2,0,203,203,417,418,2,0,4,4,98,
	98,3,0,14,14,139,139,358,358,5626,0,998,1,0,0,0,2,1002,1,0,0,0,4,1036,1,
	0,0,0,6,1038,1,0,0,0,8,1040,1,0,0,0,10,1056,1,0,0,0,12,1058,1,0,0,0,14,
	1074,1,0,0,0,16,1083,1,0,0,0,18,1091,1,0,0,0,20,1104,1,0,0,0,22,1115,1,
	0,0,0,24,1120,1,0,0,0,26,1131,1,0,0,0,28,1135,1,0,0,0,30,1143,1,0,0,0,32,
	1148,1,0,0,0,34,1200,1,0,0,0,36,1202,1,0,0,0,38,1205,1,0,0,0,40,1207,1,
	0,0,0,42,1211,1,0,0,0,44,1213,1,0,0,0,46,1216,1,0,0,0,48,1219,1,0,0,0,50,
	1223,1,0,0,0,52,1262,1,0,0,0,54,1264,1,0,0,0,56,1267,1,0,0,0,58,1270,1,
	0,0,0,60,1274,1,0,0,0,62,1282,1,0,0,0,64,1285,1,0,0,0,66,1288,1,0,0,0,68,
	1297,1,0,0,0,70,1300,1,0,0,0,72,1315,1,0,0,0,74,1327,1,0,0,0,76,1332,1,
	0,0,0,78,1352,1,0,0,0,80,1356,1,0,0,0,82,1363,1,0,0,0,84,1388,1,0,0,0,86,
	1405,1,0,0,0,88,1407,1,0,0,0,90,1590,1,0,0,0,92,1600,1,0,0,0,94,1602,1,
	0,0,0,96,1610,1,0,0,0,98,1615,1,0,0,0,100,1617,1,0,0,0,102,1623,1,0,0,0,
	104,1627,1,0,0,0,106,1631,1,0,0,0,108,1635,1,0,0,0,110,1645,1,0,0,0,112,
	1656,1,0,0,0,114,1673,1,0,0,0,116,1691,1,0,0,0,118,1696,1,0,0,0,120,1699,
	1,0,0,0,122,1703,1,0,0,0,124,1710,1,0,0,0,126,1719,1,0,0,0,128,1725,1,0,
	0,0,130,1727,1,0,0,0,132,1744,1,0,0,0,134,1766,1,0,0,0,136,1768,1,0,0,0,
	138,1776,1,0,0,0,140,1783,1,0,0,0,142,1785,1,0,0,0,144,1799,1,0,0,0,146,
	1801,1,0,0,0,148,1805,1,0,0,0,150,1809,1,0,0,0,152,1813,1,0,0,0,154,1817,
	1,0,0,0,156,1830,1,0,0,0,158,1838,1,0,0,0,160,1841,1,0,0,0,162,1843,1,0,
	0,0,164,1855,1,0,0,0,166,1865,1,0,0,0,168,1868,1,0,0,0,170,1879,1,0,0,0,
	172,1887,1,0,0,0,174,1914,1,0,0,0,176,1927,1,0,0,0,178,1929,1,0,0,0,180,
	1935,1,0,0,0,182,1938,1,0,0,0,184,1944,1,0,0,0,186,1950,1,0,0,0,188,1957,
	1,0,0,0,190,1991,1,0,0,0,192,1999,1,0,0,0,194,2012,1,0,0,0,196,2017,1,0,
	0,0,198,2028,1,0,0,0,200,2045,1,0,0,0,202,2047,1,0,0,0,204,2052,1,0,0,0,
	206,2059,1,0,0,0,208,2063,1,0,0,0,210,2065,1,0,0,0,212,2068,1,0,0,0,214,
	2082,1,0,0,0,216,2090,1,0,0,0,218,2098,1,0,0,0,220,2106,1,0,0,0,222,2121,
	1,0,0,0,224,2123,1,0,0,0,226,2140,1,0,0,0,228,2145,1,0,0,0,230,2159,1,0,
	0,0,232,2161,1,0,0,0,234,2164,1,0,0,0,236,2167,1,0,0,0,238,2176,1,0,0,0,
	240,2196,1,0,0,0,242,2198,1,0,0,0,244,2201,1,0,0,0,246,2221,1,0,0,0,248,
	2223,1,0,0,0,250,2227,1,0,0,0,252,2229,1,0,0,0,254,2238,1,0,0,0,256,2244,
	1,0,0,0,258,2250,1,0,0,0,260,2255,1,0,0,0,262,2301,1,0,0,0,264,2303,1,0,
	0,0,266,2306,1,0,0,0,268,2314,1,0,0,0,270,2322,1,0,0,0,272,2330,1,0,0,0,
	274,2338,1,0,0,0,276,2340,1,0,0,0,278,2353,1,0,0,0,280,2361,1,0,0,0,282,
	2370,1,0,0,0,284,2372,1,0,0,0,286,2374,1,0,0,0,288,2379,1,0,0,0,290,2381,
	1,0,0,0,292,2385,1,0,0,0,294,2391,1,0,0,0,296,2399,1,0,0,0,298,2401,1,0,
	0,0,300,2404,1,0,0,0,302,2411,1,0,0,0,304,2422,1,0,0,0,306,2435,1,0,0,0,
	308,2437,1,0,0,0,310,2445,1,0,0,0,312,2449,1,0,0,0,314,2457,1,0,0,0,316,
	2461,1,0,0,0,318,2463,1,0,0,0,320,2465,1,0,0,0,322,2468,1,0,0,0,324,2475,
	1,0,0,0,326,2483,1,0,0,0,328,2488,1,0,0,0,330,2490,1,0,0,0,332,2497,1,0,
	0,0,334,2505,1,0,0,0,336,2509,1,0,0,0,338,2511,1,0,0,0,340,2522,1,0,0,0,
	342,2526,1,0,0,0,344,2538,1,0,0,0,346,2546,1,0,0,0,348,2550,1,0,0,0,350,
	2562,1,0,0,0,352,2574,1,0,0,0,354,2579,1,0,0,0,356,2584,1,0,0,0,358,2586,
	1,0,0,0,360,2590,1,0,0,0,362,2594,1,0,0,0,364,2601,1,0,0,0,366,2603,1,0,
	0,0,368,2616,1,0,0,0,370,2654,1,0,0,0,372,2656,1,0,0,0,374,2661,1,0,0,0,
	376,2666,1,0,0,0,378,2673,1,0,0,0,380,2678,1,0,0,0,382,2683,1,0,0,0,384,
	2689,1,0,0,0,386,2691,1,0,0,0,388,2700,1,0,0,0,390,2712,1,0,0,0,392,2721,
	1,0,0,0,394,2731,1,0,0,0,396,2757,1,0,0,0,398,2759,1,0,0,0,400,2781,1,0,
	0,0,402,2786,1,0,0,0,404,2859,1,0,0,0,406,2861,1,0,0,0,408,2893,1,0,0,0,
	410,2895,1,0,0,0,412,2906,1,0,0,0,414,2912,1,0,0,0,416,2918,1,0,0,0,418,
	2920,1,0,0,0,420,2929,1,0,0,0,422,2939,1,0,0,0,424,2941,1,0,0,0,426,2955,
	1,0,0,0,428,2957,1,0,0,0,430,2960,1,0,0,0,432,2964,1,0,0,0,434,2966,1,0,
	0,0,436,2970,1,0,0,0,438,2974,1,0,0,0,440,2978,1,0,0,0,442,2985,1,0,0,0,
	444,2992,1,0,0,0,446,3014,1,0,0,0,448,3020,1,0,0,0,450,3035,1,0,0,0,452,
	3042,1,0,0,0,454,3050,1,0,0,0,456,3052,1,0,0,0,458,3059,1,0,0,0,460,3063,
	1,0,0,0,462,3066,1,0,0,0,464,3069,1,0,0,0,466,3072,1,0,0,0,468,3115,1,0,
	0,0,470,3131,1,0,0,0,472,3133,1,0,0,0,474,3144,1,0,0,0,476,3148,1,0,0,0,
	478,3152,1,0,0,0,480,3154,1,0,0,0,482,3159,1,0,0,0,484,3161,1,0,0,0,486,
	3166,1,0,0,0,488,3171,1,0,0,0,490,3176,1,0,0,0,492,3181,1,0,0,0,494,3187,
	1,0,0,0,496,3196,1,0,0,0,498,3201,1,0,0,0,500,3206,1,0,0,0,502,3210,1,0,
	0,0,504,3230,1,0,0,0,506,3243,1,0,0,0,508,3251,1,0,0,0,510,3253,1,0,0,0,
	512,3262,1,0,0,0,514,3266,1,0,0,0,516,3273,1,0,0,0,518,3280,1,0,0,0,520,
	3287,1,0,0,0,522,3290,1,0,0,0,524,3319,1,0,0,0,526,3330,1,0,0,0,528,3347,
	1,0,0,0,530,3349,1,0,0,0,532,3353,1,0,0,0,534,3360,1,0,0,0,536,3362,1,0,
	0,0,538,3367,1,0,0,0,540,3371,1,0,0,0,542,3379,1,0,0,0,544,3383,1,0,0,0,
	546,3393,1,0,0,0,548,3395,1,0,0,0,550,3401,1,0,0,0,552,3405,1,0,0,0,554,
	3418,1,0,0,0,556,3420,1,0,0,0,558,3424,1,0,0,0,560,3427,1,0,0,0,562,3430,
	1,0,0,0,564,3447,1,0,0,0,566,3451,1,0,0,0,568,3458,1,0,0,0,570,3485,1,0,
	0,0,572,3490,1,0,0,0,574,3492,1,0,0,0,576,3497,1,0,0,0,578,3502,1,0,0,0,
	580,3516,1,0,0,0,582,3641,1,0,0,0,584,3643,1,0,0,0,586,3659,1,0,0,0,588,
	3662,1,0,0,0,590,3665,1,0,0,0,592,3668,1,0,0,0,594,3672,1,0,0,0,596,3684,
	1,0,0,0,598,3686,1,0,0,0,600,3688,1,0,0,0,602,3690,1,0,0,0,604,3698,1,0,
	0,0,606,3706,1,0,0,0,608,3718,1,0,0,0,610,3752,1,0,0,0,612,3754,1,0,0,0,
	614,3772,1,0,0,0,616,3781,1,0,0,0,618,3786,1,0,0,0,620,3790,1,0,0,0,622,
	3806,1,0,0,0,624,3865,1,0,0,0,626,3867,1,0,0,0,628,3869,1,0,0,0,630,3889,
	1,0,0,0,632,3900,1,0,0,0,634,3902,1,0,0,0,636,3918,1,0,0,0,638,3930,1,0,
	0,0,640,3948,1,0,0,0,642,3953,1,0,0,0,644,3957,1,0,0,0,646,3976,1,0,0,0,
	648,3981,1,0,0,0,650,3983,1,0,0,0,652,4011,1,0,0,0,654,4014,1,0,0,0,656,
	4016,1,0,0,0,658,4018,1,0,0,0,660,4037,1,0,0,0,662,4039,1,0,0,0,664,4041,
	1,0,0,0,666,4045,1,0,0,0,668,4079,1,0,0,0,670,4081,1,0,0,0,672,4083,1,0,
	0,0,674,4091,1,0,0,0,676,4135,1,0,0,0,678,4137,1,0,0,0,680,4162,1,0,0,0,
	682,4164,1,0,0,0,684,4172,1,0,0,0,686,4181,1,0,0,0,688,4197,1,0,0,0,690,
	4201,1,0,0,0,692,4203,1,0,0,0,694,4212,1,0,0,0,696,4227,1,0,0,0,698,4233,
	1,0,0,0,700,4235,1,0,0,0,702,4242,1,0,0,0,704,4244,1,0,0,0,706,4249,1,0,
	0,0,708,4262,1,0,0,0,710,4286,1,0,0,0,712,4288,1,0,0,0,714,4301,1,0,0,0,
	716,4303,1,0,0,0,718,4306,1,0,0,0,720,4309,1,0,0,0,722,4311,1,0,0,0,724,
	4315,1,0,0,0,726,4321,1,0,0,0,728,4327,1,0,0,0,730,4329,1,0,0,0,732,4343,
	1,0,0,0,734,4352,1,0,0,0,736,4354,1,0,0,0,738,4365,1,0,0,0,740,4373,1,0,
	0,0,742,4383,1,0,0,0,744,4387,1,0,0,0,746,4391,1,0,0,0,748,4395,1,0,0,0,
	750,4401,1,0,0,0,752,4455,1,0,0,0,754,4461,1,0,0,0,756,4465,1,0,0,0,758,
	4467,1,0,0,0,760,4478,1,0,0,0,762,4495,1,0,0,0,764,4511,1,0,0,0,766,4520,
	1,0,0,0,768,4522,1,0,0,0,770,4529,1,0,0,0,772,4544,1,0,0,0,774,4546,1,0,
	0,0,776,4548,1,0,0,0,778,4550,1,0,0,0,780,4556,1,0,0,0,782,4562,1,0,0,0,
	784,4567,1,0,0,0,786,4569,1,0,0,0,788,4572,1,0,0,0,790,4574,1,0,0,0,792,
	4592,1,0,0,0,794,4606,1,0,0,0,796,4608,1,0,0,0,798,4621,1,0,0,0,800,4623,
	1,0,0,0,802,4635,1,0,0,0,804,4640,1,0,0,0,806,4645,1,0,0,0,808,4647,1,0,
	0,0,810,4656,1,0,0,0,812,4658,1,0,0,0,814,4667,1,0,0,0,816,4669,1,0,0,0,
	818,4678,1,0,0,0,820,4680,1,0,0,0,822,4689,1,0,0,0,824,4691,1,0,0,0,826,
	4700,1,0,0,0,828,4702,1,0,0,0,830,4711,1,0,0,0,832,4718,1,0,0,0,834,4720,
	1,0,0,0,836,4727,1,0,0,0,838,4729,1,0,0,0,840,4739,1,0,0,0,842,4752,1,0,
	0,0,844,4754,1,0,0,0,846,4758,1,0,0,0,848,4762,1,0,0,0,850,4768,1,0,0,0,
	852,4770,1,0,0,0,854,4781,1,0,0,0,856,4783,1,0,0,0,858,4807,1,0,0,0,860,
	4809,1,0,0,0,862,4814,1,0,0,0,864,4819,1,0,0,0,866,4824,1,0,0,0,868,4826,
	1,0,0,0,870,4835,1,0,0,0,872,4837,1,0,0,0,874,4846,1,0,0,0,876,4848,1,0,
	0,0,878,4850,1,0,0,0,880,4854,1,0,0,0,882,4866,1,0,0,0,884,4871,1,0,0,0,
	886,4882,1,0,0,0,888,4888,1,0,0,0,890,4890,1,0,0,0,892,4892,1,0,0,0,894,
	4897,1,0,0,0,896,4901,1,0,0,0,898,4903,1,0,0,0,900,4908,1,0,0,0,902,4910,
	1,0,0,0,904,4912,1,0,0,0,906,4914,1,0,0,0,908,4917,1,0,0,0,910,4925,1,0,
	0,0,912,4932,1,0,0,0,914,4934,1,0,0,0,916,4942,1,0,0,0,918,4944,1,0,0,0,
	920,4949,1,0,0,0,922,4954,1,0,0,0,924,4976,1,0,0,0,926,4985,1,0,0,0,928,
	4987,1,0,0,0,930,4998,1,0,0,0,932,5000,1,0,0,0,934,5008,1,0,0,0,936,5025,
	1,0,0,0,938,5028,1,0,0,0,940,5032,1,0,0,0,942,5034,1,0,0,0,944,5036,1,0,
	0,0,946,5038,1,0,0,0,948,5061,1,0,0,0,950,5065,1,0,0,0,952,5079,1,0,0,0,
	954,5087,1,0,0,0,956,5095,1,0,0,0,958,5097,1,0,0,0,960,5100,1,0,0,0,962,
	5108,1,0,0,0,964,5116,1,0,0,0,966,5120,1,0,0,0,968,5122,1,0,0,0,970,5128,
	1,0,0,0,972,5130,1,0,0,0,974,5133,1,0,0,0,976,5143,1,0,0,0,978,5166,1,0,
	0,0,980,5184,1,0,0,0,982,5186,1,0,0,0,984,5194,1,0,0,0,986,5202,1,0,0,0,
	988,5216,1,0,0,0,990,5222,1,0,0,0,992,5238,1,0,0,0,994,5254,1,0,0,0,996,
	999,3,2,1,0,997,999,3,10,5,0,998,996,1,0,0,0,998,997,1,0,0,0,999,1000,1,
	0,0,0,1000,1001,5,0,0,1,1001,1,1,0,0,0,1002,1012,5,114,0,0,1003,1005,3,
	4,2,0,1004,1003,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,1006,1007,1,
	0,0,0,1007,1009,1,0,0,0,1008,1006,1,0,0,0,1009,1013,3,10,5,0,1010,1011,
	5,274,0,0,1011,1013,3,382,191,0,1012,1006,1,0,0,0,1012,1010,1,0,0,0,1013,
	3,1,0,0,0,1014,1037,5,117,0,0,1015,1037,5,133,0,0,1016,1037,5,85,0,0,1017,
	1019,5,37,0,0,1018,1020,7,0,0,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,1020,
	1037,1,0,0,0,1021,1037,5,184,0,0,1022,1037,5,21,0,0,1023,1037,5,10,0,0,
	1024,1037,5,265,0,0,1025,1037,5,183,0,0,1026,1037,5,19,0,0,1027,1029,5,
	366,0,0,1028,1030,3,6,3,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,1032,
	1,0,0,0,1031,1033,3,8,4,0,1032,1031,1,0,0,0,1032,1033,1,0,0,0,1033,1037,
	1,0,0,0,1034,1037,5,78,0,0,1035,1037,5,77,0,0,1036,1014,1,0,0,0,1036,1015,
	1,0,0,0,1036,1016,1,0,0,0,1036,1017,1,0,0,0,1036,1021,1,0,0,0,1036,1022,
	1,0,0,0,1036,1023,1,0,0,0,1036,1024,1,0,0,0,1036,1025,1,0,0,0,1036,1026,
	1,0,0,0,1036,1027,1,0,0,0,1036,1034,1,0,0,0,1036,1035,1,0,0,0,1037,5,1,
	0,0,0,1038,1039,5,215,0,0,1039,7,1,0,0,0,1040,1041,7,1,0,0,1041,9,1,0,0,
	0,1042,1057,3,382,191,0,1043,1057,3,12,6,0,1044,1057,3,16,8,0,1045,1057,
	3,18,9,0,1046,1057,3,20,10,0,1047,1057,3,24,12,0,1048,1057,3,32,16,0,1049,
	1057,3,34,17,0,1050,1057,3,412,206,0,1051,1057,3,420,210,0,1052,1057,3,
	422,211,0,1053,1057,3,444,222,0,1054,1057,3,918,459,0,1055,1057,3,920,460,
	0,1056,1042,1,0,0,0,1056,1043,1,0,0,0,1056,1044,1,0,0,0,1056,1045,1,0,0,
	0,1056,1046,1,0,0,0,1056,1047,1,0,0,0,1056,1048,1,0,0,0,1056,1049,1,0,0,
	0,1056,1050,1,0,0,0,1056,1051,1,0,0,0,1056,1052,1,0,0,0,1056,1053,1,0,0,
	0,1056,1054,1,0,0,0,1056,1055,1,0,0,0,1057,11,1,0,0,0,1058,1059,5,179,0,
	0,1059,1061,5,66,0,0,1060,1062,5,180,0,0,1061,1060,1,0,0,0,1061,1062,1,
	0,0,0,1062,1063,1,0,0,0,1063,1064,5,152,0,0,1064,1066,5,412,0,0,1065,1067,
	5,225,0,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,1069,
	5,159,0,0,1069,1070,5,318,0,0,1070,1072,3,878,439,0,1071,1073,3,74,37,0,
	1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,13,1,0,0,0,1074,1076,5,129,0,0,
	1075,1077,5,196,0,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,1077,1078,1,0,0,
	0,1078,1079,5,269,0,0,1079,1080,5,386,0,0,1080,1081,5,412,0,0,1081,1082,
	5,387,0,0,1082,15,1,0,0,0,1083,1084,5,115,0,0,1084,1085,5,318,0,0,1085,
	1086,3,878,439,0,1086,1087,5,330,0,0,1087,1089,5,412,0,0,1088,1090,3,14,
	7,0,1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,17,1,0,0,0,1091,1097,5,147,
	0,0,1092,1094,5,118,0,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,
	0,0,0,1095,1096,5,318,0,0,1096,1098,3,878,439,0,1097,1093,1,0,0,0,1097,
	1098,1,0,0,0,1098,1099,1,0,0,0,1099,1100,5,134,0,0,1100,1102,5,412,0,0,
	1101,1103,3,264,132,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,1103,19,1,0,0,
	0,1104,1105,5,267,0,0,1105,1106,5,99,0,0,1106,1109,3,22,11,0,1107,1108,
	5,268,0,0,1108,1110,3,22,11,0,1109,1107,1,0,0,0,1109,1110,1,0,0,0,1110,
	1113,1,0,0,0,1111,1112,5,375,0,0,1112,1114,3,26,13,0,1113,1111,1,0,0,0,
	1113,1114,1,0,0,0,1114,21,1,0,0,0,1115,1118,3,896,448,0,1116,1117,5,382,
	0,0,1117,1119,3,30,15,0,1118,1116,1,0,0,0,1118,1119,1,0,0,0,1119,23,1,0,
	0,0,1120,1121,5,267,0,0,1121,1122,5,179,0,0,1122,1125,3,22,11,0,1123,1124,
	5,159,0,0,1124,1126,3,896,448,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,
	1129,1,0,0,0,1127,1128,5,375,0,0,1128,1130,3,26,13,0,1129,1127,1,0,0,0,
	1129,1130,1,0,0,0,1130,25,1,0,0,0,1131,1132,5,386,0,0,1132,1133,3,28,14,
	0,1133,1134,5,387,0,0,1134,27,1,0,0,0,1135,1140,3,248,124,0,1136,1137,5,
	384,0,0,1137,1139,3,248,124,0,1138,1136,1,0,0,0,1139,1142,1,0,0,0,1140,
	1138,1,0,0,0,1140,1141,1,0,0,0,1141,29,1,0,0,0,1142,1140,1,0,0,0,1143,1146,
	5,412,0,0,1144,1145,5,382,0,0,1145,1147,5,412,0,0,1146,1144,1,0,0,0,1146,
	1147,1,0,0,0,1147,31,1,0,0,0,1148,1149,5,267,0,0,1149,1150,5,309,0,0,1150,
	1153,3,896,448,0,1151,1152,5,375,0,0,1152,1154,3,26,13,0,1153,1151,1,0,
	0,0,1153,1154,1,0,0,0,1154,33,1,0,0,0,1155,1201,3,52,26,0,1156,1201,3,64,
	32,0,1157,1201,3,66,33,0,1158,1201,3,582,291,0,1159,1201,3,72,36,0,1160,
	1201,3,70,35,0,1161,1201,3,466,233,0,1162,1201,3,82,41,0,1163,1201,3,90,
	45,0,1164,1201,3,154,77,0,1165,1201,3,172,86,0,1166,1201,3,188,94,0,1167,
	1201,3,192,96,0,1168,1201,3,196,98,0,1169,1201,3,194,97,0,1170,1201,3,186,
	93,0,1171,1201,3,190,95,0,1172,1201,3,162,81,0,1173,1201,3,168,84,0,1174,
	1201,3,164,82,0,1175,1201,3,166,83,0,1176,1201,3,170,85,0,1177,1201,3,84,
	42,0,1178,1201,3,94,47,0,1179,1201,3,100,50,0,1180,1201,3,96,48,0,1181,
	1201,3,102,51,0,1182,1201,3,104,52,0,1183,1201,3,106,53,0,1184,1201,3,108,
	54,0,1185,1201,3,110,55,0,1186,1201,3,124,62,0,1187,1201,3,116,58,0,1188,
	1201,3,126,63,0,1189,1201,3,118,59,0,1190,1201,3,112,56,0,1191,1201,3,114,
	57,0,1192,1201,3,122,61,0,1193,1201,3,120,60,0,1194,1201,3,440,220,0,1195,
	1201,3,442,221,0,1196,1201,3,456,228,0,1197,1201,3,924,462,0,1198,1201,
	3,584,292,0,1199,1201,3,594,297,0,1200,1155,1,0,0,0,1200,1156,1,0,0,0,1200,
	1157,1,0,0,0,1200,1158,1,0,0,0,1200,1159,1,0,0,0,1200,1160,1,0,0,0,1200,
	1161,1,0,0,0,1200,1162,1,0,0,0,1200,1163,1,0,0,0,1200,1164,1,0,0,0,1200,
	1165,1,0,0,0,1200,1166,1,0,0,0,1200,1167,1,0,0,0,1200,1168,1,0,0,0,1200,
	1169,1,0,0,0,1200,1170,1,0,0,0,1200,1171,1,0,0,0,1200,1172,1,0,0,0,1200,
	1173,1,0,0,0,1200,1174,1,0,0,0,1200,1175,1,0,0,0,1200,1176,1,0,0,0,1200,
	1177,1,0,0,0,1200,1178,1,0,0,0,1200,1179,1,0,0,0,1200,1180,1,0,0,0,1200,
	1181,1,0,0,0,1200,1182,1,0,0,0,1200,1183,1,0,0,0,1200,1184,1,0,0,0,1200,
	1185,1,0,0,0,1200,1186,1,0,0,0,1200,1187,1,0,0,0,1200,1188,1,0,0,0,1200,
	1189,1,0,0,0,1200,1190,1,0,0,0,1200,1191,1,0,0,0,1200,1192,1,0,0,0,1200,
	1193,1,0,0,0,1200,1194,1,0,0,0,1200,1195,1,0,0,0,1200,1196,1,0,0,0,1200,
	1197,1,0,0,0,1200,1198,1,0,0,0,1200,1199,1,0,0,0,1201,35,1,0,0,0,1202,1203,
	5,145,0,0,1203,1204,5,112,0,0,1204,37,1,0,0,0,1205,1206,7,2,0,0,1206,39,
	1,0,0,0,1207,1208,5,145,0,0,1208,1209,5,206,0,0,1209,1210,5,112,0,0,1210,
	41,1,0,0,0,1211,1212,5,130,0,0,1212,43,1,0,0,0,1213,1214,5,102,0,0,1214,
	1215,5,274,0,0,1215,45,1,0,0,0,1216,1217,5,91,0,0,1217,1218,5,274,0,0,1218,
	47,1,0,0,0,1219,1220,5,310,0,0,1220,1221,5,17,0,0,1221,1222,5,89,0,0,1222,
	49,1,0,0,0,1223,1224,5,218,0,0,1224,1225,5,268,0,0,1225,51,1,0,0,0,1226,
	1227,5,58,0,0,1227,1229,3,88,44,0,1228,1230,3,40,20,0,1229,1228,1,0,0,0,
	1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,1233,3,896,448,0,1232,1234,3,68,
	34,0,1233,1232,1,0,0,0,1233,1234,1,0,0,0,1234,1236,1,0,0,0,1235,1237,3,
	54,27,0,1236,1235,1,0,0,0,1236,1237,1,0,0,0,1237,1239,1,0,0,0,1238,1240,
	3,56,28,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,1244,1,0,0,0,1241,1242,
	5,375,0,0,1242,1243,5,75,0,0,1243,1245,3,58,29,0,1244,1241,1,0,0,0,1244,
	1245,1,0,0,0,1245,1263,1,0,0,0,1246,1247,5,58,0,0,1247,1248,5,263,0,0,1248,
	1250,3,88,44,0,1249,1251,3,40,20,0,1250,1249,1,0,0,0,1250,1251,1,0,0,0,
	1251,1252,1,0,0,0,1252,1254,3,896,448,0,1253,1255,3,68,34,0,1254,1253,1,
	0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1260,3,62,31,0,1257,1258,
	5,375,0,0,1258,1259,5,75,0,0,1259,1261,3,58,29,0,1260,1257,1,0,0,0,1260,
	1261,1,0,0,0,1261,1263,1,0,0,0,1262,1226,1,0,0,0,1262,1246,1,0,0,0,1263,
	53,1,0,0,0,1264,1265,5,181,0,0,1265,1266,5,412,0,0,1266,55,1,0,0,0,1267,
	1268,5,188,0,0,1268,1269,5,412,0,0,1269,57,1,0,0,0,1270,1271,5,386,0,0,
	1271,1272,3,60,30,0,1272,1273,5,387,0,0,1273,59,1,0,0,0,1274,1279,3,248,
	124,0,1275,1276,5,384,0,0,1276,1278,3,248,124,0,1277,1275,1,0,0,0,1278,
	1281,1,0,0,0,1279,1277,1,0,0,0,1279,1280,1,0,0,0,1280,61,1,0,0,0,1281,1279,
	1,0,0,0,1282,1283,5,359,0,0,1283,1284,3,896,448,0,1284,63,1,0,0,0,1285,
	1286,5,357,0,0,1286,1287,3,896,448,0,1287,65,1,0,0,0,1288,1289,5,98,0,0,
	1289,1291,3,88,44,0,1290,1292,3,36,18,0,1291,1290,1,0,0,0,1291,1292,1,0,
	0,0,1292,1293,1,0,0,0,1293,1295,3,896,448,0,1294,1296,3,38,19,0,1295,1294,
	1,0,0,0,1295,1296,1,0,0,0,1296,67,1,0,0,0,1297,1298,5,47,0,0,1298,1299,
	5,412,0,0,1299,69,1,0,0,0,1300,1302,5,340,0,0,1301,1303,5,318,0,0,1302,
	1301,1,0,0,0,1302,1303,1,0,0,0,1303,1304,1,0,0,0,1304,1310,3,530,265,0,
	1305,1306,5,46,0,0,1306,1307,5,386,0,0,1307,1308,3,272,136,0,1308,1309,
	5,387,0,0,1309,1311,1,0,0,0,1310,1305,1,0,0,0,1310,1311,1,0,0,0,1311,1313,
	1,0,0,0,1312,1314,3,42,21,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,71,
	1,0,0,0,1315,1316,5,98,0,0,1316,1318,5,318,0,0,1317,1319,3,36,18,0,1318,
	1317,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,1322,3,640,320,0,
	1321,1323,5,245,0,0,1322,1321,1,0,0,0,1322,1323,1,0,0,0,1323,1325,1,0,0,
	0,1324,1326,3,14,7,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,73,1,0,0,
	0,1327,1328,5,154,0,0,1328,1329,5,412,0,0,1329,1330,5,290,0,0,1330,1331,
	5,412,0,0,1331,75,1,0,0,0,1332,1335,3,896,448,0,1333,1334,5,382,0,0,1334,
	1336,3,896,448,0,1335,1333,1,0,0,0,1335,1336,1,0,0,0,1336,1350,1,0,0,0,
	1337,1347,3,896,448,0,1338,1343,5,382,0,0,1339,1344,5,100,0,0,1340,1344,
	5,168,0,0,1341,1344,5,364,0,0,1342,1344,3,896,448,0,1343,1339,1,0,0,0,1343,
	1340,1,0,0,0,1343,1341,1,0,0,0,1343,1342,1,0,0,0,1344,1346,1,0,0,0,1345,
	1338,1,0,0,0,1346,1349,1,0,0,0,1347,1345,1,0,0,0,1347,1348,1,0,0,0,1348,
	1351,1,0,0,0,1349,1347,1,0,0,0,1350,1337,1,0,0,0,1350,1351,1,0,0,0,1351,
	77,1,0,0,0,1352,1354,3,76,38,0,1353,1355,3,880,440,0,1354,1353,1,0,0,0,
	1354,1355,1,0,0,0,1355,79,1,0,0,0,1356,1358,3,640,320,0,1357,1359,3,880,
	440,0,1358,1357,1,0,0,0,1358,1359,1,0,0,0,1359,1361,1,0,0,0,1360,1362,3,
	276,138,0,1361,1360,1,0,0,0,1361,1362,1,0,0,0,1362,81,1,0,0,0,1363,1386,
	7,3,0,0,1364,1366,3,88,44,0,1365,1367,5,117,0,0,1366,1365,1,0,0,0,1366,
	1367,1,0,0,0,1367,1368,1,0,0,0,1368,1369,3,896,448,0,1369,1387,1,0,0,0,
	1370,1372,5,69,0,0,1371,1373,5,117,0,0,1372,1371,1,0,0,0,1372,1373,1,0,
	0,0,1373,1374,1,0,0,0,1374,1387,3,896,448,0,1375,1377,5,136,0,0,1376,1378,
	5,117,0,0,1377,1376,1,0,0,0,1377,1378,1,0,0,0,1378,1379,1,0,0,0,1379,1387,
	3,894,447,0,1380,1383,5,133,0,0,1381,1383,5,117,0,0,1382,1380,1,0,0,0,1382,
	1381,1,0,0,0,1383,1384,1,0,0,0,1384,1387,3,80,40,0,1385,1387,3,80,40,0,
	1386,1364,1,0,0,0,1386,1370,1,0,0,0,1386,1375,1,0,0,0,1386,1382,1,0,0,0,
	1386,1385,1,0,0,0,1387,83,1,0,0,0,1388,1389,5,10,0,0,1389,1390,5,318,0,
	0,1390,1403,3,878,439,0,1391,1392,5,52,0,0,1392,1399,5,308,0,0,1393,1400,
	5,205,0,0,1394,1395,5,129,0,0,1395,1397,5,46,0,0,1396,1398,3,272,136,0,
	1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,1400,1,0,0,0,1399,1393,1,0,0,0,
	1399,1394,1,0,0,0,1399,1400,1,0,0,0,1400,1404,1,0,0,0,1401,1402,5,33,0,
	0,1402,1404,5,196,0,0,1403,1391,1,0,0,0,1403,1401,1,0,0,0,1404,85,1,0,0,
	0,1405,1406,7,4,0,0,1406,87,1,0,0,0,1407,1408,7,5,0,0,1408,89,1,0,0,0,1409,
	1410,5,297,0,0,1410,1413,7,6,0,0,1411,1412,5,176,0,0,1412,1414,3,208,104,
	0,1413,1411,1,0,0,0,1413,1414,1,0,0,0,1414,1591,1,0,0,0,1415,1417,5,297,
	0,0,1416,1418,5,117,0,0,1417,1416,1,0,0,0,1417,1418,1,0,0,0,1418,1419,1,
	0,0,0,1419,1423,5,319,0,0,1420,1421,3,86,43,0,1421,1422,3,896,448,0,1422,
	1424,1,0,0,0,1423,1420,1,0,0,0,1423,1424,1,0,0,0,1424,1426,1,0,0,0,1425,
	1427,3,92,46,0,1426,1425,1,0,0,0,1426,1427,1,0,0,0,1427,1591,1,0,0,0,1428,
	1429,5,297,0,0,1429,1433,5,368,0,0,1430,1431,3,86,43,0,1431,1432,3,896,
	448,0,1432,1434,1,0,0,0,1433,1430,1,0,0,0,1433,1434,1,0,0,0,1434,1438,1,
	0,0,0,1435,1436,5,176,0,0,1436,1439,3,208,104,0,1437,1439,3,208,104,0,1438,
	1435,1,0,0,0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,1591,1,0,0,0,1440,
	1441,5,297,0,0,1441,1442,5,194,0,0,1442,1446,5,368,0,0,1443,1444,3,86,43,
	0,1444,1445,3,896,448,0,1445,1447,1,0,0,0,1446,1443,1,0,0,0,1446,1447,1,
	0,0,0,1447,1451,1,0,0,0,1448,1449,5,176,0,0,1449,1452,3,208,104,0,1450,
	1452,3,208,104,0,1451,1448,1,0,0,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,
	1452,1591,1,0,0,0,1453,1455,5,297,0,0,1454,1456,5,304,0,0,1455,1454,1,0,
	0,0,1455,1456,1,0,0,0,1456,1457,1,0,0,0,1457,1458,5,46,0,0,1458,1459,3,
	86,43,0,1459,1463,3,640,320,0,1460,1461,3,86,43,0,1461,1462,3,896,448,0,
	1462,1464,1,0,0,0,1463,1460,1,0,0,0,1463,1464,1,0,0,0,1464,1468,1,0,0,0,
	1465,1466,5,176,0,0,1466,1469,3,208,104,0,1467,1469,3,208,104,0,1468,1465,
	1,0,0,0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,1469,1591,1,0,0,0,1470,1471,
	5,297,0,0,1471,1474,5,137,0,0,1472,1473,5,176,0,0,1473,1475,3,206,103,0,
	1474,1472,1,0,0,0,1474,1475,1,0,0,0,1475,1591,1,0,0,0,1476,1477,5,297,0,
	0,1477,1478,5,229,0,0,1478,1480,3,640,320,0,1479,1481,3,880,440,0,1480,
	1479,1,0,0,0,1480,1481,1,0,0,0,1481,1483,1,0,0,0,1482,1484,3,652,326,0,
	1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1486,1,0,0,0,1485,1487,3,740,370,
	0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1489,1,0,0,0,1488,1490,3,410,
	205,0,1489,1488,1,0,0,0,1489,1490,1,0,0,0,1490,1591,1,0,0,0,1491,1492,5,
	297,0,0,1492,1498,5,58,0,0,1493,1494,3,88,44,0,1494,1495,3,896,448,0,1495,
	1499,1,0,0,0,1496,1497,5,318,0,0,1497,1499,3,640,320,0,1498,1493,1,0,0,
	0,1498,1496,1,0,0,0,1499,1591,1,0,0,0,1500,1501,5,297,0,0,1501,1502,5,318,
	0,0,1502,1506,5,117,0,0,1503,1504,3,86,43,0,1504,1505,3,896,448,0,1505,
	1507,1,0,0,0,1506,1503,1,0,0,0,1506,1507,1,0,0,0,1507,1508,1,0,0,0,1508,
	1509,5,176,0,0,1509,1511,3,208,104,0,1510,1512,3,880,440,0,1511,1510,1,
	0,0,0,1511,1512,1,0,0,0,1512,1591,1,0,0,0,1513,1514,5,297,0,0,1514,1515,
	5,321,0,0,1515,1519,3,640,320,0,1516,1517,5,386,0,0,1517,1518,5,412,0,0,
	1518,1520,5,387,0,0,1519,1516,1,0,0,0,1519,1520,1,0,0,0,1520,1591,1,0,0,
	0,1521,1522,5,297,0,0,1522,1534,5,183,0,0,1523,1524,3,88,44,0,1524,1526,
	3,896,448,0,1525,1527,5,117,0,0,1526,1525,1,0,0,0,1526,1527,1,0,0,0,1527,
	1535,1,0,0,0,1528,1530,3,78,39,0,1529,1528,1,0,0,0,1529,1530,1,0,0,0,1530,
	1532,1,0,0,0,1531,1533,5,117,0,0,1532,1531,1,0,0,0,1532,1533,1,0,0,0,1533,
	1535,1,0,0,0,1534,1523,1,0,0,0,1534,1529,1,0,0,0,1535,1591,1,0,0,0,1536,
	1537,5,297,0,0,1537,1574,5,50,0,0,1538,1575,3,458,229,0,1539,1540,3,88,
	44,0,1540,1542,3,896,448,0,1541,1543,3,460,230,0,1542,1541,1,0,0,0,1542,
	1543,1,0,0,0,1543,1545,1,0,0,0,1544,1546,3,462,231,0,1545,1544,1,0,0,0,
	1545,1546,1,0,0,0,1546,1548,1,0,0,0,1547,1549,3,464,232,0,1548,1547,1,0,
	0,0,1548,1549,1,0,0,0,1549,1551,1,0,0,0,1550,1552,3,740,370,0,1551,1550,
	1,0,0,0,1551,1552,1,0,0,0,1552,1554,1,0,0,0,1553,1555,3,410,205,0,1554,
	1553,1,0,0,0,1554,1555,1,0,0,0,1555,1575,1,0,0,0,1556,1558,3,78,39,0,1557,
	1556,1,0,0,0,1557,1558,1,0,0,0,1558,1560,1,0,0,0,1559,1561,3,460,230,0,
	1560,1559,1,0,0,0,1560,1561,1,0,0,0,1561,1563,1,0,0,0,1562,1564,3,462,231,
	0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1566,1,0,0,0,1565,1567,3,464,
	232,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,1569,1,0,0,0,1568,1570,3,
	740,370,0,1569,1568,1,0,0,0,1569,1570,1,0,0,0,1570,1572,1,0,0,0,1571,1573,
	3,410,205,0,1572,1571,1,0,0,0,1572,1573,1,0,0,0,1573,1575,1,0,0,0,1574,
	1538,1,0,0,0,1574,1539,1,0,0,0,1574,1557,1,0,0,0,1575,1591,1,0,0,0,1576,
	1577,5,297,0,0,1577,1591,5,335,0,0,1578,1579,5,297,0,0,1579,1580,5,54,0,
	0,1580,1591,5,412,0,0,1581,1582,5,297,0,0,1582,1586,5,270,0,0,1583,1584,
	5,233,0,0,1584,1587,3,896,448,0,1585,1587,5,234,0,0,1586,1583,1,0,0,0,1586,
	1585,1,0,0,0,1587,1591,1,0,0,0,1588,1589,5,297,0,0,1589,1591,5,70,0,0,1590,
	1409,1,0,0,0,1590,1415,1,0,0,0,1590,1428,1,0,0,0,1590,1440,1,0,0,0,1590,
	1453,1,0,0,0,1590,1470,1,0,0,0,1590,1476,1,0,0,0,1590,1491,1,0,0,0,1590,
	1500,1,0,0,0,1590,1513,1,0,0,0,1590,1521,1,0,0,0,1590,1536,1,0,0,0,1590,
	1576,1,0,0,0,1590,1578,1,0,0,0,1590,1581,1,0,0,0,1590,1588,1,0,0,0,1591,
	91,1,0,0,0,1592,1593,5,372,0,0,1593,1594,3,896,448,0,1594,1595,5,392,0,
	0,1595,1596,5,412,0,0,1596,1601,1,0,0,0,1597,1598,5,176,0,0,1598,1601,3,
	208,104,0,1599,1601,3,208,104,0,1600,1592,1,0,0,0,1600,1597,1,0,0,0,1600,
	1599,1,0,0,0,1601,93,1,0,0,0,1602,1603,5,182,0,0,1603,1604,5,318,0,0,1604,
	1606,3,640,320,0,1605,1607,3,880,440,0,1606,1605,1,0,0,0,1606,1607,1,0,
	0,0,1607,1608,1,0,0,0,1608,1609,3,98,49,0,1609,95,1,0,0,0,1610,1611,5,182,
	0,0,1611,1612,3,88,44,0,1612,1613,3,896,448,0,1613,1614,3,98,49,0,1614,
	97,1,0,0,0,1615,1616,7,7,0,0,1616,99,1,0,0,0,1617,1618,5,350,0,0,1618,1619,
	5,318,0,0,1619,1621,3,640,320,0,1620,1622,3,880,440,0,1621,1620,1,0,0,0,
	1621,1622,1,0,0,0,1622,101,1,0,0,0,1623,1624,5,350,0,0,1624,1625,3,88,44,
	0,1625,1626,3,896,448,0,1626,103,1,0,0,0,1627,1628,5,58,0,0,1628,1629,5,
	277,0,0,1629,1630,3,896,448,0,1630,105,1,0,0,0,1631,1632,5,98,0,0,1632,
	1633,5,277,0,0,1633,1634,3,896,448,0,1634,107,1,0,0,0,1635,1636,5,138,0,
	0,1636,1638,3,136,68,0,1637,1639,3,130,65,0,1638,1637,1,0,0,0,1638,1639,
	1,0,0,0,1639,1640,1,0,0,0,1640,1641,5,330,0,0,1641,1643,3,142,71,0,1642,
	1644,3,146,73,0,1643,1642,1,0,0,0,1643,1644,1,0,0,0,1644,109,1,0,0,0,1645,
	1647,5,273,0,0,1646,1648,3,148,74,0,1647,1646,1,0,0,0,1647,1648,1,0,0,0,
	1648,1649,1,0,0,0,1649,1651,3,136,68,0,1650,1652,3,130,65,0,1651,1650,1,
	0,0,0,1651,1652,1,0,0,0,1652,1653,1,0,0,0,1653,1654,5,134,0,0,1654,1655,
	3,142,71,0,1655,111,1,0,0,0,1656,1658,5,138,0,0,1657,1659,5,277,0,0,1658,
	1657,1,0,0,0,1658,1659,1,0,0,0,1659,1660,1,0,0,0,1660,1665,3,896,448,0,
	1661,1662,5,384,0,0,1662,1664,3,896,448,0,1663,1661,1,0,0,0,1664,1667,1,
	0,0,0,1665,1663,1,0,0,0,1665,1666,1,0,0,0,1666,1668,1,0,0,0,1667,1665,1,
	0,0,0,1668,1669,5,330,0,0,1669,1671,3,142,71,0,1670,1672,3,152,76,0,1671,
	1670,1,0,0,0,1671,1672,1,0,0,0,1672,113,1,0,0,0,1673,1675,5,273,0,0,1674,
	1676,3,150,75,0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,1676,1678,1,0,0,0,1677,
	1679,5,277,0,0,1678,1677,1,0,0,0,1678,1679,1,0,0,0,1679,1680,1,0,0,0,1680,
	1685,3,896,448,0,1681,1682,5,384,0,0,1682,1684,3,896,448,0,1683,1681,1,
	0,0,0,1684,1687,1,0,0,0,1685,1683,1,0,0,0,1685,1686,1,0,0,0,1686,1688,1,
	0,0,0,1687,1685,1,0,0,0,1688,1689,5,134,0,0,1689,1690,3,142,71,0,1690,115,
	1,0,0,0,1691,1692,5,297,0,0,1692,1693,5,277,0,0,1693,1694,5,138,0,0,1694,
	1695,3,144,72,0,1695,117,1,0,0,0,1696,1697,5,297,0,0,1697,1698,5,278,0,
	0,1698,119,1,0,0,0,1699,1700,5,297,0,0,1700,1701,5,62,0,0,1701,1702,5,278,
	0,0,1702,121,1,0,0,0,1703,1704,5,293,0,0,1704,1708,5,277,0,0,1705,1709,
	5,7,0,0,1706,1709,5,203,0,0,1707,1709,3,896,448,0,1708,1705,1,0,0,0,1708,
	1706,1,0,0,0,1708,1707,1,0,0,0,1709,123,1,0,0,0,1710,1711,5,297,0,0,1711,
	1713,5,138,0,0,1712,1714,3,144,72,0,1713,1712,1,0,0,0,1713,1714,1,0,0,0,
	1714,1717,1,0,0,0,1715,1716,5,214,0,0,1716,1718,3,128,64,0,1717,1715,1,
	0,0,0,1717,1718,1,0,0,0,1718,125,1,0,0,0,1719,1720,5,297,0,0,1720,1721,
	5,242,0,0,1721,1722,3,896,448,0,1722,127,1,0,0,0,1723,1726,5,7,0,0,1724,
	1726,3,134,67,0,1725,1723,1,0,0,0,1725,1724,1,0,0,0,1726,129,1,0,0,0,1727,
	1728,5,214,0,0,1728,1729,3,132,66,0,1729,131,1,0,0,0,1730,1731,3,88,44,
	0,1731,1732,3,896,448,0,1732,1745,1,0,0,0,1733,1735,5,318,0,0,1734,1733,
	1,0,0,0,1734,1735,1,0,0,0,1735,1736,1,0,0,0,1736,1738,3,640,320,0,1737,
	1739,3,880,440,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,1739,1745,1,0,0,0,
	1740,1741,5,355,0,0,1741,1745,5,412,0,0,1742,1743,5,292,0,0,1743,1745,3,
	896,448,0,1744,1730,1,0,0,0,1744,1734,1,0,0,0,1744,1740,1,0,0,0,1744,1742,
	1,0,0,0,1745,133,1,0,0,0,1746,1747,3,88,44,0,1747,1748,3,896,448,0,1748,
	1767,1,0,0,0,1749,1751,5,318,0,0,1750,1749,1,0,0,0,1750,1751,1,0,0,0,1751,
	1752,1,0,0,0,1752,1757,3,640,320,0,1753,1754,5,386,0,0,1754,1755,3,272,
	136,0,1755,1756,5,387,0,0,1756,1758,1,0,0,0,1757,1753,1,0,0,0,1757,1758,
	1,0,0,0,1758,1760,1,0,0,0,1759,1761,3,880,440,0,1760,1759,1,0,0,0,1760,
	1761,1,0,0,0,1761,1767,1,0,0,0,1762,1763,5,355,0,0,1763,1767,5,412,0,0,
	1764,1765,5,292,0,0,1765,1767,3,896,448,0,1766,1746,1,0,0,0,1766,1750,1,
	0,0,0,1766,1762,1,0,0,0,1766,1764,1,0,0,0,1767,135,1,0,0,0,1768,1773,3,
	138,69,0,1769,1770,5,384,0,0,1770,1772,3,138,69,0,1771,1769,1,0,0,0,1772,
	1775,1,0,0,0,1773,1771,1,0,0,0,1773,1774,1,0,0,0,1774,137,1,0,0,0,1775,
	1773,1,0,0,0,1776,1781,3,140,70,0,1777,1778,5,386,0,0,1778,1779,3,272,136,
	0,1779,1780,5,387,0,0,1780,1782,1,0,0,0,1781,1777,1,0,0,0,1781,1782,1,0,
	0,0,1782,139,1,0,0,0,1783,1784,7,8,0,0,1784,141,1,0,0,0,1785,1790,3,144,
	72,0,1786,1787,5,384,0,0,1787,1789,3,144,72,0,1788,1786,1,0,0,0,1789,1792,
	1,0,0,0,1790,1788,1,0,0,0,1790,1791,1,0,0,0,1791,143,1,0,0,0,1792,1790,
	1,0,0,0,1793,1794,5,358,0,0,1794,1800,3,900,450,0,1795,1796,5,139,0,0,1796,
	1800,3,900,450,0,1797,1798,5,277,0,0,1798,1800,3,896,448,0,1799,1793,1,
	0,0,0,1799,1795,1,0,0,0,1799,1797,1,0,0,0,1800,145,1,0,0,0,1801,1802,5,
	375,0,0,1802,1803,5,138,0,0,1803,1804,5,217,0,0,1804,147,1,0,0,0,1805,1806,
	5,138,0,0,1806,1807,5,217,0,0,1807,1808,5,129,0,0,1808,149,1,0,0,0,1809,
	1810,5,5,0,0,1810,1811,5,217,0,0,1811,1812,5,129,0,0,1812,151,1,0,0,0,1813,
	1814,5,375,0,0,1814,1815,5,5,0,0,1815,1816,5,217,0,0,1816,153,1,0,0,0,1817,
	1819,5,202,0,0,1818,1820,5,266,0,0,1819,1818,1,0,0,0,1819,1820,1,0,0,0,
	1820,1821,1,0,0,0,1821,1822,5,318,0,0,1822,1828,3,640,320,0,1823,1824,7,
	9,0,0,1824,1826,5,229,0,0,1825,1827,3,884,442,0,1826,1825,1,0,0,0,1826,
	1827,1,0,0,0,1827,1829,1,0,0,0,1828,1823,1,0,0,0,1828,1829,1,0,0,0,1829,
	155,1,0,0,0,1830,1835,3,158,79,0,1831,1832,5,384,0,0,1832,1834,3,158,79,
	0,1833,1831,1,0,0,0,1834,1837,1,0,0,0,1835,1833,1,0,0,0,1835,1836,1,0,0,
	0,1836,157,1,0,0,0,1837,1835,1,0,0,0,1838,1839,3,160,80,0,1839,1840,5,412,
	0,0,1840,159,1,0,0,0,1841,1842,7,10,0,0,1842,161,1,0,0,0,1843,1845,5,58,
	0,0,1844,1846,5,322,0,0,1845,1844,1,0,0,0,1845,1846,1,0,0,0,1846,1847,1,
	0,0,0,1847,1848,5,136,0,0,1848,1849,3,898,449,0,1849,1850,5,17,0,0,1850,
	1853,5,412,0,0,1851,1852,5,359,0,0,1852,1854,3,156,78,0,1853,1851,1,0,0,
	0,1853,1854,1,0,0,0,1854,163,1,0,0,0,1855,1857,5,98,0,0,1856,1858,5,322,
	0,0,1857,1856,1,0,0,0,1857,1858,1,0,0,0,1858,1859,1,0,0,0,1859,1861,5,136,
	0,0,1860,1862,3,36,18,0,1861,1860,1,0,0,0,1861,1862,1,0,0,0,1862,1863,1,
	0,0,0,1863,1864,3,898,449,0,1864,165,1,0,0,0,1865,1866,5,261,0,0,1866,1867,
	7,11,0,0,1867,167,1,0,0,0,1868,1869,5,58,0,0,1869,1870,5,322,0,0,1870,1871,
	5,186,0,0,1871,1872,5,418,0,0,1872,1874,5,386,0,0,1873,1875,3,266,133,0,
	1874,1873,1,0,0,0,1874,1875,1,0,0,0,1875,1876,1,0,0,0,1876,1877,5,387,0,
	0,1877,1878,3,796,398,0,1878,169,1,0,0,0,1879,1880,5,98,0,0,1880,1881,5,
	322,0,0,1881,1883,5,186,0,0,1882,1884,3,36,18,0,1883,1882,1,0,0,0,1883,
	1884,1,0,0,0,1884,1885,1,0,0,0,1885,1886,5,418,0,0,1886,171,1,0,0,0,1887,
	1889,5,58,0,0,1888,1890,3,50,25,0,1889,1888,1,0,0,0,1889,1890,1,0,0,0,1890,
	1891,1,0,0,0,1891,1893,5,367,0,0,1892,1894,3,40,20,0,1893,1892,1,0,0,0,
	1893,1894,1,0,0,0,1894,1895,1,0,0,0,1895,1900,3,640,320,0,1896,1897,5,386,
	0,0,1897,1898,3,324,162,0,1898,1899,5,387,0,0,1899,1901,1,0,0,0,1900,1896,
	1,0,0,0,1900,1901,1,0,0,0,1901,1903,1,0,0,0,1902,1904,3,210,105,0,1903,
	1902,1,0,0,0,1903,1904,1,0,0,0,1904,1906,1,0,0,0,1905,1907,3,174,87,0,1906,
	1905,1,0,0,0,1906,1907,1,0,0,0,1907,1909,1,0,0,0,1908,1910,3,242,121,0,
	1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,1911,1,0,0,0,1911,1912,5,17,0,
	0,1912,1913,3,402,201,0,1913,173,1,0,0,0,1914,1915,5,228,0,0,1915,1921,
	5,214,0,0,1916,1917,5,386,0,0,1917,1922,3,272,136,0,1918,1919,5,305,0,0,
	1919,1920,5,386,0,0,1920,1922,3,218,109,0,1921,1916,1,0,0,0,1921,1918,1,
	0,0,0,1922,1923,1,0,0,0,1923,1924,5,387,0,0,1924,175,1,0,0,0,1925,1928,
	3,178,89,0,1926,1928,3,180,90,0,1927,1925,1,0,0,0,1927,1926,1,0,0,0,1928,
	177,1,0,0,0,1929,1930,5,42,0,0,1930,1931,5,214,0,0,1931,1932,5,386,0,0,
	1932,1933,3,272,136,0,1933,1934,5,387,0,0,1934,179,1,0,0,0,1935,1936,3,
	182,91,0,1936,1937,3,184,92,0,1937,181,1,0,0,0,1938,1939,5,94,0,0,1939,
	1940,5,214,0,0,1940,1941,5,386,0,0,1941,1942,3,272,136,0,1942,1943,5,387,
	0,0,1943,183,1,0,0,0,1944,1945,5,304,0,0,1945,1946,5,214,0,0,1946,1947,
	5,386,0,0,1947,1948,3,272,136,0,1948,1949,5,387,0,0,1949,185,1,0,0,0,1950,
	1951,5,98,0,0,1951,1953,5,367,0,0,1952,1954,3,36,18,0,1953,1952,1,0,0,0,
	1953,1954,1,0,0,0,1954,1955,1,0,0,0,1955,1956,3,642,321,0,1956,187,1,0,
	0,0,1957,1958,5,58,0,0,1958,1959,5,194,0,0,1959,1961,5,367,0,0,1960,1962,
	3,40,20,0,1961,1960,1,0,0,0,1961,1962,1,0,0,0,1962,1963,1,0,0,0,1963,1965,
	3,640,320,0,1964,1966,3,46,23,0,1965,1964,1,0,0,0,1965,1966,1,0,0,0,1966,
	1968,1,0,0,0,1967,1969,3,210,105,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,
	1969,1971,1,0,0,0,1970,1972,3,174,87,0,1971,1970,1,0,0,0,1971,1972,1,0,
	0,0,1972,1974,1,0,0,0,1973,1975,3,176,88,0,1974,1973,1,0,0,0,1974,1975,
	1,0,0,0,1975,1977,1,0,0,0,1976,1978,3,240,120,0,1977,1976,1,0,0,0,1977,
	1978,1,0,0,0,1978,1980,1,0,0,0,1979,1981,3,262,131,0,1980,1979,1,0,0,0,
	1980,1981,1,0,0,0,1981,1983,1,0,0,0,1982,1984,3,264,132,0,1983,1982,1,0,
	0,0,1983,1984,1,0,0,0,1984,1986,1,0,0,0,1985,1987,3,242,121,0,1986,1985,
	1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,1989,5,17,0,0,1989,1990,
	3,402,201,0,1990,189,1,0,0,0,1991,1992,5,98,0,0,1992,1993,5,194,0,0,1993,
	1995,5,367,0,0,1994,1996,3,36,18,0,1995,1994,1,0,0,0,1995,1996,1,0,0,0,
	1996,1997,1,0,0,0,1997,1998,3,642,321,0,1998,191,1,0,0,0,1999,2000,5,58,
	0,0,2000,2001,5,283,0,0,2001,2002,5,248,0,0,2002,2003,3,896,448,0,2003,
	2005,3,200,100,0,2004,2006,3,202,101,0,2005,2004,1,0,0,0,2005,2006,1,0,
	0,0,2006,2008,1,0,0,0,2007,2009,3,284,142,0,2008,2007,1,0,0,0,2008,2009,
	1,0,0,0,2009,2010,1,0,0,0,2010,2011,3,204,102,0,2011,193,1,0,0,0,2012,2013,
	5,98,0,0,2013,2014,5,283,0,0,2014,2015,5,248,0,0,2015,2016,3,896,448,0,
	2016,195,1,0,0,0,2017,2018,5,9,0,0,2018,2019,5,283,0,0,2019,2020,5,248,
	0,0,2020,2021,3,896,448,0,2021,2022,3,198,99,0,2022,197,1,0,0,0,2023,2029,
	3,200,100,0,2024,2029,3,202,101,0,2025,2029,3,284,142,0,2026,2029,3,204,
	102,0,2027,2029,5,110,0,0,2028,2023,1,0,0,0,2028,2024,1,0,0,0,2028,2025,
	1,0,0,0,2028,2026,1,0,0,0,2028,2027,1,0,0,0,2029,199,1,0,0,0,2030,2031,
	5,59,0,0,2031,2046,5,412,0,0,2032,2034,5,106,0,0,2033,2035,5,417,0,0,2034,
	2033,1,0,0,0,2034,2035,1,0,0,0,2035,2036,1,0,0,0,2036,2043,3,794,397,0,
	2037,2041,5,20,0,0,2038,2039,5,213,0,0,2039,2041,5,32,0,0,2040,2037,1,0,
	0,0,2040,2038,1,0,0,0,2041,2042,1,0,0,0,2042,2044,5,412,0,0,2043,2040,1,
	0,0,0,2043,2044,1,0,0,0,2044,2046,1,0,0,0,2045,2030,1,0,0,0,2045,2032,1,
	0,0,0,2046,201,1,0,0,0,2047,2048,5,111,0,0,2048,2049,5,17,0,0,2049,2050,
	5,412,0,0,2050,203,1,0,0,0,2051,2053,5,82,0,0,2052,2051,1,0,0,0,2052,2053,
	1,0,0,0,2053,2054,1,0,0,0,2054,2055,5,17,0,0,2055,2056,3,0,0,0,2056,205,
	1,0,0,0,2057,2060,3,898,449,0,2058,2060,5,412,0,0,2059,2057,1,0,0,0,2059,
	2058,1,0,0,0,2060,207,1,0,0,0,2061,2064,3,896,448,0,2062,2064,5,412,0,0,
	2063,2061,1,0,0,0,2063,2062,1,0,0,0,2064,209,1,0,0,0,2065,2066,5,47,0,0,
	2066,2067,5,412,0,0,2067,211,1,0,0,0,2068,2069,5,228,0,0,2069,2078,5,32,
	0,0,2070,2073,5,386,0,0,2071,2074,3,214,107,0,2072,2074,3,216,108,0,2073,
	2071,1,0,0,0,2073,2072,1,0,0,0,2074,2079,1,0,0,0,2075,2076,5,305,0,0,2076,
	2077,5,386,0,0,2077,2079,3,218,109,0,2078,2070,1,0,0,0,2078,2075,1,0,0,
	0,2079,2080,1,0,0,0,2080,2081,5,387,0,0,2081,213,1,0,0,0,2082,2087,3,338,
	169,0,2083,2084,5,384,0,0,2084,2086,3,338,169,0,2085,2083,1,0,0,0,2086,
	2089,1,0,0,0,2087,2085,1,0,0,0,2087,2088,1,0,0,0,2088,215,1,0,0,0,2089,
	2087,1,0,0,0,2090,2095,3,274,137,0,2091,2092,5,384,0,0,2092,2094,3,274,
	137,0,2093,2091,1,0,0,0,2094,2097,1,0,0,0,2095,2093,1,0,0,0,2095,2096,1,
	0,0,0,2096,217,1,0,0,0,2097,2095,1,0,0,0,2098,2103,3,220,110,0,2099,2100,
	5,384,0,0,2100,2102,3,220,110,0,2101,2099,1,0,0,0,2102,2105,1,0,0,0,2103,
	2101,1,0,0,0,2103,2104,1,0,0,0,2104,219,1,0,0,0,2105,2103,1,0,0,0,2106,
	2107,3,222,111,0,2107,221,1,0,0,0,2108,2122,3,274,137,0,2109,2110,7,12,
	0,0,2110,2111,5,386,0,0,2111,2112,3,274,137,0,2112,2113,5,387,0,0,2113,
	2122,1,0,0,0,2114,2115,7,13,0,0,2115,2116,5,386,0,0,2116,2117,5,417,0,0,
	2117,2118,5,384,0,0,2118,2119,3,274,137,0,2119,2120,5,387,0,0,2120,2122,
	1,0,0,0,2121,2108,1,0,0,0,2121,2109,1,0,0,0,2121,2114,1,0,0,0,2122,223,
	1,0,0,0,2123,2124,5,42,0,0,2124,2125,5,32,0,0,2125,2126,5,386,0,0,2126,
	2127,3,272,136,0,2127,2134,5,387,0,0,2128,2129,5,304,0,0,2129,2130,5,32,
	0,0,2130,2131,5,386,0,0,2131,2132,3,278,139,0,2132,2133,5,387,0,0,2133,
	2135,1,0,0,0,2134,2128,1,0,0,0,2134,2135,1,0,0,0,2135,2136,1,0,0,0,2136,
	2137,5,159,0,0,2137,2138,5,417,0,0,2138,2139,5,31,0,0,2139,225,1,0,0,0,
	2140,2141,5,42,0,0,2141,2142,5,159,0,0,2142,2143,5,417,0,0,2143,2144,5,
	31,0,0,2144,227,1,0,0,0,2145,2146,5,299,0,0,2146,2147,5,32,0,0,2147,2148,
	5,386,0,0,2148,2149,3,272,136,0,2149,2150,5,387,0,0,2150,2151,5,214,0,0,
	2151,2152,5,386,0,0,2152,2153,3,306,153,0,2153,2155,5,387,0,0,2154,2156,
	3,48,24,0,2155,2154,1,0,0,0,2155,2156,1,0,0,0,2156,229,1,0,0,0,2157,2160,
	3,236,118,0,2158,2160,3,238,119,0,2159,2157,1,0,0,0,2159,2158,1,0,0,0,2160,
	231,1,0,0,0,2161,2162,5,256,0,0,2162,2163,5,412,0,0,2163,233,1,0,0,0,2164,
	2165,5,257,0,0,2165,2166,5,412,0,0,2166,235,1,0,0,0,2167,2168,5,281,0,0,
	2168,2169,5,132,0,0,2169,2170,5,290,0,0,2170,2174,5,412,0,0,2171,2172,5,
	375,0,0,2172,2173,5,291,0,0,2173,2175,3,244,122,0,2174,2171,1,0,0,0,2174,
	2175,1,0,0,0,2175,237,1,0,0,0,2176,2177,5,281,0,0,2177,2178,5,132,0,0,2178,
	2180,5,84,0,0,2179,2181,3,252,126,0,2180,2179,1,0,0,0,2180,2181,1,0,0,0,
	2181,2183,1,0,0,0,2182,2184,3,254,127,0,2183,2182,1,0,0,0,2183,2184,1,0,
	0,0,2184,2186,1,0,0,0,2185,2187,3,256,128,0,2186,2185,1,0,0,0,2186,2187,
	1,0,0,0,2187,2189,1,0,0,0,2188,2190,3,258,129,0,2189,2188,1,0,0,0,2189,
	2190,1,0,0,0,2190,2192,1,0,0,0,2191,2193,3,260,130,0,2192,2191,1,0,0,0,
	2192,2193,1,0,0,0,2193,239,1,0,0,0,2194,2197,3,238,119,0,2195,2197,3,236,
	118,0,2196,2194,1,0,0,0,2196,2195,1,0,0,0,2197,241,1,0,0,0,2198,2199,5,
	321,0,0,2199,2200,3,244,122,0,2200,243,1,0,0,0,2201,2202,5,386,0,0,2202,
	2203,3,246,123,0,2203,2204,5,387,0,0,2204,245,1,0,0,0,2205,2210,3,248,124,
	0,2206,2207,5,384,0,0,2207,2209,3,248,124,0,2208,2206,1,0,0,0,2209,2212,
	1,0,0,0,2210,2208,1,0,0,0,2210,2211,1,0,0,0,2211,2222,1,0,0,0,2212,2210,
	1,0,0,0,2213,2218,3,250,125,0,2214,2215,5,384,0,0,2215,2217,3,250,125,0,
	2216,2214,1,0,0,0,2217,2220,1,0,0,0,2218,2216,1,0,0,0,2218,2219,1,0,0,0,
	2219,2222,1,0,0,0,2220,2218,1,0,0,0,2221,2205,1,0,0,0,2221,2213,1,0,0,0,
	2222,247,1,0,0,0,2223,2224,5,412,0,0,2224,2225,5,392,0,0,2225,2226,5,412,
	0,0,2226,249,1,0,0,0,2227,2228,5,412,0,0,2228,251,1,0,0,0,2229,2230,5,122,
	0,0,2230,2231,5,323,0,0,2231,2232,5,32,0,0,2232,2236,5,412,0,0,2233,2234,
	5,105,0,0,2234,2235,5,32,0,0,2235,2237,5,412,0,0,2236,2233,1,0,0,0,2236,
	2237,1,0,0,0,2237,253,1,0,0,0,2238,2239,5,44,0,0,2239,2240,5,162,0,0,2240,
	2241,5,323,0,0,2241,2242,5,32,0,0,2242,2243,5,412,0,0,2243,255,1,0,0,0,
	2244,2245,5,190,0,0,2245,2246,5,167,0,0,2246,2247,5,323,0,0,2247,2248,5,
	32,0,0,2248,2249,5,412,0,0,2249,257,1,0,0,0,2250,2251,5,178,0,0,2251,2252,
	5,323,0,0,2252,2253,5,32,0,0,2253,2254,5,412,0,0,2254,259,1,0,0,0,2255,
	2256,5,209,0,0,2256,2257,5,82,0,0,2257,2258,5,17,0,0,2258,2259,5,412,0,
	0,2259,261,1,0,0,0,2260,2261,5,310,0,0,2261,2262,5,17,0,0,2262,2263,5,154,
	0,0,2263,2264,5,412,0,0,2264,2265,5,223,0,0,2265,2270,5,412,0,0,2266,2267,
	5,153,0,0,2267,2268,5,412,0,0,2268,2269,5,222,0,0,2269,2271,5,412,0,0,2270,
	2266,1,0,0,0,2270,2271,1,0,0,0,2271,2302,1,0,0,0,2272,2273,5,310,0,0,2273,
	2274,5,32,0,0,2274,2278,5,412,0,0,2275,2276,5,375,0,0,2276,2277,5,291,0,
	0,2277,2279,3,244,122,0,2278,2275,1,0,0,0,2278,2279,1,0,0,0,2279,2283,1,
	0,0,0,2280,2281,5,310,0,0,2281,2282,5,17,0,0,2282,2284,3,896,448,0,2283,
	2280,1,0,0,0,2283,2284,1,0,0,0,2284,2302,1,0,0,0,2285,2286,5,310,0,0,2286,
	2287,5,32,0,0,2287,2291,3,896,448,0,2288,2289,5,375,0,0,2289,2290,5,291,
	0,0,2290,2292,3,244,122,0,2291,2288,1,0,0,0,2291,2292,1,0,0,0,2292,2296,
	1,0,0,0,2293,2294,5,310,0,0,2294,2295,5,17,0,0,2295,2297,3,896,448,0,2296,
	2293,1,0,0,0,2296,2297,1,0,0,0,2297,2302,1,0,0,0,2298,2299,5,310,0,0,2299,
	2300,5,17,0,0,2300,2302,3,896,448,0,2301,2260,1,0,0,0,2301,2272,1,0,0,0,
	2301,2285,1,0,0,0,2301,2298,1,0,0,0,2302,263,1,0,0,0,2303,2304,5,181,0,
	0,2304,2305,5,412,0,0,2305,265,1,0,0,0,2306,2311,3,332,166,0,2307,2308,
	5,384,0,0,2308,2310,3,332,166,0,2309,2307,1,0,0,0,2310,2313,1,0,0,0,2311,
	2309,1,0,0,0,2311,2312,1,0,0,0,2312,267,1,0,0,0,2313,2311,1,0,0,0,2314,
	2319,3,334,167,0,2315,2316,5,384,0,0,2316,2318,3,334,167,0,2317,2315,1,
	0,0,0,2318,2321,1,0,0,0,2319,2317,1,0,0,0,2319,2320,1,0,0,0,2320,269,1,
	0,0,0,2321,2319,1,0,0,0,2322,2327,3,362,181,0,2323,2324,5,384,0,0,2324,
	2326,3,362,181,0,2325,2323,1,0,0,0,2326,2329,1,0,0,0,2327,2325,1,0,0,0,
	2327,2328,1,0,0,0,2328,271,1,0,0,0,2329,2327,1,0,0,0,2330,2335,3,274,137,
	0,2331,2332,5,384,0,0,2332,2334,3,274,137,0,2333,2331,1,0,0,0,2334,2337,
	1,0,0,0,2335,2333,1,0,0,0,2335,2336,1,0,0,0,2336,273,1,0,0,0,2337,2335,
	1,0,0,0,2338,2339,3,896,448,0,2339,275,1,0,0,0,2340,2350,3,896,448,0,2341,
	2346,5,382,0,0,2342,2347,5,100,0,0,2343,2347,5,168,0,0,2344,2347,5,364,
	0,0,2345,2347,3,896,448,0,2346,2342,1,0,0,0,2346,2343,1,0,0,0,2346,2344,
	1,0,0,0,2346,2345,1,0,0,0,2347,2349,1,0,0,0,2348,2341,1,0,0,0,2349,2352,
	1,0,0,0,2350,2348,1,0,0,0,2350,2351,1,0,0,0,2351,277,1,0,0,0,2352,2350,
	1,0,0,0,2353,2358,3,322,161,0,2354,2355,5,384,0,0,2355,2357,3,322,161,0,
	2356,2354,1,0,0,0,2357,2360,1,0,0,0,2358,2356,1,0,0,0,2358,2359,1,0,0,0,
	2359,279,1,0,0,0,2360,2358,1,0,0,0,2361,2362,5,386,0,0,2362,2363,3,272,
	136,0,2363,2364,5,387,0,0,2364,281,1,0,0,0,2365,2367,3,284,142,0,2366,2368,
	3,286,143,0,2367,2366,1,0,0,0,2367,2368,1,0,0,0,2368,2371,1,0,0,0,2369,
	2371,3,288,144,0,2370,2365,1,0,0,0,2370,2369,1,0,0,0,2371,283,1,0,0,0,2372,
	2373,7,14,0,0,2373,285,1,0,0,0,2374,2375,7,15,0,0,2375,287,1,0,0,0,2376,
	2380,5,104,0,0,2377,2378,5,206,0,0,2378,2380,5,104,0,0,2379,2376,1,0,0,
	0,2379,2377,1,0,0,0,2380,289,1,0,0,0,2381,2382,7,16,0,0,2382,291,1,0,0,
	0,2383,2384,5,55,0,0,2384,2386,3,896,448,0,2385,2383,1,0,0,0,2385,2386,
	1,0,0,0,2386,2387,1,0,0,0,2387,2389,3,296,148,0,2388,2390,3,358,179,0,2389,
	2388,1,0,0,0,2389,2390,1,0,0,0,2390,293,1,0,0,0,2391,2392,5,55,0,0,2392,
	2393,3,896,448,0,2393,2395,3,296,148,0,2394,2396,3,360,180,0,2395,2394,
	1,0,0,0,2395,2396,1,0,0,0,2396,295,1,0,0,0,2397,2400,3,298,149,0,2398,2400,
	3,300,150,0,2399,2397,1,0,0,0,2399,2398,1,0,0,0,2400,297,1,0,0,0,2401,2402,
	3,356,178,0,2402,2403,3,280,140,0,2403,299,1,0,0,0,2404,2405,5,40,0,0,2405,
	2406,5,386,0,0,2406,2407,3,796,398,0,2407,2408,5,387,0,0,2408,301,1,0,0,
	0,2409,2410,5,55,0,0,2410,2412,3,896,448,0,2411,2409,1,0,0,0,2411,2412,
	1,0,0,0,2412,2413,1,0,0,0,2413,2414,5,131,0,0,2414,2415,5,166,0,0,2415,
	2416,3,280,140,0,2416,2417,5,259,0,0,2417,2418,3,640,320,0,2418,2420,3,
	280,140,0,2419,2421,3,358,179,0,2420,2419,1,0,0,0,2420,2421,1,0,0,0,2421,
	303,1,0,0,0,2422,2423,5,55,0,0,2423,2424,3,896,448,0,2424,2425,5,131,0,
	0,2425,2426,5,166,0,0,2426,2427,3,280,140,0,2427,2428,5,259,0,0,2428,2429,
	3,640,320,0,2429,2431,3,280,140,0,2430,2432,3,360,180,0,2431,2430,1,0,0,
	0,2431,2432,1,0,0,0,2432,305,1,0,0,0,2433,2436,3,312,156,0,2434,2436,3,
	308,154,0,2435,2433,1,0,0,0,2435,2434,1,0,0,0,2436,307,1,0,0,0,2437,2442,
	3,310,155,0,2438,2439,5,384,0,0,2439,2441,3,310,155,0,2440,2438,1,0,0,0,
	2441,2444,1,0,0,0,2442,2440,1,0,0,0,2442,2443,1,0,0,0,2443,309,1,0,0,0,
	2444,2442,1,0,0,0,2445,2446,5,386,0,0,2446,2447,3,312,156,0,2447,2448,5,
	387,0,0,2448,311,1,0,0,0,2449,2454,3,314,157,0,2450,2451,5,384,0,0,2451,
	2453,3,314,157,0,2452,2450,1,0,0,0,2453,2456,1,0,0,0,2454,2452,1,0,0,0,
	2454,2455,1,0,0,0,2455,313,1,0,0,0,2456,2454,1,0,0,0,2457,2458,3,772,386,
	0,2458,315,1,0,0,0,2459,2462,3,314,157,0,2460,2462,3,310,155,0,2461,2459,
	1,0,0,0,2461,2460,1,0,0,0,2462,317,1,0,0,0,2463,2464,7,17,0,0,2464,319,
	1,0,0,0,2465,2466,5,210,0,0,2466,2467,7,18,0,0,2467,321,1,0,0,0,2468,2470,
	3,896,448,0,2469,2471,3,318,159,0,2470,2469,1,0,0,0,2470,2471,1,0,0,0,2471,
	2473,1,0,0,0,2472,2474,3,320,160,0,2473,2472,1,0,0,0,2473,2474,1,0,0,0,
	2474,323,1,0,0,0,2475,2480,3,326,163,0,2476,2477,5,384,0,0,2477,2479,3,
	326,163,0,2478,2476,1,0,0,0,2479,2482,1,0,0,0,2480,2478,1,0,0,0,2480,2481,
	1,0,0,0,2481,325,1,0,0,0,2482,2480,1,0,0,0,2483,2486,3,896,448,0,2484,2485,
	5,47,0,0,2485,2487,5,412,0,0,2486,2484,1,0,0,0,2486,2487,1,0,0,0,2487,327,
	1,0,0,0,2488,2489,7,17,0,0,2489,329,1,0,0,0,2490,2492,3,796,398,0,2491,
	2493,3,328,164,0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,2493,2495,1,0,0,0,
	2494,2496,3,320,160,0,2495,2494,1,0,0,0,2495,2496,1,0,0,0,2496,331,1,0,
	0,0,2497,2498,3,896,448,0,2498,2501,3,364,182,0,2499,2500,5,47,0,0,2500,
	2502,5,412,0,0,2501,2499,1,0,0,0,2501,2502,1,0,0,0,2502,333,1,0,0,0,2503,
	2506,3,336,168,0,2504,2506,3,338,169,0,2505,2503,1,0,0,0,2505,2504,1,0,
	0,0,2506,335,1,0,0,0,2507,2510,3,302,151,0,2508,2510,3,292,146,0,2509,2507,
	1,0,0,0,2509,2508,1,0,0,0,2510,337,1,0,0,0,2511,2512,3,896,448,0,2512,2514,
	3,364,182,0,2513,2515,3,340,170,0,2514,2513,1,0,0,0,2514,2515,1,0,0,0,2515,
	2518,1,0,0,0,2516,2517,5,47,0,0,2517,2519,5,412,0,0,2518,2516,1,0,0,0,2518,
	2519,1,0,0,0,2519,339,1,0,0,0,2520,2523,3,342,171,0,2521,2523,3,344,172,
	0,2522,2520,1,0,0,0,2522,2521,1,0,0,0,2523,341,1,0,0,0,2524,2525,5,55,0,
	0,2525,2527,3,896,448,0,2526,2524,1,0,0,0,2526,2527,1,0,0,0,2527,2528,1,
	0,0,0,2528,2529,5,259,0,0,2529,2530,3,640,320,0,2530,2531,5,386,0,0,2531,
	2532,3,274,137,0,2532,2534,5,387,0,0,2533,2535,3,358,179,0,2534,2533,1,
	0,0,0,2534,2535,1,0,0,0,2535,343,1,0,0,0,2536,2537,5,55,0,0,2537,2539,3,
	896,448,0,2538,2536,1,0,0,0,2538,2539,1,0,0,0,2539,2540,1,0,0,0,2540,2542,
	3,352,176,0,2541,2543,3,358,179,0,2542,2541,1,0,0,0,2542,2543,1,0,0,0,2543,
	345,1,0,0,0,2544,2547,3,348,174,0,2545,2547,3,350,175,0,2546,2544,1,0,0,
	0,2546,2545,1,0,0,0,2547,347,1,0,0,0,2548,2549,5,55,0,0,2549,2551,3,896,
	448,0,2550,2548,1,0,0,0,2550,2551,1,0,0,0,2551,2552,1,0,0,0,2552,2553,5,
	259,0,0,2553,2554,3,640,320,0,2554,2555,5,386,0,0,2555,2556,3,274,137,0,
	2556,2558,5,387,0,0,2557,2559,3,360,180,0,2558,2557,1,0,0,0,2558,2559,1,
	0,0,0,2559,349,1,0,0,0,2560,2561,5,55,0,0,2561,2563,3,896,448,0,2562,2560,
	1,0,0,0,2562,2563,1,0,0,0,2563,2564,1,0,0,0,2564,2566,3,352,176,0,2565,
	2567,3,360,180,0,2566,2565,1,0,0,0,2566,2567,1,0,0,0,2567,351,1,0,0,0,2568,
	2569,5,206,0,0,2569,2575,5,209,0,0,2570,2571,5,80,0,0,2571,2575,3,354,177,
	0,2572,2575,3,300,150,0,2573,2575,3,356,178,0,2574,2568,1,0,0,0,2574,2570,
	1,0,0,0,2574,2572,1,0,0,0,2574,2573,1,0,0,0,2575,353,1,0,0,0,2576,2580,
	3,772,386,0,2577,2580,3,752,376,0,2578,2580,3,758,379,0,2579,2576,1,0,0,
	0,2579,2577,1,0,0,0,2579,2578,1,0,0,0,2580,355,1,0,0,0,2581,2582,5,241,
	0,0,2582,2585,5,166,0,0,2583,2585,5,347,0,0,2584,2581,1,0,0,0,2584,2583,
	1,0,0,0,2585,357,1,0,0,0,2586,2588,3,282,141,0,2587,2589,3,290,145,0,2588,
	2587,1,0,0,0,2588,2589,1,0,0,0,2589,359,1,0,0,0,2590,2592,3,282,141,0,2591,
	2593,3,290,145,0,2592,2591,1,0,0,0,2592,2593,1,0,0,0,2593,361,1,0,0,0,2594,
	2595,3,896,448,0,2595,2596,5,383,0,0,2596,2599,3,364,182,0,2597,2598,5,
	47,0,0,2598,2600,5,412,0,0,2599,2597,1,0,0,0,2599,2600,1,0,0,0,2600,363,
	1,0,0,0,2601,2602,3,368,184,0,2602,365,1,0,0,0,2603,2608,3,364,182,0,2604,
	2605,5,384,0,0,2605,2607,3,364,182,0,2606,2604,1,0,0,0,2607,2610,1,0,0,
	0,2608,2606,1,0,0,0,2608,2609,1,0,0,0,2609,367,1,0,0,0,2610,2608,1,0,0,
	0,2611,2617,3,370,185,0,2612,2617,3,372,186,0,2613,2617,3,374,187,0,2614,
	2617,3,376,188,0,2615,2617,3,378,189,0,2616,2611,1,0,0,0,2616,2612,1,0,
	0,0,2616,2613,1,0,0,0,2616,2614,1,0,0,0,2616,2615,1,0,0,0,2617,369,1,0,
	0,0,2618,2655,5,329,0,0,2619,2655,5,300,0,0,2620,2655,5,156,0,0,2621,2655,
	5,26,0,0,2622,2655,5,28,0,0,2623,2655,5,126,0,0,2624,2655,5,254,0,0,2625,
	2627,5,96,0,0,2626,2628,5,238,0,0,2627,2626,1,0,0,0,2627,2628,1,0,0,0,2628,
	2655,1,0,0,0,2629,2655,5,71,0,0,2630,2655,5,72,0,0,2631,2655,5,326,0,0,
	2632,2655,5,327,0,0,2633,2634,5,326,0,0,2634,2635,5,375,0,0,2635,2636,5,
	180,0,0,2636,2637,5,325,0,0,2637,2655,5,381,0,0,2638,2655,5,312,0,0,2639,
	2655,5,27,0,0,2640,2648,5,79,0,0,2641,2642,5,386,0,0,2642,2645,5,417,0,
	0,2643,2644,5,384,0,0,2644,2646,5,417,0,0,2645,2643,1,0,0,0,2645,2646,1,
	0,0,0,2646,2647,1,0,0,0,2647,2649,5,387,0,0,2648,2641,1,0,0,0,2648,2649,
	1,0,0,0,2649,2655,1,0,0,0,2650,2651,7,19,0,0,2651,2652,5,386,0,0,2652,2653,
	5,417,0,0,2653,2655,5,387,0,0,2654,2618,1,0,0,0,2654,2619,1,0,0,0,2654,
	2620,1,0,0,0,2654,2621,1,0,0,0,2654,2622,1,0,0,0,2654,2623,1,0,0,0,2654,
	2624,1,0,0,0,2654,2625,1,0,0,0,2654,2629,1,0,0,0,2654,2630,1,0,0,0,2654,
	2631,1,0,0,0,2654,2632,1,0,0,0,2654,2633,1,0,0,0,2654,2638,1,0,0,0,2654,
	2639,1,0,0,0,2654,2640,1,0,0,0,2654,2650,1,0,0,0,2655,371,1,0,0,0,2656,
	2657,5,16,0,0,2657,2658,5,396,0,0,2658,2659,3,368,184,0,2659,2660,5,398,
	0,0,2660,373,1,0,0,0,2661,2662,5,313,0,0,2662,2663,5,396,0,0,2663,2664,
	3,270,135,0,2664,2665,5,398,0,0,2665,375,1,0,0,0,2666,2667,5,190,0,0,2667,
	2668,5,396,0,0,2668,2669,3,370,185,0,2669,2670,5,384,0,0,2670,2671,3,368,
	184,0,2671,2672,5,398,0,0,2672,377,1,0,0,0,2673,2674,5,346,0,0,2674,2675,
	5,396,0,0,2675,2676,3,366,183,0,2676,2677,5,398,0,0,2677,379,1,0,0,0,2678,
	2680,7,20,0,0,2679,2681,7,21,0,0,2680,2679,1,0,0,0,2680,2681,1,0,0,0,2681,
	381,1,0,0,0,2682,2684,3,386,193,0,2683,2682,1,0,0,0,2683,2684,1,0,0,0,2684,
	2685,1,0,0,0,2685,2686,3,384,192,0,2686,383,1,0,0,0,2687,2690,3,390,195,
	0,2688,2690,3,394,197,0,2689,2687,1,0,0,0,2689,2688,1,0,0,0,2690,385,1,
	0,0,0,2691,2692,5,375,0,0,2692,2697,3,388,194,0,2693,2694,5,384,0,0,2694,
	2696,3,388,194,0,2695,2693,1,0,0,0,2696,2699,1,0,0,0,2697,2695,1,0,0,0,
	2697,2698,1,0,0,0,2698,387,1,0,0,0,2699,2697,1,0,0,0,2700,2705,3,896,448,
	0,2701,2702,5,386,0,0,2702,2703,3,272,136,0,2703,2704,5,387,0,0,2704,2706,
	1,0,0,0,2705,2701,1,0,0,0,2705,2706,1,0,0,0,2706,2707,1,0,0,0,2707,2708,
	5,17,0,0,2708,2709,5,386,0,0,2709,2710,3,382,191,0,2710,2711,5,387,0,0,
	2711,389,1,0,0,0,2712,2718,3,392,196,0,2713,2714,3,380,190,0,2714,2715,
	3,392,196,0,2715,2717,1,0,0,0,2716,2713,1,0,0,0,2717,2720,1,0,0,0,2718,
	2716,1,0,0,0,2718,2719,1,0,0,0,2719,391,1,0,0,0,2720,2718,1,0,0,0,2721,
	2723,3,606,303,0,2722,2724,3,404,202,0,2723,2722,1,0,0,0,2724,2725,1,0,
	0,0,2725,2723,1,0,0,0,2725,2726,1,0,0,0,2726,393,1,0,0,0,2727,2728,3,406,
	203,0,2728,2729,3,398,199,0,2729,2732,1,0,0,0,2730,2732,3,398,199,0,2731,
	2727,1,0,0,0,2731,2730,1,0,0,0,2732,395,1,0,0,0,2733,2735,3,668,334,0,2734,
	2736,3,606,303,0,2735,2734,1,0,0,0,2735,2736,1,0,0,0,2736,2738,1,0,0,0,
	2737,2739,3,652,326,0,2738,2737,1,0,0,0,2738,2739,1,0,0,0,2739,2741,1,0,
	0,0,2740,2742,3,700,350,0,2741,2740,1,0,0,0,2741,2742,1,0,0,0,2742,2744,
	1,0,0,0,2743,2745,3,716,358,0,2744,2743,1,0,0,0,2744,2745,1,0,0,0,2745,
	2747,1,0,0,0,2746,2748,3,684,342,0,2747,2746,1,0,0,0,2747,2748,1,0,0,0,
	2748,2750,1,0,0,0,2749,2751,3,718,359,0,2750,2749,1,0,0,0,2750,2751,1,0,
	0,0,2751,2758,1,0,0,0,2752,2753,5,386,0,0,2753,2754,3,398,199,0,2754,2755,
	5,387,0,0,2755,2758,1,0,0,0,2756,2758,3,656,328,0,2757,2733,1,0,0,0,2757,
	2752,1,0,0,0,2757,2756,1,0,0,0,2758,397,1,0,0,0,2759,2761,3,396,198,0,2760,
	2762,3,400,200,0,2761,2760,1,0,0,0,2761,2762,1,0,0,0,2762,2764,1,0,0,0,
	2763,2765,3,740,370,0,2764,2763,1,0,0,0,2764,2765,1,0,0,0,2765,2767,1,0,
	0,0,2766,2768,3,742,371,0,2767,2766,1,0,0,0,2767,2768,1,0,0,0,2768,2770,
	1,0,0,0,2769,2771,3,746,373,0,2770,2769,1,0,0,0,2770,2771,1,0,0,0,2771,
	2773,1,0,0,0,2772,2774,3,748,374,0,2773,2772,1,0,0,0,2773,2774,1,0,0,0,
	2774,2776,1,0,0,0,2775,2777,3,410,205,0,2776,2775,1,0,0,0,2776,2777,1,0,
	0,0,2777,399,1,0,0,0,2778,2779,3,380,190,0,2779,2780,3,396,198,0,2780,2782,
	1,0,0,0,2781,2778,1,0,0,0,2782,2783,1,0,0,0,2783,2781,1,0,0,0,2783,2784,
	1,0,0,0,2784,401,1,0,0,0,2785,2787,3,386,193,0,2786,2785,1,0,0,0,2786,2787,
	1,0,0,0,2787,2788,1,0,0,0,2788,2789,3,398,199,0,2789,403,1,0,0,0,2790,2791,
	3,406,203,0,2791,2793,3,668,334,0,2792,2794,3,624,312,0,2793,2792,1,0,0,
	0,2793,2794,1,0,0,0,2794,2796,1,0,0,0,2795,2797,3,652,326,0,2796,2795,1,
	0,0,0,2796,2797,1,0,0,0,2797,2799,1,0,0,0,2798,2800,3,700,350,0,2799,2798,
	1,0,0,0,2799,2800,1,0,0,0,2800,2802,1,0,0,0,2801,2803,3,716,358,0,2802,
	2801,1,0,0,0,2802,2803,1,0,0,0,2803,2805,1,0,0,0,2804,2806,3,684,342,0,
	2805,2804,1,0,0,0,2805,2806,1,0,0,0,2806,2808,1,0,0,0,2807,2809,3,718,359,
	0,2808,2807,1,0,0,0,2808,2809,1,0,0,0,2809,2811,1,0,0,0,2810,2812,3,740,
	370,0,2811,2810,1,0,0,0,2811,2812,1,0,0,0,2812,2814,1,0,0,0,2813,2815,3,
	742,371,0,2814,2813,1,0,0,0,2814,2815,1,0,0,0,2815,2817,1,0,0,0,2816,2818,
	3,746,373,0,2817,2816,1,0,0,0,2817,2818,1,0,0,0,2818,2820,1,0,0,0,2819,
	2821,3,748,374,0,2820,2819,1,0,0,0,2820,2821,1,0,0,0,2821,2823,1,0,0,0,
	2822,2824,3,410,205,0,2823,2822,1,0,0,0,2823,2824,1,0,0,0,2824,2860,1,0,
	0,0,2825,2827,3,668,334,0,2826,2828,3,624,312,0,2827,2826,1,0,0,0,2827,
	2828,1,0,0,0,2828,2830,1,0,0,0,2829,2831,3,652,326,0,2830,2829,1,0,0,0,
	2830,2831,1,0,0,0,2831,2833,1,0,0,0,2832,2834,3,700,350,0,2833,2832,1,0,
	0,0,2833,2834,1,0,0,0,2834,2836,1,0,0,0,2835,2837,3,716,358,0,2836,2835,
	1,0,0,0,2836,2837,1,0,0,0,2837,2839,1,0,0,0,2838,2840,3,684,342,0,2839,
	2838,1,0,0,0,2839,2840,1,0,0,0,2840,2842,1,0,0,0,2841,2843,3,718,359,0,
	2842,2841,1,0,0,0,2842,2843,1,0,0,0,2843,2845,1,0,0,0,2844,2846,3,740,370,
	0,2845,2844,1,0,0,0,2845,2846,1,0,0,0,2846,2848,1,0,0,0,2847,2849,3,742,
	371,0,2848,2847,1,0,0,0,2848,2849,1,0,0,0,2849,2851,1,0,0,0,2850,2852,3,
	746,373,0,2851,2850,1,0,0,0,2851,2852,1,0,0,0,2852,2854,1,0,0,0,2853,2855,
	3,748,374,0,2854,2853,1,0,0,0,2854,2855,1,0,0,0,2855,2857,1,0,0,0,2856,
	2858,3,410,205,0,2857,2856,1,0,0,0,2857,2858,1,0,0,0,2858,2860,1,0,0,0,
	2859,2790,1,0,0,0,2859,2825,1,0,0,0,2860,405,1,0,0,0,2861,2878,5,155,0,
	0,2862,2863,5,225,0,0,2863,2865,3,408,204,0,2864,2866,3,40,20,0,2865,2864,
	1,0,0,0,2865,2866,1,0,0,0,2866,2879,1,0,0,0,2867,2869,5,159,0,0,2868,2870,
	5,318,0,0,2869,2868,1,0,0,0,2869,2870,1,0,0,0,2870,2871,1,0,0,0,2871,2876,
	3,878,439,0,2872,2873,5,386,0,0,2873,2874,3,272,136,0,2874,2875,5,387,0,
	0,2875,2877,1,0,0,0,2876,2872,1,0,0,0,2876,2877,1,0,0,0,2877,2879,1,0,0,
	0,2878,2862,1,0,0,0,2878,2867,1,0,0,0,2879,407,1,0,0,0,2880,2882,5,180,
	0,0,2881,2880,1,0,0,0,2881,2882,1,0,0,0,2882,2883,1,0,0,0,2883,2884,5,90,
	0,0,2884,2886,5,412,0,0,2885,2887,3,240,120,0,2886,2885,1,0,0,0,2886,2887,
	1,0,0,0,2887,2889,1,0,0,0,2888,2890,3,262,131,0,2889,2888,1,0,0,0,2889,
	2890,1,0,0,0,2890,2894,1,0,0,0,2891,2892,5,318,0,0,2892,2894,3,878,439,
	0,2893,2881,1,0,0,0,2893,2891,1,0,0,0,2894,409,1,0,0,0,2895,2904,5,177,
	0,0,2896,2897,5,417,0,0,2897,2899,5,384,0,0,2898,2896,1,0,0,0,2898,2899,
	1,0,0,0,2899,2900,1,0,0,0,2900,2905,5,417,0,0,2901,2902,5,417,0,0,2902,
	2903,5,213,0,0,2903,2905,5,417,0,0,2904,2898,1,0,0,0,2904,2901,1,0,0,0,
	2905,411,1,0,0,0,2906,2907,5,83,0,0,2907,2908,5,134,0,0,2908,2910,3,640,
	320,0,2909,2911,3,652,326,0,2910,2909,1,0,0,0,2910,2911,1,0,0,0,2911,413,
	1,0,0,0,2912,2913,3,598,299,0,2913,2914,5,392,0,0,2914,2915,3,416,208,0,
	2915,415,1,0,0,0,2916,2919,3,600,300,0,2917,2919,3,816,408,0,2918,2916,
	1,0,0,0,2918,2917,1,0,0,0,2919,417,1,0,0,0,2920,2921,5,293,0,0,2921,2926,
	3,414,207,0,2922,2923,5,384,0,0,2923,2925,3,414,207,0,2924,2922,1,0,0,0,
	2925,2928,1,0,0,0,2926,2924,1,0,0,0,2926,2927,1,0,0,0,2927,419,1,0,0,0,
	2928,2926,1,0,0,0,2929,2930,5,354,0,0,2930,2931,3,640,320,0,2931,2933,3,
	418,209,0,2932,2934,3,652,326,0,2933,2932,1,0,0,0,2933,2934,1,0,0,0,2934,
	421,1,0,0,0,2935,2940,3,424,212,0,2936,2940,3,434,217,0,2937,2940,3,436,
	218,0,2938,2940,3,438,219,0,2939,2935,1,0,0,0,2939,2936,1,0,0,0,2939,2937,
	1,0,0,0,2939,2938,1,0,0,0,2940,423,1,0,0,0,2941,2942,5,307,0,0,2942,2951,
	5,333,0,0,2943,2948,3,426,213,0,2944,2945,5,384,0,0,2945,2947,3,426,213,
	0,2946,2944,1,0,0,0,2947,2950,1,0,0,0,2948,2946,1,0,0,0,2948,2949,1,0,0,
	0,2949,2952,1,0,0,0,2950,2948,1,0,0,0,2951,2943,1,0,0,0,2951,2952,1,0,0,
	0,2952,425,1,0,0,0,2953,2956,3,430,215,0,2954,2956,3,428,214,0,2955,2953,
	1,0,0,0,2955,2954,1,0,0,0,2956,427,1,0,0,0,2957,2958,5,251,0,0,2958,2959,
	7,22,0,0,2959,429,1,0,0,0,2960,2961,5,161,0,0,2961,2962,5,175,0,0,2962,
	2963,3,432,216,0,2963,431,1,0,0,0,2964,2965,5,301,0,0,2965,433,1,0,0,0,
	2966,2968,5,48,0,0,2967,2969,5,377,0,0,2968,2967,1,0,0,0,2968,2969,1,0,
	0,0,2969,435,1,0,0,0,2970,2972,5,279,0,0,2971,2973,5,377,0,0,2972,2971,
	1,0,0,0,2972,2973,1,0,0,0,2973,437,1,0,0,0,2974,2975,5,293,0,0,2975,2976,
	5,22,0,0,2976,2977,3,876,438,0,2977,439,1,0,0,0,2978,2979,5,1,0,0,2979,
	2981,5,335,0,0,2980,2982,5,417,0,0,2981,2980,1,0,0,0,2982,2983,1,0,0,0,
	2983,2981,1,0,0,0,2983,2984,1,0,0,0,2984,441,1,0,0,0,2985,2986,5,1,0,0,
	2986,2988,5,50,0,0,2987,2989,5,417,0,0,2988,2987,1,0,0,0,2989,2990,1,0,
	0,0,2990,2988,1,0,0,0,2990,2991,1,0,0,0,2991,443,1,0,0,0,2992,2994,5,195,
	0,0,2993,2995,5,422,0,0,2994,2993,1,0,0,0,2994,2995,1,0,0,0,2995,2996,1,
	0,0,0,2996,2997,5,159,0,0,2997,3002,3,640,320,0,2998,3000,5,17,0,0,2999,
	2998,1,0,0,0,2999,3000,1,0,0,0,3000,3001,1,0,0,0,3001,3003,3,896,448,0,
	3002,2999,1,0,0,0,3002,3003,1,0,0,0,3003,3004,1,0,0,0,3004,3005,5,359,0,
	0,3005,3006,3,614,307,0,3006,3007,5,214,0,0,3007,3008,3,796,398,0,3008,
	3009,3,446,223,0,3009,445,1,0,0,0,3010,3013,3,450,225,0,3011,3013,3,452,
	226,0,3012,3010,1,0,0,0,3012,3011,1,0,0,0,3013,3016,1,0,0,0,3014,3012,1,
	0,0,0,3014,3015,1,0,0,0,3015,3018,1,0,0,0,3016,3014,1,0,0,0,3017,3019,3,
	448,224,0,3018,3017,1,0,0,0,3018,3019,1,0,0,0,3019,447,1,0,0,0,3020,3021,
	5,371,0,0,3021,3022,5,206,0,0,3022,3025,5,193,0,0,3023,3024,5,11,0,0,3024,
	3026,3,796,398,0,3025,3023,1,0,0,0,3025,3026,1,0,0,0,3026,3027,1,0,0,0,
	3027,3028,5,324,0,0,3028,3030,5,155,0,0,3029,3031,3,280,140,0,3030,3029,
	1,0,0,0,3030,3031,1,0,0,0,3031,3032,1,0,0,0,3032,3033,5,363,0,0,3033,3034,
	3,662,331,0,3034,449,1,0,0,0,3035,3036,5,371,0,0,3036,3037,5,193,0,0,3037,
	3038,5,11,0,0,3038,3039,3,796,398,0,3039,3040,5,324,0,0,3040,3041,3,454,
	227,0,3041,451,1,0,0,0,3042,3043,5,371,0,0,3043,3044,5,193,0,0,3044,3045,
	5,324,0,0,3045,3046,3,454,227,0,3046,453,1,0,0,0,3047,3048,5,354,0,0,3048,
	3051,3,418,209,0,3049,3051,5,83,0,0,3050,3047,1,0,0,0,3050,3049,1,0,0,0,
	3051,455,1,0,0,0,3052,3053,5,169,0,0,3053,3055,5,248,0,0,3054,3056,5,412,
	0,0,3055,3054,1,0,0,0,3056,3057,1,0,0,0,3057,3055,1,0,0,0,3057,3058,1,0,
	0,0,3058,457,1,0,0,0,3059,3060,5,51,0,0,3060,3061,5,392,0,0,3061,3062,5,
	417,0,0,3062,459,1,0,0,0,3063,3064,5,236,0,0,3064,3065,5,412,0,0,3065,461,
	1,0,0,0,3066,3067,5,341,0,0,3067,3068,5,412,0,0,3068,463,1,0,0,0,3069,3070,
	5,309,0,0,3070,3071,5,412,0,0,3071,465,1,0,0,0,3072,3094,5,9,0,0,3073,3074,
	5,318,0,0,3074,3075,3,640,320,0,3075,3076,3,468,234,0,3076,3095,1,0,0,0,
	3077,3078,5,367,0,0,3078,3080,3,640,320,0,3079,3081,5,17,0,0,3080,3079,
	1,0,0,0,3080,3081,1,0,0,0,3081,3082,1,0,0,0,3082,3083,3,474,237,0,3083,
	3095,1,0,0,0,3084,3085,5,194,0,0,3085,3086,5,367,0,0,3086,3087,3,640,320,
	0,3087,3088,3,476,238,0,3088,3095,1,0,0,0,3089,3090,3,88,44,0,3090,3091,
	3,482,241,0,3091,3095,1,0,0,0,3092,3093,5,69,0,0,3093,3095,3,572,286,0,
	3094,3073,1,0,0,0,3094,3077,1,0,0,0,3094,3084,1,0,0,0,3094,3089,1,0,0,0,
	3094,3092,1,0,0,0,3095,467,1,0,0,0,3096,3116,3,492,246,0,3097,3116,3,522,
	261,0,3098,3116,3,510,255,0,3099,3116,3,514,257,0,3100,3116,3,516,258,0,
	3101,3116,3,518,259,0,3102,3116,3,524,262,0,3103,3116,3,546,273,0,3104,
	3116,3,548,274,0,3105,3116,3,472,236,0,3106,3116,3,500,250,0,3107,3116,
	3,496,248,0,3108,3116,3,470,235,0,3109,3110,3,880,440,0,3110,3111,3,470,
	235,0,3111,3116,1,0,0,0,3112,3116,3,564,282,0,3113,3116,3,566,283,0,3114,
	3116,3,568,284,0,3115,3096,1,0,0,0,3115,3097,1,0,0,0,3115,3098,1,0,0,0,
	3115,3099,1,0,0,0,3115,3100,1,0,0,0,3115,3101,1,0,0,0,3115,3102,1,0,0,0,
	3115,3103,1,0,0,0,3115,3104,1,0,0,0,3115,3105,1,0,0,0,3115,3106,1,0,0,0,
	3115,3107,1,0,0,0,3115,3108,1,0,0,0,3115,3109,1,0,0,0,3115,3112,1,0,0,0,
	3115,3113,1,0,0,0,3115,3114,1,0,0,0,3116,469,1,0,0,0,3117,3132,3,532,266,
	0,3118,3132,3,544,272,0,3119,3132,3,554,277,0,3120,3132,3,528,264,0,3121,
	3132,3,550,275,0,3122,3132,3,556,278,0,3123,3132,3,536,268,0,3124,3132,
	3,534,267,0,3125,3132,3,562,281,0,3126,3132,3,504,252,0,3127,3132,3,506,
	253,0,3128,3132,3,502,251,0,3129,3132,3,494,247,0,3130,3132,3,498,249,0,
	3131,3117,1,0,0,0,3131,3118,1,0,0,0,3131,3119,1,0,0,0,3131,3120,1,0,0,0,
	3131,3121,1,0,0,0,3131,3122,1,0,0,0,3131,3123,1,0,0,0,3131,3124,1,0,0,0,
	3131,3125,1,0,0,0,3131,3126,1,0,0,0,3131,3127,1,0,0,0,3131,3128,1,0,0,0,
	3131,3129,1,0,0,0,3131,3130,1,0,0,0,3132,471,1,0,0,0,3133,3134,5,227,0,
	0,3134,3135,5,45,0,0,3135,3136,5,386,0,0,3136,3137,3,332,166,0,3137,3138,
	5,387,0,0,3138,473,1,0,0,0,3139,3145,3,526,263,0,3140,3145,3,492,246,0,
	3141,3145,3,510,255,0,3142,3145,3,522,261,0,3143,3145,3,402,201,0,3144,
	3139,1,0,0,0,3144,3140,1,0,0,0,3144,3141,1,0,0,0,3144,3142,1,0,0,0,3144,
	3143,1,0,0,0,3145,475,1,0,0,0,3146,3149,3,478,239,0,3147,3149,3,480,240,
	0,3148,3146,1,0,0,0,3148,3147,1,0,0,0,3149,477,1,0,0,0,3150,3153,3,44,22,
	0,3151,3153,3,46,23,0,3152,3150,1,0,0,0,3152,3151,1,0,0,0,3153,479,1,0,
	0,0,3154,3155,5,255,0,0,3155,481,1,0,0,0,3156,3160,3,484,242,0,3157,3160,
	3,486,243,0,3158,3160,3,488,244,0,3159,3156,1,0,0,0,3159,3157,1,0,0,0,3159,
	3158,1,0,0,0,3160,483,1,0,0,0,3161,3162,3,896,448,0,3162,3163,5,293,0,0,
	3163,3164,5,75,0,0,3164,3165,3,58,29,0,3165,485,1,0,0,0,3166,3167,3,896,
	448,0,3167,3168,5,293,0,0,3168,3169,5,226,0,0,3169,3170,3,144,72,0,3170,
	487,1,0,0,0,3171,3172,3,896,448,0,3172,3173,5,293,0,0,3173,3174,7,23,0,
	0,3174,3175,5,412,0,0,3175,489,1,0,0,0,3176,3177,3,896,448,0,3177,3178,
	5,293,0,0,3178,3179,5,188,0,0,3179,3180,5,412,0,0,3180,491,1,0,0,0,3181,
	3182,5,264,0,0,3182,3183,5,330,0,0,3183,3184,3,640,320,0,3184,493,1,0,0,
	0,3185,3188,5,4,0,0,3186,3188,5,268,0,0,3187,3185,1,0,0,0,3187,3186,1,0,
	0,0,3188,3189,1,0,0,0,3189,3190,5,46,0,0,3190,3191,5,386,0,0,3191,3192,
	3,266,133,0,3192,3194,5,387,0,0,3193,3195,3,38,19,0,3194,3193,1,0,0,0,3194,
	3195,1,0,0,0,3195,495,1,0,0,0,3196,3199,5,4,0,0,3197,3200,3,304,152,0,3198,
	3200,3,294,147,0,3199,3197,1,0,0,0,3199,3198,1,0,0,0,3200,497,1,0,0,0,3201,
	3202,5,354,0,0,3202,3204,5,46,0,0,3203,3205,3,38,19,0,3204,3203,1,0,0,0,
	3204,3205,1,0,0,0,3205,499,1,0,0,0,3206,3207,5,98,0,0,3207,3208,5,55,0,
	0,3208,3209,3,896,448,0,3209,501,1,0,0,0,3210,3212,5,38,0,0,3211,3213,5,
	45,0,0,3212,3211,1,0,0,0,3212,3213,1,0,0,0,3213,3214,1,0,0,0,3214,3215,
	3,896,448,0,3215,3216,3,896,448,0,3216,3218,3,364,182,0,3217,3219,3,346,
	173,0,3218,3217,1,0,0,0,3218,3219,1,0,0,0,3219,3222,1,0,0,0,3220,3221,5,
	47,0,0,3221,3223,5,412,0,0,3222,3220,1,0,0,0,3222,3223,1,0,0,0,3223,3225,
	1,0,0,0,3224,3226,3,508,254,0,3225,3224,1,0,0,0,3225,3226,1,0,0,0,3226,
	3228,1,0,0,0,3227,3229,3,38,19,0,3228,3227,1,0,0,0,3228,3229,1,0,0,0,3229,
	503,1,0,0,0,3230,3231,5,354,0,0,3231,3232,5,308,0,0,3232,3234,5,129,0,0,
	3233,3235,5,45,0,0,3234,3233,1,0,0,0,3234,3235,1,0,0,0,3235,3236,1,0,0,
	0,3236,3237,3,896,448,0,3237,3238,5,293,0,0,3238,3241,3,244,122,0,3239,
	3240,5,47,0,0,3240,3242,5,412,0,0,3241,3239,1,0,0,0,3241,3242,1,0,0,0,3242,
	505,1,0,0,0,3243,3244,5,354,0,0,3244,3245,5,308,0,0,3245,3246,5,293,0,0,
	3246,3247,3,244,122,0,3247,507,1,0,0,0,3248,3252,5,125,0,0,3249,3250,5,
	6,0,0,3250,3252,3,896,448,0,3251,3248,1,0,0,0,3251,3249,1,0,0,0,3252,509,
	1,0,0,0,3253,3255,5,4,0,0,3254,3256,3,40,20,0,3255,3254,1,0,0,0,3255,3256,
	1,0,0,0,3256,3258,1,0,0,0,3257,3259,3,512,256,0,3258,3257,1,0,0,0,3259,
	3260,1,0,0,0,3260,3258,1,0,0,0,3260,3261,1,0,0,0,3261,511,1,0,0,0,3262,
	3264,3,880,440,0,3263,3265,3,520,260,0,3264,3263,1,0,0,0,3264,3265,1,0,
	0,0,3265,513,1,0,0,0,3266,3270,5,331,0,0,3267,3269,3,880,440,0,3268,3267,
	1,0,0,0,3269,3272,1,0,0,0,3270,3268,1,0,0,0,3270,3271,1,0,0,0,3271,515,
	1,0,0,0,3272,3270,1,0,0,0,3273,3277,5,15,0,0,3274,3276,3,880,440,0,3275,
	3274,1,0,0,0,3276,3279,1,0,0,0,3277,3275,1,0,0,0,3277,3278,1,0,0,0,3278,
	517,1,0,0,0,3279,3277,1,0,0,0,3280,3284,5,342,0,0,3281,3283,3,880,440,0,
	3282,3281,1,0,0,0,3283,3286,1,0,0,0,3284,3282,1,0,0,0,3284,3285,1,0,0,0,
	3285,519,1,0,0,0,3286,3284,1,0,0,0,3287,3288,5,181,0,0,3288,3289,5,412,
	0,0,3289,521,1,0,0,0,3290,3292,5,98,0,0,3291,3293,3,36,18,0,3292,3291,1,
	0,0,0,3292,3293,1,0,0,0,3293,3294,1,0,0,0,3294,3295,5,227,0,0,3295,3301,
	3,884,442,0,3296,3297,5,384,0,0,3297,3298,5,227,0,0,3298,3300,3,884,442,
	0,3299,3296,1,0,0,0,3300,3303,1,0,0,0,3301,3299,1,0,0,0,3301,3302,1,0,0,
	0,3302,3305,1,0,0,0,3303,3301,1,0,0,0,3304,3306,5,245,0,0,3305,3304,1,0,
	0,0,3305,3306,1,0,0,0,3306,3308,1,0,0,0,3307,3309,3,14,7,0,3308,3307,1,
	0,0,0,3308,3309,1,0,0,0,3309,523,1,0,0,0,3310,3311,5,293,0,0,3311,3312,
	5,321,0,0,3312,3320,3,244,122,0,3313,3314,5,352,0,0,3314,3316,5,321,0,0,
	3315,3317,3,36,18,0,3316,3315,1,0,0,0,3316,3317,1,0,0,0,3317,3318,1,0,0,
	0,3318,3320,3,244,122,0,3319,3310,1,0,0,0,3319,3313,1,0,0,0,3320,525,1,
	0,0,0,3321,3322,5,293,0,0,3322,3323,5,321,0,0,3323,3331,3,244,122,0,3324,
	3325,5,352,0,0,3325,3327,5,321,0,0,3326,3328,3,36,18,0,3327,3326,1,0,0,
	0,3327,3328,1,0,0,0,3328,3329,1,0,0,0,3329,3331,3,244,122,0,3330,3321,1,
	0,0,0,3330,3324,1,0,0,0,3331,527,1,0,0,0,3332,3342,5,293,0,0,3333,3334,
	5,290,0,0,3334,3338,5,412,0,0,3335,3336,5,375,0,0,3336,3337,5,291,0,0,3337,
	3339,3,244,122,0,3338,3335,1,0,0,0,3338,3339,1,0,0,0,3339,3343,1,0,0,0,
	3340,3341,5,291,0,0,3341,3343,3,244,122,0,3342,3333,1,0,0,0,3342,3340,1,
	0,0,0,3343,3348,1,0,0,0,3344,3345,5,352,0,0,3345,3346,5,291,0,0,3346,3348,
	3,244,122,0,3347,3332,1,0,0,0,3347,3344,1,0,0,0,3348,529,1,0,0,0,3349,3351,
	3,640,320,0,3350,3352,3,880,440,0,3351,3350,1,0,0,0,3351,3352,1,0,0,0,3352,
	531,1,0,0,0,3353,3354,5,293,0,0,3354,3355,5,124,0,0,3355,3356,3,570,285,
	0,3356,533,1,0,0,0,3357,3358,5,206,0,0,3358,3361,7,24,0,0,3359,3361,3,224,
	112,0,3360,3357,1,0,0,0,3360,3359,1,0,0,0,3361,535,1,0,0,0,3362,3363,5,
	293,0,0,3363,3364,5,299,0,0,3364,3365,5,181,0,0,3365,3366,3,538,269,0,3366,
	537,1,0,0,0,3367,3368,5,386,0,0,3368,3369,3,540,270,0,3369,3370,5,387,0,
	0,3370,539,1,0,0,0,3371,3376,3,542,271,0,3372,3373,5,384,0,0,3373,3375,
	3,542,271,0,3374,3372,1,0,0,0,3375,3378,1,0,0,0,3376,3374,1,0,0,0,3376,
	3377,1,0,0,0,3377,541,1,0,0,0,3378,3376,1,0,0,0,3379,3380,3,316,158,0,3380,
	3381,5,392,0,0,3381,3382,5,412,0,0,3382,543,1,0,0,0,3383,3384,5,293,0,0,
	3384,3385,5,181,0,0,3385,3386,5,412,0,0,3386,545,1,0,0,0,3387,3394,3,228,
	114,0,3388,3391,5,206,0,0,3389,3392,5,299,0,0,3390,3392,3,48,24,0,3391,
	3389,1,0,0,0,3391,3390,1,0,0,0,3392,3394,1,0,0,0,3393,3387,1,0,0,0,3393,
	3388,1,0,0,0,3394,547,1,0,0,0,3395,3396,5,108,0,0,3396,3397,3,880,440,0,
	3397,3398,5,375,0,0,3398,3399,5,318,0,0,3399,3400,3,640,320,0,3400,549,
	1,0,0,0,3401,3402,5,264,0,0,3402,3403,5,330,0,0,3403,3404,3,880,440,0,3404,
	551,1,0,0,0,3405,3406,5,354,0,0,3406,3407,5,308,0,0,3407,3409,5,129,0,0,
	3408,3410,5,45,0,0,3409,3408,1,0,0,0,3409,3410,1,0,0,0,3410,3411,1,0,0,
	0,3411,3412,3,896,448,0,3412,3413,5,293,0,0,3413,3416,3,244,122,0,3414,
	3415,5,47,0,0,3415,3417,5,412,0,0,3416,3414,1,0,0,0,3416,3417,1,0,0,0,3417,
	553,1,0,0,0,3418,3419,5,53,0,0,3419,555,1,0,0,0,3420,3421,5,159,0,0,3421,
	3422,5,417,0,0,3422,3423,5,31,0,0,3423,557,1,0,0,0,3424,3425,5,11,0,0,3425,
	3426,5,369,0,0,3426,559,1,0,0,0,3427,3428,5,236,0,0,3428,3429,5,412,0,0,
	3429,561,1,0,0,0,3430,3431,5,49,0,0,3431,3433,5,412,0,0,3432,3434,3,226,
	113,0,3433,3432,1,0,0,0,3433,3434,1,0,0,0,3434,3436,1,0,0,0,3435,3437,3,
	558,279,0,3436,3435,1,0,0,0,3436,3437,1,0,0,0,3437,3439,1,0,0,0,3438,3440,
	3,560,280,0,3439,3438,1,0,0,0,3439,3440,1,0,0,0,3440,3445,1,0,0,0,3441,
	3442,5,375,0,0,3442,3443,5,225,0,0,3443,3444,5,321,0,0,3444,3446,3,244,
	122,0,3445,3441,1,0,0,0,3445,3446,1,0,0,0,3446,563,1,0,0,0,3447,3448,5,
	293,0,0,3448,3449,5,226,0,0,3449,3450,3,144,72,0,3450,565,1,0,0,0,3451,
	3452,5,293,0,0,3452,3453,5,227,0,0,3453,3454,5,305,0,0,3454,3455,5,386,
	0,0,3455,3456,3,218,109,0,3456,3457,5,387,0,0,3457,567,1,0,0,0,3458,3468,
	5,110,0,0,3459,3460,5,279,0,0,3460,3461,5,386,0,0,3461,3469,7,25,0,0,3462,
	3463,5,113,0,0,3463,3464,5,386,0,0,3464,3469,5,412,0,0,3465,3466,5,295,
	0,0,3466,3467,5,386,0,0,3467,3469,5,417,0,0,3468,3459,1,0,0,0,3468,3462,
	1,0,0,0,3468,3465,1,0,0,0,3469,3470,1,0,0,0,3470,3471,5,387,0,0,3471,569,
	1,0,0,0,3472,3473,5,154,0,0,3473,3474,5,412,0,0,3474,3475,5,223,0,0,3475,
	3476,5,412,0,0,3476,3477,5,290,0,0,3477,3482,5,412,0,0,3478,3479,5,153,
	0,0,3479,3480,5,412,0,0,3480,3481,5,222,0,0,3481,3483,5,412,0,0,3482,3478,
	1,0,0,0,3482,3483,1,0,0,0,3483,3486,1,0,0,0,3484,3486,3,896,448,0,3485,
	3472,1,0,0,0,3485,3484,1,0,0,0,3486,571,1,0,0,0,3487,3491,3,574,287,0,3488,
	3491,3,576,288,0,3489,3491,3,578,289,0,3490,3487,1,0,0,0,3490,3488,1,0,
	0,0,3490,3489,1,0,0,0,3491,573,1,0,0,0,3492,3493,3,896,448,0,3493,3494,
	5,293,0,0,3494,3495,5,76,0,0,3495,3496,3,592,296,0,3496,575,1,0,0,0,3497,
	3498,3,896,448,0,3498,3499,5,293,0,0,3499,3500,5,226,0,0,3500,3501,3,144,
	72,0,3501,577,1,0,0,0,3502,3503,3,896,448,0,3503,3504,5,293,0,0,3504,3505,
	5,356,0,0,3505,3506,5,412,0,0,3506,579,1,0,0,0,3507,3508,5,176,0,0,3508,
	3517,5,123,0,0,3509,3510,5,176,0,0,3510,3511,5,123,0,0,3511,3512,3,896,
	448,0,3512,3513,5,412,0,0,3513,3517,1,0,0,0,3514,3515,5,176,0,0,3515,3517,
	3,640,320,0,3516,3507,1,0,0,0,3516,3509,1,0,0,0,3516,3514,1,0,0,0,3517,
	581,1,0,0,0,3518,3520,5,58,0,0,3519,3521,5,322,0,0,3520,3519,1,0,0,0,3520,
	3521,1,0,0,0,3521,3523,1,0,0,0,3522,3524,5,334,0,0,3523,3522,1,0,0,0,3523,
	3524,1,0,0,0,3524,3526,1,0,0,0,3525,3527,5,118,0,0,3526,3525,1,0,0,0,3526,
	3527,1,0,0,0,3527,3528,1,0,0,0,3528,3530,5,318,0,0,3529,3531,3,40,20,0,
	3530,3529,1,0,0,0,3530,3531,1,0,0,0,3531,3532,1,0,0,0,3532,3583,3,640,320,
	0,3533,3535,3,580,290,0,3534,3536,3,212,106,0,3535,3534,1,0,0,0,3535,3536,
	1,0,0,0,3536,3538,1,0,0,0,3537,3539,3,240,120,0,3538,3537,1,0,0,0,3538,
	3539,1,0,0,0,3539,3541,1,0,0,0,3540,3542,3,262,131,0,3541,3540,1,0,0,0,
	3541,3542,1,0,0,0,3542,3544,1,0,0,0,3543,3545,3,264,132,0,3544,3543,1,0,
	0,0,3544,3545,1,0,0,0,3545,3547,1,0,0,0,3546,3548,3,242,121,0,3547,3546,
	1,0,0,0,3547,3548,1,0,0,0,3548,3584,1,0,0,0,3549,3550,5,386,0,0,3550,3551,
	3,268,134,0,3551,3552,5,387,0,0,3552,3554,1,0,0,0,3553,3549,1,0,0,0,3553,
	3554,1,0,0,0,3554,3556,1,0,0,0,3555,3557,3,210,105,0,3556,3555,1,0,0,0,
	3556,3557,1,0,0,0,3557,3559,1,0,0,0,3558,3560,3,212,106,0,3559,3558,1,0,
	0,0,3559,3560,1,0,0,0,3560,3562,1,0,0,0,3561,3563,3,224,112,0,3562,3561,
	1,0,0,0,3562,3563,1,0,0,0,3563,3565,1,0,0,0,3564,3566,3,228,114,0,3565,
	3564,1,0,0,0,3565,3566,1,0,0,0,3566,3568,1,0,0,0,3567,3569,3,240,120,0,
	3568,3567,1,0,0,0,3568,3569,1,0,0,0,3569,3571,1,0,0,0,3570,3572,3,262,131,
	0,3571,3570,1,0,0,0,3571,3572,1,0,0,0,3572,3574,1,0,0,0,3573,3575,3,264,
	132,0,3574,3573,1,0,0,0,3574,3575,1,0,0,0,3575,3577,1,0,0,0,3576,3578,3,
	242,121,0,3577,3576,1,0,0,0,3577,3578,1,0,0,0,3578,3581,1,0,0,0,3579,3580,
	5,17,0,0,3580,3582,3,402,201,0,3581,3579,1,0,0,0,3581,3582,1,0,0,0,3582,
	3584,1,0,0,0,3583,3533,1,0,0,0,3583,3553,1,0,0,0,3584,3642,1,0,0,0,3585,
	3586,5,58,0,0,3586,3587,5,187,0,0,3587,3589,5,318,0,0,3588,3590,3,40,20,
	0,3589,3588,1,0,0,0,3589,3590,1,0,0,0,3590,3591,1,0,0,0,3591,3639,3,640,
	320,0,3592,3594,3,580,290,0,3593,3595,3,240,120,0,3594,3593,1,0,0,0,3594,
	3595,1,0,0,0,3595,3597,1,0,0,0,3596,3598,3,262,131,0,3597,3596,1,0,0,0,
	3597,3598,1,0,0,0,3598,3600,1,0,0,0,3599,3601,3,264,132,0,3600,3599,1,0,
	0,0,3600,3601,1,0,0,0,3601,3603,1,0,0,0,3602,3604,3,242,121,0,3603,3602,
	1,0,0,0,3603,3604,1,0,0,0,3604,3640,1,0,0,0,3605,3606,5,386,0,0,3606,3607,
	3,268,134,0,3607,3608,5,387,0,0,3608,3610,1,0,0,0,3609,3605,1,0,0,0,3609,
	3610,1,0,0,0,3610,3612,1,0,0,0,3611,3613,3,210,105,0,3612,3611,1,0,0,0,
	3612,3613,1,0,0,0,3613,3615,1,0,0,0,3614,3616,3,212,106,0,3615,3614,1,0,
	0,0,3615,3616,1,0,0,0,3616,3618,1,0,0,0,3617,3619,3,224,112,0,3618,3617,
	1,0,0,0,3618,3619,1,0,0,0,3619,3621,1,0,0,0,3620,3622,3,228,114,0,3621,
	3620,1,0,0,0,3621,3622,1,0,0,0,3622,3624,1,0,0,0,3623,3625,3,240,120,0,
	3624,3623,1,0,0,0,3624,3625,1,0,0,0,3625,3627,1,0,0,0,3626,3628,3,262,131,
	0,3627,3626,1,0,0,0,3627,3628,1,0,0,0,3628,3630,1,0,0,0,3629,3631,3,264,
	132,0,3630,3629,1,0,0,0,3630,3631,1,0,0,0,3631,3633,1,0,0,0,3632,3634,3,
	242,121,0,3633,3632,1,0,0,0,3633,3634,1,0,0,0,3634,3637,1,0,0,0,3635,3636,
	5,17,0,0,3636,3638,3,402,201,0,3637,3635,1,0,0,0,3637,3638,1,0,0,0,3638,
	3640,1,0,0,0,3639,3592,1,0,0,0,3639,3609,1,0,0,0,3640,3642,1,0,0,0,3641,
	3518,1,0,0,0,3641,3585,1,0,0,0,3642,583,1,0,0,0,3643,3644,5,58,0,0,3644,
	3646,5,69,0,0,3645,3647,3,40,20,0,3646,3645,1,0,0,0,3646,3647,1,0,0,0,3647,
	3648,1,0,0,0,3648,3649,3,896,448,0,3649,3650,3,590,295,0,3650,3652,3,588,
	294,0,3651,3653,3,586,293,0,3652,3651,1,0,0,0,3652,3653,1,0,0,0,3653,3657,
	1,0,0,0,3654,3655,5,375,0,0,3655,3656,5,76,0,0,3656,3658,3,592,296,0,3657,
	3654,1,0,0,0,3657,3658,1,0,0,0,3658,585,1,0,0,0,3659,3660,5,47,0,0,3660,
	3661,5,412,0,0,3661,587,1,0,0,0,3662,3663,5,356,0,0,3663,3664,5,412,0,0,
	3664,589,1,0,0,0,3665,3666,5,341,0,0,3666,3667,5,412,0,0,3667,591,1,0,0,
	0,3668,3669,5,386,0,0,3669,3670,3,60,30,0,3670,3671,5,387,0,0,3671,593,
	1,0,0,0,3672,3673,5,98,0,0,3673,3675,5,69,0,0,3674,3676,3,36,18,0,3675,
	3674,1,0,0,0,3675,3676,1,0,0,0,3676,3677,1,0,0,0,3677,3678,3,896,448,0,
	3678,595,1,0,0,0,3679,3685,5,402,0,0,3680,3681,3,640,320,0,3681,3682,5,
	382,0,0,3682,3683,5,402,0,0,3683,3685,1,0,0,0,3684,3679,1,0,0,0,3684,3680,
	1,0,0,0,3685,597,1,0,0,0,3686,3687,3,896,448,0,3687,599,1,0,0,0,3688,3689,
	5,80,0,0,3689,601,1,0,0,0,3690,3695,3,796,398,0,3691,3692,5,384,0,0,3692,
	3694,3,796,398,0,3693,3691,1,0,0,0,3694,3697,1,0,0,0,3695,3693,1,0,0,0,
	3695,3696,1,0,0,0,3696,603,1,0,0,0,3697,3695,1,0,0,0,3698,3703,3,896,448,
	0,3699,3700,5,384,0,0,3700,3702,3,896,448,0,3701,3699,1,0,0,0,3702,3705,
	1,0,0,0,3703,3701,1,0,0,0,3703,3704,1,0,0,0,3704,605,1,0,0,0,3705,3703,
	1,0,0,0,3706,3707,5,134,0,0,3707,3708,3,608,304,0,3708,607,1,0,0,0,3709,
	3710,3,620,310,0,3710,3713,3,616,308,0,3711,3712,5,384,0,0,3712,3714,3,
	616,308,0,3713,3711,1,0,0,0,3714,3715,1,0,0,0,3715,3713,1,0,0,0,3715,3716,
	1,0,0,0,3716,3719,1,0,0,0,3717,3719,3,612,306,0,3718,3709,1,0,0,0,3718,
	3717,1,0,0,0,3719,609,1,0,0,0,3720,3724,3,634,317,0,3721,3723,3,624,312,
	0,3722,3721,1,0,0,0,3723,3726,1,0,0,0,3724,3722,1,0,0,0,3724,3725,1,0,0,
	0,3725,3753,1,0,0,0,3726,3724,1,0,0,0,3727,3731,3,666,333,0,3728,3730,3,
	624,312,0,3729,3728,1,0,0,0,3730,3733,1,0,0,0,3731,3729,1,0,0,0,3731,3732,
	1,0,0,0,3732,3753,1,0,0,0,3733,3731,1,0,0,0,3734,3738,3,644,322,0,3735,
	3737,3,624,312,0,3736,3735,1,0,0,0,3737,3740,1,0,0,0,3738,3736,1,0,0,0,
	3738,3739,1,0,0,0,3739,3753,1,0,0,0,3740,3738,1,0,0,0,3741,3745,3,650,325,
	0,3742,3744,3,624,312,0,3743,3742,1,0,0,0,3744,3747,1,0,0,0,3745,3743,1,
	0,0,0,3745,3746,1,0,0,0,3746,3753,1,0,0,0,3747,3745,1,0,0,0,3748,3749,5,
	386,0,0,3749,3750,3,612,306,0,3750,3751,5,387,0,0,3751,3753,1,0,0,0,3752,
	3720,1,0,0,0,3752,3727,1,0,0,0,3752,3734,1,0,0,0,3752,3741,1,0,0,0,3752,
	3748,1,0,0,0,3753,611,1,0,0,0,3754,3765,3,610,305,0,3755,3756,3,622,311,
	0,3756,3761,3,614,307,0,3757,3758,5,214,0,0,3758,3762,3,796,398,0,3759,
	3760,5,359,0,0,3760,3762,3,280,140,0,3761,3757,1,0,0,0,3761,3759,1,0,0,
	0,3761,3762,1,0,0,0,3762,3764,1,0,0,0,3763,3755,1,0,0,0,3764,3767,1,0,0,
	0,3765,3763,1,0,0,0,3765,3766,1,0,0,0,3766,613,1,0,0,0,3767,3765,1,0,0,
	0,3768,3773,3,634,317,0,3769,3773,3,666,333,0,3770,3773,3,644,322,0,3771,
	3773,3,650,325,0,3772,3768,1,0,0,0,3772,3769,1,0,0,0,3772,3770,1,0,0,0,
	3772,3771,1,0,0,0,3773,3777,1,0,0,0,3774,3776,3,624,312,0,3775,3774,1,0,
	0,0,3776,3779,1,0,0,0,3777,3775,1,0,0,0,3777,3778,1,0,0,0,3778,615,1,0,
	0,0,3779,3777,1,0,0,0,3780,3782,5,240,0,0,3781,3780,1,0,0,0,3781,3782,1,
	0,0,0,3782,3783,1,0,0,0,3783,3784,3,638,319,0,3784,3785,3,618,309,0,3785,
	617,1,0,0,0,3786,3787,5,386,0,0,3787,3788,3,602,301,0,3788,3789,5,387,0,
	0,3789,619,1,0,0,0,3790,3791,5,348,0,0,3791,621,1,0,0,0,3792,3807,5,384,
	0,0,3793,3804,5,151,0,0,3794,3804,5,60,0,0,3795,3797,7,26,0,0,3796,3798,
	5,221,0,0,3797,3796,1,0,0,0,3797,3798,1,0,0,0,3798,3804,1,0,0,0,3799,3801,
	5,173,0,0,3800,3802,7,27,0,0,3801,3800,1,0,0,0,3801,3802,1,0,0,0,3802,3804,
	1,0,0,0,3803,3793,1,0,0,0,3803,3794,1,0,0,0,3803,3795,1,0,0,0,3803,3799,
	1,0,0,0,3803,3804,1,0,0,0,3804,3805,1,0,0,0,3805,3807,5,164,0,0,3806,3792,
	1,0,0,0,3806,3803,1,0,0,0,3807,623,1,0,0,0,3808,3809,5,171,0,0,3809,3810,
	5,367,0,0,3810,3811,5,221,0,0,3811,3812,3,752,376,0,3812,3822,3,626,313,
	0,3813,3814,5,17,0,0,3814,3819,3,896,448,0,3815,3816,5,384,0,0,3816,3818,
	3,896,448,0,3817,3815,1,0,0,0,3818,3821,1,0,0,0,3819,3817,1,0,0,0,3819,
	3820,1,0,0,0,3820,3823,1,0,0,0,3821,3819,1,0,0,0,3822,3813,1,0,0,0,3822,
	3823,1,0,0,0,3823,3866,1,0,0,0,3824,3826,5,384,0,0,3825,3824,1,0,0,0,3825,
	3826,1,0,0,0,3826,3827,1,0,0,0,3827,3863,5,171,0,0,3828,3829,5,367,0,0,
	3829,3830,3,752,376,0,3830,3840,3,626,313,0,3831,3832,5,17,0,0,3832,3837,
	3,896,448,0,3833,3834,5,384,0,0,3834,3836,3,896,448,0,3835,3833,1,0,0,0,
	3836,3839,1,0,0,0,3837,3835,1,0,0,0,3837,3838,1,0,0,0,3838,3841,1,0,0,0,
	3839,3837,1,0,0,0,3840,3831,1,0,0,0,3840,3841,1,0,0,0,3841,3864,1,0,0,0,
	3842,3843,5,318,0,0,3843,3844,5,386,0,0,3844,3845,3,658,329,0,3845,3847,
	5,387,0,0,3846,3848,5,17,0,0,3847,3846,1,0,0,0,3847,3848,1,0,0,0,3848,3849,
	1,0,0,0,3849,3861,3,626,313,0,3850,3851,5,386,0,0,3851,3856,3,896,448,0,
	3852,3853,5,384,0,0,3853,3855,3,896,448,0,3854,3852,1,0,0,0,3855,3858,1,
	0,0,0,3856,3854,1,0,0,0,3856,3857,1,0,0,0,3857,3859,1,0,0,0,3858,3856,1,
	0,0,0,3859,3860,5,387,0,0,3860,3862,1,0,0,0,3861,3850,1,0,0,0,3861,3862,
	1,0,0,0,3862,3864,1,0,0,0,3863,3828,1,0,0,0,3863,3842,1,0,0,0,3864,3866,
	1,0,0,0,3865,3808,1,0,0,0,3865,3825,1,0,0,0,3866,625,1,0,0,0,3867,3868,
	3,896,448,0,3868,627,1,0,0,0,3869,3870,5,320,0,0,3870,3871,5,386,0,0,3871,
	3872,5,30,0,0,3872,3873,5,417,0,0,3873,3874,5,220,0,0,3874,3875,5,211,0,
	0,3875,3885,5,417,0,0,3876,3877,5,214,0,0,3877,3882,3,796,398,0,3878,3879,
	5,384,0,0,3879,3881,3,796,398,0,3880,3878,1,0,0,0,3881,3884,1,0,0,0,3882,
	3880,1,0,0,0,3882,3883,1,0,0,0,3883,3886,1,0,0,0,3884,3882,1,0,0,0,3885,
	3876,1,0,0,0,3885,3886,1,0,0,0,3886,3887,1,0,0,0,3887,3888,5,387,0,0,3888,
	629,1,0,0,0,3889,3890,5,320,0,0,3890,3894,5,386,0,0,3891,3892,5,417,0,0,
	3892,3895,7,28,0,0,3893,3895,5,416,0,0,3894,3891,1,0,0,0,3894,3893,1,0,
	0,0,3895,3896,1,0,0,0,3896,3897,5,387,0,0,3897,631,1,0,0,0,3898,3901,3,
	628,314,0,3899,3901,3,630,315,0,3900,3898,1,0,0,0,3900,3899,1,0,0,0,3901,
	633,1,0,0,0,3902,3904,3,640,320,0,3903,3905,3,244,122,0,3904,3903,1,0,0,
	0,3904,3905,1,0,0,0,3905,3907,1,0,0,0,3906,3908,3,632,316,0,3907,3906,1,
	0,0,0,3907,3908,1,0,0,0,3908,3910,1,0,0,0,3909,3911,3,636,318,0,3910,3909,
	1,0,0,0,3910,3911,1,0,0,0,3911,3916,1,0,0,0,3912,3914,5,17,0,0,3913,3912,
	1,0,0,0,3913,3914,1,0,0,0,3914,3915,1,0,0,0,3915,3917,3,896,448,0,3916,
	3913,1,0,0,0,3916,3917,1,0,0,0,3917,635,1,0,0,0,3918,3928,5,129,0,0,3919,
	3920,5,316,0,0,3920,3921,5,17,0,0,3921,3922,5,211,0,0,3922,3929,3,796,398,
	0,3923,3924,5,129,0,0,3924,3925,5,317,0,0,3925,3926,5,17,0,0,3926,3927,
	5,211,0,0,3927,3929,5,417,0,0,3928,3919,1,0,0,0,3928,3923,1,0,0,0,3929,
	637,1,0,0,0,3930,3932,3,640,320,0,3931,3933,3,632,316,0,3932,3931,1,0,0,
	0,3932,3933,1,0,0,0,3933,3938,1,0,0,0,3934,3936,5,17,0,0,3935,3934,1,0,
	0,0,3935,3936,1,0,0,0,3936,3937,1,0,0,0,3937,3939,3,896,448,0,3938,3935,
	1,0,0,0,3938,3939,1,0,0,0,3939,639,1,0,0,0,3940,3941,3,896,448,0,3941,3942,
	5,382,0,0,3942,3945,3,896,448,0,3943,3944,5,382,0,0,3944,3946,3,896,448,
	0,3945,3943,1,0,0,0,3945,3946,1,0,0,0,3946,3949,1,0,0,0,3947,3949,3,896,
	448,0,3948,3940,1,0,0,0,3948,3947,1,0,0,0,3949,641,1,0,0,0,3950,3951,3,
	896,448,0,3951,3952,5,382,0,0,3952,3954,1,0,0,0,3953,3950,1,0,0,0,3953,
	3954,1,0,0,0,3954,3955,1,0,0,0,3955,3956,3,896,448,0,3956,643,1,0,0,0,3957,
	3958,5,386,0,0,3958,3959,3,382,191,0,3959,3961,5,387,0,0,3960,3962,5,17,
	0,0,3961,3960,1,0,0,0,3961,3962,1,0,0,0,3962,3963,1,0,0,0,3963,3964,3,896,
	448,0,3964,645,1,0,0,0,3965,3967,3,744,372,0,3966,3968,3,740,370,0,3967,
	3966,1,0,0,0,3967,3968,1,0,0,0,3968,3977,1,0,0,0,3969,3977,3,740,370,0,
	3970,3972,3,746,373,0,3971,3973,3,748,374,0,3972,3971,1,0,0,0,3972,3973,
	1,0,0,0,3973,3977,1,0,0,0,3974,3977,3,748,374,0,3975,3977,3,742,371,0,3976,
	3965,1,0,0,0,3976,3969,1,0,0,0,3976,3970,1,0,0,0,3976,3974,1,0,0,0,3976,
	3975,1,0,0,0,3977,647,1,0,0,0,3978,3982,3,644,322,0,3979,3982,3,634,317,
	0,3980,3982,3,650,325,0,3981,3978,1,0,0,0,3981,3979,1,0,0,0,3981,3980,1,
	0,0,0,3982,649,1,0,0,0,3983,3984,3,896,448,0,3984,3985,5,386,0,0,3985,3986,
	5,214,0,0,3986,3988,3,648,324,0,3987,3989,3,646,323,0,3988,3987,1,0,0,0,
	3988,3989,1,0,0,0,3989,4005,1,0,0,0,3990,3991,5,418,0,0,3991,3992,5,386,
	0,0,3992,3993,3,796,398,0,3993,4002,5,387,0,0,3994,3995,5,384,0,0,3995,
	3996,5,418,0,0,3996,3997,5,386,0,0,3997,3998,3,796,398,0,3998,3999,5,387,
	0,0,3999,4001,1,0,0,0,4000,3994,1,0,0,0,4001,4004,1,0,0,0,4002,4000,1,0,
	0,0,4002,4003,1,0,0,0,4003,4006,1,0,0,0,4004,4002,1,0,0,0,4005,3990,1,0,
	0,0,4005,4006,1,0,0,0,4006,4007,1,0,0,0,4007,4009,5,387,0,0,4008,4010,3,
	896,448,0,4009,4008,1,0,0,0,4009,4010,1,0,0,0,4010,651,1,0,0,0,4011,4012,
	5,372,0,0,4012,4013,3,654,327,0,4013,653,1,0,0,0,4014,4015,3,796,398,0,
	4015,655,1,0,0,0,4016,4017,3,658,329,0,4017,657,1,0,0,0,4018,4019,5,363,
	0,0,4019,4020,3,660,330,0,4020,659,1,0,0,0,4021,4026,3,662,331,0,4022,4023,
	5,384,0,0,4023,4025,3,662,331,0,4024,4022,1,0,0,0,4025,4028,1,0,0,0,4026,
	4024,1,0,0,0,4026,4027,1,0,0,0,4027,4038,1,0,0,0,4028,4026,1,0,0,0,4029,
	4034,3,664,332,0,4030,4031,5,384,0,0,4031,4033,3,662,331,0,4032,4030,1,
	0,0,0,4033,4036,1,0,0,0,4034,4032,1,0,0,0,4034,4035,1,0,0,0,4035,4038,1,
	0,0,0,4036,4034,1,0,0,0,4037,4021,1,0,0,0,4037,4029,1,0,0,0,4038,661,1,
	0,0,0,4039,4040,3,722,361,0,4040,663,1,0,0,0,4041,4042,5,386,0,0,4042,4043,
	3,730,365,0,4043,4044,5,387,0,0,4044,665,1,0,0,0,4045,4046,5,318,0,0,4046,
	4047,5,386,0,0,4047,4048,3,658,329,0,4048,4050,5,387,0,0,4049,4051,5,17,
	0,0,4050,4049,1,0,0,0,4050,4051,1,0,0,0,4051,4052,1,0,0,0,4052,4062,3,626,
	313,0,4053,4054,5,386,0,0,4054,4059,3,896,448,0,4055,4056,5,384,0,0,4056,
	4058,3,896,448,0,4057,4055,1,0,0,0,4058,4061,1,0,0,0,4059,4057,1,0,0,0,
	4059,4060,1,0,0,0,4060,4063,1,0,0,0,4061,4059,1,0,0,0,4062,4053,1,0,0,0,
	4062,4063,1,0,0,0,4063,4064,1,0,0,0,4064,4065,5,387,0,0,4065,667,1,0,0,
	0,4066,4068,5,288,0,0,4067,4069,5,422,0,0,4068,4067,1,0,0,0,4068,4069,1,
	0,0,0,4069,4076,1,0,0,0,4070,4072,3,670,335,0,4071,4070,1,0,0,0,4071,4072,
	1,0,0,0,4072,4073,1,0,0,0,4073,4077,3,672,336,0,4074,4075,5,336,0,0,4075,
	4077,3,674,337,0,4076,4071,1,0,0,0,4076,4074,1,0,0,0,4077,4080,1,0,0,0,
	4078,4080,3,678,339,0,4079,4066,1,0,0,0,4079,4078,1,0,0,0,4080,669,1,0,
	0,0,4081,4082,7,21,0,0,4082,671,1,0,0,0,4083,4088,3,676,338,0,4084,4085,
	5,384,0,0,4085,4087,3,676,338,0,4086,4084,1,0,0,0,4087,4090,1,0,0,0,4088,
	4086,1,0,0,0,4088,4089,1,0,0,0,4089,673,1,0,0,0,4090,4088,1,0,0,0,4091,
	4092,5,386,0,0,4092,4093,3,682,341,0,4093,4094,5,387,0,0,4094,4095,3,230,
	115,0,4095,4096,3,234,117,0,4096,4097,5,359,0,0,4097,4110,5,412,0,0,4098,
	4108,5,17,0,0,4099,4102,5,386,0,0,4100,4103,3,604,302,0,4101,4103,3,266,
	133,0,4102,4100,1,0,0,0,4102,4101,1,0,0,0,4103,4104,1,0,0,0,4104,4105,5,
	387,0,0,4105,4109,1,0,0,0,4106,4109,3,604,302,0,4107,4109,3,266,133,0,4108,
	4099,1,0,0,0,4108,4106,1,0,0,0,4108,4107,1,0,0,0,4109,4111,1,0,0,0,4110,
	4098,1,0,0,0,4110,4111,1,0,0,0,4111,4112,1,0,0,0,4112,4113,3,230,115,0,
	4113,4114,3,232,116,0,4114,675,1,0,0,0,4115,4136,3,596,298,0,4116,4133,
	3,796,398,0,4117,4119,5,17,0,0,4118,4117,1,0,0,0,4118,4119,1,0,0,0,4119,
	4120,1,0,0,0,4120,4134,3,896,448,0,4121,4122,5,17,0,0,4122,4123,5,386,0,
	0,4123,4128,3,896,448,0,4124,4125,5,384,0,0,4125,4127,3,896,448,0,4126,
	4124,1,0,0,0,4127,4130,1,0,0,0,4128,4126,1,0,0,0,4128,4129,1,0,0,0,4129,
	4131,1,0,0,0,4130,4128,1,0,0,0,4131,4132,5,387,0,0,4132,4134,1,0,0,0,4133,
	4118,1,0,0,0,4133,4121,1,0,0,0,4133,4134,1,0,0,0,4134,4136,1,0,0,0,4135,
	4115,1,0,0,0,4135,4116,1,0,0,0,4136,677,1,0,0,0,4137,4138,7,29,0,0,4138,
	4139,3,682,341,0,4139,4140,3,230,115,0,4140,4141,3,234,117,0,4141,4142,
	5,359,0,0,4142,4155,5,412,0,0,4143,4153,5,17,0,0,4144,4147,5,386,0,0,4145,
	4148,3,604,302,0,4146,4148,3,266,133,0,4147,4145,1,0,0,0,4147,4146,1,0,
	0,0,4148,4149,1,0,0,0,4149,4150,5,387,0,0,4150,4154,1,0,0,0,4151,4154,3,
	604,302,0,4152,4154,3,266,133,0,4153,4144,1,0,0,0,4153,4151,1,0,0,0,4153,
	4152,1,0,0,0,4154,4156,1,0,0,0,4155,4143,1,0,0,0,4155,4156,1,0,0,0,4156,
	4157,1,0,0,0,4157,4158,3,230,115,0,4158,4159,3,232,116,0,4159,679,1,0,0,
	0,4160,4163,3,596,298,0,4161,4163,3,796,398,0,4162,4160,1,0,0,0,4162,4161,
	1,0,0,0,4163,681,1,0,0,0,4164,4169,3,680,340,0,4165,4166,5,384,0,0,4166,
	4168,3,680,340,0,4167,4165,1,0,0,0,4168,4171,1,0,0,0,4169,4167,1,0,0,0,
	4169,4170,1,0,0,0,4170,683,1,0,0,0,4171,4169,1,0,0,0,4172,4173,5,374,0,
	0,4173,4178,3,686,343,0,4174,4175,5,384,0,0,4175,4177,3,686,343,0,4176,
	4174,1,0,0,0,4177,4180,1,0,0,0,4178,4176,1,0,0,0,4178,4179,1,0,0,0,4179,
	685,1,0,0,0,4180,4178,1,0,0,0,4181,4182,3,896,448,0,4182,4183,5,17,0,0,
	4183,4184,3,688,344,0,4184,687,1,0,0,0,4185,4198,3,896,448,0,4186,4188,
	5,386,0,0,4187,4189,3,896,448,0,4188,4187,1,0,0,0,4188,4189,1,0,0,0,4189,
	4191,1,0,0,0,4190,4192,3,646,323,0,4191,4190,1,0,0,0,4191,4192,1,0,0,0,
	4192,4194,1,0,0,0,4193,4195,3,690,345,0,4194,4193,1,0,0,0,4194,4195,1,0,
	0,0,4195,4196,1,0,0,0,4196,4198,5,387,0,0,4197,4185,1,0,0,0,4197,4186,1,
	0,0,0,4198,689,1,0,0,0,4199,4202,3,692,346,0,4200,4202,3,694,347,0,4201,
	4199,1,0,0,0,4201,4200,1,0,0,0,4202,691,1,0,0,0,4203,4210,5,282,0,0,4204,
	4211,3,696,348,0,4205,4206,5,25,0,0,4206,4207,3,698,349,0,4207,4208,5,11,
	0,0,4208,4209,3,698,349,0,4209,4211,1,0,0,0,4210,4204,1,0,0,0,4210,4205,
	1,0,0,0,4211,693,1,0,0,0,4212,4219,5,250,0,0,4213,4220,3,696,348,0,4214,
	4215,5,25,0,0,4215,4216,3,698,349,0,4216,4217,5,11,0,0,4217,4218,3,698,
	349,0,4218,4220,1,0,0,0,4219,4213,1,0,0,0,4219,4214,1,0,0,0,4220,695,1,
	0,0,0,4221,4222,5,343,0,0,4222,4228,5,237,0,0,4223,4224,5,62,0,0,4224,4228,
	5,281,0,0,4225,4226,5,417,0,0,4226,4228,5,237,0,0,4227,4221,1,0,0,0,4227,
	4223,1,0,0,0,4227,4225,1,0,0,0,4228,697,1,0,0,0,4229,4230,7,30,0,0,4230,
	4234,7,31,0,0,4231,4232,5,62,0,0,4232,4234,5,281,0,0,4233,4229,1,0,0,0,
	4233,4231,1,0,0,0,4234,699,1,0,0,0,4235,4236,5,139,0,0,4236,4237,5,32,0,
	0,4237,4238,3,702,351,0,4238,701,1,0,0,0,4239,4243,3,706,353,0,4240,4243,
	3,708,354,0,4241,4243,3,704,352,0,4242,4239,1,0,0,0,4242,4240,1,0,0,0,4242,
	4241,1,0,0,0,4243,703,1,0,0,0,4244,4245,5,386,0,0,4245,4246,5,387,0,0,4246,
	705,1,0,0,0,4247,4250,5,280,0,0,4248,4250,5,61,0,0,4249,4247,1,0,0,0,4249,
	4248,1,0,0,0,4250,4251,1,0,0,0,4251,4252,5,386,0,0,4252,4257,3,796,398,
	0,4253,4254,5,384,0,0,4254,4256,3,796,398,0,4255,4253,1,0,0,0,4256,4259,
	1,0,0,0,4257,4255,1,0,0,0,4257,4258,1,0,0,0,4258,4260,1,0,0,0,4259,4257,
	1,0,0,0,4260,4261,5,387,0,0,4261,707,1,0,0,0,4262,4267,3,724,362,0,4263,
	4264,5,375,0,0,4264,4268,5,280,0,0,4265,4266,5,375,0,0,4266,4268,5,61,0,
	0,4267,4263,1,0,0,0,4267,4265,1,0,0,0,4267,4268,1,0,0,0,4268,4282,1,0,0,
	0,4269,4270,5,140,0,0,4270,4271,5,294,0,0,4271,4272,5,386,0,0,4272,4277,
	3,710,355,0,4273,4274,5,384,0,0,4274,4276,3,710,355,0,4275,4273,1,0,0,0,
	4276,4279,1,0,0,0,4277,4275,1,0,0,0,4277,4278,1,0,0,0,4278,4280,1,0,0,0,
	4279,4277,1,0,0,0,4280,4281,5,387,0,0,4281,4283,1,0,0,0,4282,4269,1,0,0,
	0,4282,4283,1,0,0,0,4283,709,1,0,0,0,4284,4287,3,712,356,0,4285,4287,3,
	714,357,0,4286,4284,1,0,0,0,4286,4285,1,0,0,0,4287,711,1,0,0,0,4288,4290,
	5,386,0,0,4289,4291,3,796,398,0,4290,4289,1,0,0,0,4290,4291,1,0,0,0,4291,
	4296,1,0,0,0,4292,4293,5,384,0,0,4293,4295,3,796,398,0,4294,4292,1,0,0,
	0,4295,4298,1,0,0,0,4296,4294,1,0,0,0,4296,4297,1,0,0,0,4297,4299,1,0,0,
	0,4298,4296,1,0,0,0,4299,4300,5,387,0,0,4300,713,1,0,0,0,4301,4302,3,796,
	398,0,4302,715,1,0,0,0,4303,4304,5,141,0,0,4304,4305,3,720,360,0,4305,717,
	1,0,0,0,4306,4307,5,246,0,0,4307,4308,3,796,398,0,4308,719,1,0,0,0,4309,
	4310,3,796,398,0,4310,721,1,0,0,0,4311,4312,5,386,0,0,4312,4313,3,724,362,
	0,4313,4314,5,387,0,0,4314,723,1,0,0,0,4315,4317,3,728,364,0,4316,4318,
	3,726,363,0,4317,4316,1,0,0,0,4317,4318,1,0,0,0,4318,725,1,0,0,0,4319,4320,
	5,384,0,0,4320,4322,3,728,364,0,4321,4319,1,0,0,0,4322,4323,1,0,0,0,4323,
	4321,1,0,0,0,4323,4324,1,0,0,0,4324,727,1,0,0,0,4325,4328,3,600,300,0,4326,
	4328,3,796,398,0,4327,4325,1,0,0,0,4327,4326,1,0,0,0,4328,729,1,0,0,0,4329,
	4331,3,796,398,0,4330,4332,5,17,0,0,4331,4330,1,0,0,0,4331,4332,1,0,0,0,
	4332,4334,1,0,0,0,4333,4335,3,896,448,0,4334,4333,1,0,0,0,4334,4335,1,0,
	0,0,4335,4340,1,0,0,0,4336,4337,5,384,0,0,4337,4339,3,732,366,0,4338,4336,
	1,0,0,0,4339,4342,1,0,0,0,4340,4338,1,0,0,0,4340,4341,1,0,0,0,4341,731,
	1,0,0,0,4342,4340,1,0,0,0,4343,4345,3,796,398,0,4344,4346,5,17,0,0,4345,
	4344,1,0,0,0,4345,4346,1,0,0,0,4346,4348,1,0,0,0,4347,4349,3,896,448,0,
	4348,4347,1,0,0,0,4348,4349,1,0,0,0,4349,733,1,0,0,0,4350,4353,3,722,361,
	0,4351,4353,3,724,362,0,4352,4350,1,0,0,0,4352,4351,1,0,0,0,4353,735,1,
	0,0,0,4354,4355,5,386,0,0,4355,4360,3,330,165,0,4356,4357,5,384,0,0,4357,
	4359,3,330,165,0,4358,4356,1,0,0,0,4359,4362,1,0,0,0,4360,4358,1,0,0,0,
	4360,4361,1,0,0,0,4361,4363,1,0,0,0,4362,4360,1,0,0,0,4363,4364,5,387,0,
	0,4364,737,1,0,0,0,4365,4370,3,330,165,0,4366,4367,5,384,0,0,4367,4369,
	3,330,165,0,4368,4366,1,0,0,0,4369,4372,1,0,0,0,4370,4368,1,0,0,0,4370,
	4371,1,0,0,0,4371,739,1,0,0,0,4372,4370,1,0,0,0,4373,4374,5,219,0,0,4374,
	4375,5,32,0,0,4375,4380,3,330,165,0,4376,4377,5,384,0,0,4377,4379,3,330,
	165,0,4378,4376,1,0,0,0,4379,4382,1,0,0,0,4380,4378,1,0,0,0,4380,4381,1,
	0,0,0,4381,741,1,0,0,0,4382,4380,1,0,0,0,4383,4384,5,41,0,0,4384,4385,5,
	32,0,0,4385,4386,3,734,367,0,4386,743,1,0,0,0,4387,4388,5,227,0,0,4388,
	4389,5,32,0,0,4389,4390,3,734,367,0,4390,745,1,0,0,0,4391,4392,5,93,0,0,
	4392,4393,5,32,0,0,4393,4394,3,734,367,0,4394,747,1,0,0,0,4395,4396,5,303,
	0,0,4396,4399,5,32,0,0,4397,4400,3,736,368,0,4398,4400,3,738,369,0,4399,
	4397,1,0,0,0,4399,4398,1,0,0,0,4400,749,1,0,0,0,4401,4402,5,338,0,0,4402,
	4406,5,386,0,0,4403,4407,5,172,0,0,4404,4407,5,332,0,0,4405,4407,5,29,0,
	0,4406,4403,1,0,0,0,4406,4404,1,0,0,0,4406,4405,1,0,0,0,4406,4407,1,0,0,
	0,4407,4409,1,0,0,0,4408,4410,3,680,340,0,4409,4408,1,0,0,0,4409,4410,1,
	0,0,0,4410,4411,1,0,0,0,4411,4412,5,134,0,0,4412,4413,3,680,340,0,4413,
	4414,5,387,0,0,4414,751,1,0,0,0,4415,4456,3,750,375,0,4416,4417,3,756,378,
	0,4417,4432,5,386,0,0,4418,4433,5,402,0,0,4419,4421,3,670,335,0,4420,4419,
	1,0,0,0,4420,4421,1,0,0,0,4421,4430,1,0,0,0,4422,4427,3,680,340,0,4423,
	4424,5,384,0,0,4424,4426,3,680,340,0,4425,4423,1,0,0,0,4426,4429,1,0,0,
	0,4427,4425,1,0,0,0,4427,4428,1,0,0,0,4428,4431,1,0,0,0,4429,4427,1,0,0,
	0,4430,4422,1,0,0,0,4430,4431,1,0,0,0,4431,4433,1,0,0,0,4432,4418,1,0,0,
	0,4432,4420,1,0,0,0,4433,4453,1,0,0,0,4434,4435,5,387,0,0,4435,4436,5,376,
	0,0,4436,4437,5,139,0,0,4437,4438,5,386,0,0,4438,4439,3,740,370,0,4439,
	4440,5,387,0,0,4440,4454,1,0,0,0,4441,4443,5,387,0,0,4442,4444,3,754,377,
	0,4443,4442,1,0,0,0,4443,4444,1,0,0,0,4444,4445,1,0,0,0,4445,4446,5,224,
	0,0,4446,4454,3,688,344,0,4447,4448,3,754,377,0,4448,4449,5,387,0,0,4449,
	4450,5,224,0,0,4450,4451,3,688,344,0,4451,4454,1,0,0,0,4452,4454,5,387,
	0,0,4453,4434,1,0,0,0,4453,4441,1,0,0,0,4453,4447,1,0,0,0,4453,4452,1,0,
	0,0,4454,4456,1,0,0,0,4455,4415,1,0,0,0,4455,4416,1,0,0,0,4456,753,1,0,
	0,0,4457,4458,5,271,0,0,4458,4462,5,210,0,0,4459,4460,5,146,0,0,4460,4462,
	5,210,0,0,4461,4457,1,0,0,0,4461,4459,1,0,0,0,4462,755,1,0,0,0,4463,4466,
	3,898,449,0,4464,4466,3,904,452,0,4465,4463,1,0,0,0,4465,4464,1,0,0,0,4466,
	757,1,0,0,0,4467,4468,5,36,0,0,4468,4469,5,386,0,0,4469,4470,3,796,398,
	0,4470,4471,5,17,0,0,4471,4474,3,370,185,0,4472,4473,5,132,0,0,4473,4475,
	5,412,0,0,4474,4472,1,0,0,0,4474,4475,1,0,0,0,4475,4476,1,0,0,0,4476,4477,
	5,387,0,0,4477,759,1,0,0,0,4478,4479,5,35,0,0,4479,4485,3,796,398,0,4480,
	4481,5,371,0,0,4481,4482,3,796,398,0,4482,4483,5,324,0,0,4483,4484,3,796,
	398,0,4484,4486,1,0,0,0,4485,4480,1,0,0,0,4486,4487,1,0,0,0,4487,4485,1,
	0,0,0,4487,4488,1,0,0,0,4488,4491,1,0,0,0,4489,4490,5,101,0,0,4490,4492,
	3,796,398,0,4491,4489,1,0,0,0,4491,4492,1,0,0,0,4492,4493,1,0,0,0,4493,
	4494,5,103,0,0,4494,761,1,0,0,0,4495,4501,5,35,0,0,4496,4497,5,371,0,0,
	4497,4498,3,796,398,0,4498,4499,5,324,0,0,4499,4500,3,796,398,0,4500,4502,
	1,0,0,0,4501,4496,1,0,0,0,4502,4503,1,0,0,0,4503,4501,1,0,0,0,4503,4504,
	1,0,0,0,4504,4507,1,0,0,0,4505,4506,5,101,0,0,4506,4508,3,796,398,0,4507,
	4505,1,0,0,0,4507,4508,1,0,0,0,4508,4509,1,0,0,0,4509,4510,5,103,0,0,4510,
	763,1,0,0,0,4511,4512,5,127,0,0,4512,4513,5,386,0,0,4513,4516,3,796,398,
	0,4514,4515,5,330,0,0,4515,4517,3,766,383,0,4516,4514,1,0,0,0,4516,4517,
	1,0,0,0,4517,4518,1,0,0,0,4518,4519,5,387,0,0,4519,765,1,0,0,0,4520,4521,
	7,32,0,0,4521,767,1,0,0,0,4522,4523,5,119,0,0,4523,4524,5,386,0,0,4524,
	4525,3,770,385,0,4525,4526,5,134,0,0,4526,4527,3,796,398,0,4527,4528,5,
	387,0,0,4528,769,1,0,0,0,4529,4530,7,33,0,0,4530,771,1,0,0,0,4531,4545,
	3,790,395,0,4532,4545,5,417,0,0,4533,4545,3,782,391,0,4534,4545,3,784,392,
	0,4535,4545,3,786,393,0,4536,4545,5,412,0,0,4537,4545,3,778,389,0,4538,
	4545,5,414,0,0,4539,4545,5,415,0,0,4540,4545,3,780,390,0,4541,4545,3,874,
	437,0,4542,4545,5,209,0,0,4543,4545,3,774,387,0,4544,4531,1,0,0,0,4544,
	4532,1,0,0,0,4544,4533,1,0,0,0,4544,4534,1,0,0,0,4544,4535,1,0,0,0,4544,
	4536,1,0,0,0,4544,4537,1,0,0,0,4544,4538,1,0,0,0,4544,4539,1,0,0,0,4544,
	4540,1,0,0,0,4544,4541,1,0,0,0,4544,4542,1,0,0,0,4544,4543,1,0,0,0,4545,
	773,1,0,0,0,4546,4547,3,776,388,0,4547,775,1,0,0,0,4548,4549,5,410,0,0,
	4549,777,1,0,0,0,4550,4552,5,412,0,0,4551,4553,5,412,0,0,4552,4551,1,0,
	0,0,4553,4554,1,0,0,0,4554,4552,1,0,0,0,4554,4555,1,0,0,0,4555,779,1,0,
	0,0,4556,4557,5,419,0,0,4557,4558,5,413,0,0,4558,781,1,0,0,0,4559,4560,
	5,71,0,0,4560,4563,5,412,0,0,4561,4563,5,63,0,0,4562,4559,1,0,0,0,4562,
	4561,1,0,0,0,4563,783,1,0,0,0,4564,4565,5,326,0,0,4565,4568,5,412,0,0,4566,
	4568,5,64,0,0,4567,4564,1,0,0,0,4567,4566,1,0,0,0,4568,785,1,0,0,0,4569,
	4570,5,327,0,0,4570,4571,5,412,0,0,4571,787,1,0,0,0,4572,4573,7,25,0,0,
	4573,789,1,0,0,0,4574,4575,3,788,394,0,4575,4576,3,794,397,0,4576,791,1,
	0,0,0,4577,4578,5,386,0,0,4578,4579,3,788,394,0,4579,4580,5,387,0,0,4580,
	4581,3,794,397,0,4581,4593,1,0,0,0,4582,4588,5,158,0,0,4583,4589,3,788,
	394,0,4584,4585,5,386,0,0,4585,4586,3,796,398,0,4586,4587,5,387,0,0,4587,
	4589,1,0,0,0,4588,4583,1,0,0,0,4588,4584,1,0,0,0,4589,4590,1,0,0,0,4590,
	4591,3,794,397,0,4591,4593,1,0,0,0,4592,4577,1,0,0,0,4592,4582,1,0,0,0,
	4593,793,1,0,0,0,4594,4595,5,380,0,0,4595,4596,5,330,0,0,4596,4607,5,199,
	0,0,4597,4598,5,73,0,0,4598,4599,5,330,0,0,4599,4607,5,287,0,0,4600,4607,
	5,380,0,0,4601,4607,5,199,0,0,4602,4607,5,73,0,0,4603,4607,5,143,0,0,4604,
	4607,5,198,0,0,4605,4607,5,287,0,0,4606,4594,1,0,0,0,4606,4597,1,0,0,0,
	4606,4600,1,0,0,0,4606,4601,1,0,0,0,4606,4602,1,0,0,0,4606,4603,1,0,0,0,
	4606,4604,1,0,0,0,4606,4605,1,0,0,0,4607,795,1,0,0,0,4608,4609,3,872,436,
	0,4609,797,1,0,0,0,4610,4622,3,772,386,0,4611,4622,3,792,396,0,4612,4622,
	3,758,379,0,4613,4622,3,768,384,0,4614,4622,3,764,382,0,4615,4622,3,760,
	380,0,4616,4622,3,762,381,0,4617,4622,3,834,417,0,4618,4622,3,752,376,0,
	4619,4622,3,598,299,0,4620,4622,3,722,361,0,4621,4610,1,0,0,0,4621,4611,
	1,0,0,0,4621,4612,1,0,0,0,4621,4613,1,0,0,0,4621,4614,1,0,0,0,4621,4615,
	1,0,0,0,4621,4616,1,0,0,0,4621,4617,1,0,0,0,4621,4618,1,0,0,0,4621,4619,
	1,0,0,0,4621,4620,1,0,0,0,4622,799,1,0,0,0,4623,4632,3,798,399,0,4624,4625,
	5,388,0,0,4625,4626,3,796,398,0,4626,4627,5,389,0,0,4627,4631,1,0,0,0,4628,
	4629,5,382,0,0,4629,4631,3,896,448,0,4630,4624,1,0,0,0,4630,4628,1,0,0,
	0,4631,4634,1,0,0,0,4632,4630,1,0,0,0,4632,4633,1,0,0,0,4633,801,1,0,0,
	0,4634,4632,1,0,0,0,4635,4636,7,34,0,0,4636,803,1,0,0,0,4637,4639,3,802,
	401,0,4638,4637,1,0,0,0,4639,4642,1,0,0,0,4640,4638,1,0,0,0,4640,4641,1,
	0,0,0,4641,4643,1,0,0,0,4642,4640,1,0,0,0,4643,4644,3,800,400,0,4644,805,
	1,0,0,0,4645,4646,5,409,0,0,4646,807,1,0,0,0,4647,4653,3,804,402,0,4648,
	4649,3,806,403,0,4649,4650,3,804,402,0,4650,4652,1,0,0,0,4651,4648,1,0,
	0,0,4652,4655,1,0,0,0,4653,4651,1,0,0,0,4653,4654,1,0,0,0,4654,809,1,0,
	0,0,4655,4653,1,0,0,0,4656,4657,7,35,0,0,4657,811,1,0,0,0,4658,4664,3,808,
	404,0,4659,4660,3,810,405,0,4660,4661,3,808,404,0,4661,4663,1,0,0,0,4662,
	4659,1,0,0,0,4663,4666,1,0,0,0,4664,4662,1,0,0,0,4664,4665,1,0,0,0,4665,
	813,1,0,0,0,4666,4664,1,0,0,0,4667,4668,7,36,0,0,4668,815,1,0,0,0,4669,
	4675,3,812,406,0,4670,4671,3,814,407,0,4671,4672,3,812,406,0,4672,4674,
	1,0,0,0,4673,4670,1,0,0,0,4674,4677,1,0,0,0,4675,4673,1,0,0,0,4675,4676,
	1,0,0,0,4676,817,1,0,0,0,4677,4675,1,0,0,0,4678,4679,5,408,0,0,4679,819,
	1,0,0,0,4680,4686,3,816,408,0,4681,4682,3,818,409,0,4682,4683,3,816,408,
	0,4683,4685,1,0,0,0,4684,4681,1,0,0,0,4685,4688,1,0,0,0,4686,4684,1,0,0,
	0,4686,4687,1,0,0,0,4687,821,1,0,0,0,4688,4686,1,0,0,0,4689,4690,5,405,
	0,0,4690,823,1,0,0,0,4691,4697,3,820,410,0,4692,4693,3,822,411,0,4693,4694,
	3,820,410,0,4694,4696,1,0,0,0,4695,4692,1,0,0,0,4696,4699,1,0,0,0,4697,
	4695,1,0,0,0,4697,4698,1,0,0,0,4698,825,1,0,0,0,4699,4697,1,0,0,0,4700,
	4701,5,407,0,0,4701,827,1,0,0,0,4702,4708,3,824,412,0,4703,4704,3,826,413,
	0,4704,4705,3,824,412,0,4705,4707,1,0,0,0,4706,4703,1,0,0,0,4707,4710,1,
	0,0,0,4708,4706,1,0,0,0,4708,4709,1,0,0,0,4709,829,1,0,0,0,4710,4708,1,
	0,0,0,4711,4712,7,37,0,0,4712,831,1,0,0,0,4713,4719,3,830,415,0,4714,4719,
	5,395,0,0,4715,4719,5,396,0,0,4716,4719,5,397,0,0,4717,4719,5,398,0,0,4718,
	4713,1,0,0,0,4718,4714,1,0,0,0,4718,4715,1,0,0,0,4718,4716,1,0,0,0,4718,
	4717,1,0,0,0,4719,833,1,0,0,0,4720,4721,5,386,0,0,4721,4722,3,398,199,0,
	4722,4723,5,387,0,0,4723,835,1,0,0,0,4724,4728,3,838,419,0,4725,4726,5,
	112,0,0,4726,4728,3,834,417,0,4727,4724,1,0,0,0,4727,4725,1,0,0,0,4728,
	837,1,0,0,0,4729,4731,3,828,414,0,4730,4732,3,840,420,0,4731,4730,1,0,0,
	0,4731,4732,1,0,0,0,4732,839,1,0,0,0,4733,4734,3,832,416,0,4734,4735,3,
	828,414,0,4735,4740,1,0,0,0,4736,4740,3,842,421,0,4737,4738,5,206,0,0,4738,
	4740,3,850,425,0,4739,4733,1,0,0,0,4739,4736,1,0,0,0,4739,4737,1,0,0,0,
	4740,841,1,0,0,0,4741,4742,5,148,0,0,4742,4753,3,848,424,0,4743,4744,5,
	25,0,0,4744,4745,3,828,414,0,4745,4746,5,11,0,0,4746,4747,3,828,414,0,4747,
	4753,1,0,0,0,4748,4749,5,176,0,0,4749,4750,7,38,0,0,4750,4753,3,722,361,
	0,4751,4753,3,844,422,0,4752,4741,1,0,0,0,4752,4743,1,0,0,0,4752,4748,1,
	0,0,0,4752,4751,1,0,0,0,4753,843,1,0,0,0,4754,4755,3,890,445,0,4755,4756,
	3,846,423,0,4756,4757,3,834,417,0,4757,845,1,0,0,0,4758,4759,7,39,0,0,4759,
	847,1,0,0,0,4760,4763,3,834,417,0,4761,4763,3,722,361,0,4762,4760,1,0,0,
	0,4762,4761,1,0,0,0,4763,849,1,0,0,0,4764,4765,3,830,415,0,4765,4766,3,
	828,414,0,4766,4769,1,0,0,0,4767,4769,3,842,421,0,4768,4764,1,0,0,0,4768,
	4767,1,0,0,0,4769,851,1,0,0,0,4770,4771,5,160,0,0,4771,4772,5,92,0,0,4772,
	4773,5,134,0,0,4773,853,1,0,0,0,4774,4782,5,392,0,0,4775,4782,5,393,0,0,
	4776,4782,5,394,0,0,4777,4778,5,160,0,0,4778,4779,5,206,0,0,4779,4780,5,
	92,0,0,4780,4782,5,134,0,0,4781,4774,1,0,0,0,4781,4775,1,0,0,0,4781,4776,
	1,0,0,0,4781,4777,1,0,0,0,4782,855,1,0,0,0,4783,4792,3,836,418,0,4784,4785,
	3,854,427,0,4785,4786,3,836,418,0,4786,4791,1,0,0,0,4787,4788,3,852,426,
	0,4788,4789,3,836,418,0,4789,4791,1,0,0,0,4790,4784,1,0,0,0,4790,4787,1,
	0,0,0,4791,4794,1,0,0,0,4792,4790,1,0,0,0,4792,4793,1,0,0,0,4793,857,1,
	0,0,0,4794,4792,1,0,0,0,4795,4808,5,209,0,0,4796,4808,5,339,0,0,4797,4808,
	5,120,0,0,4798,4808,5,349,0,0,4799,4800,5,206,0,0,4800,4808,5,209,0,0,4801,
	4802,5,206,0,0,4802,4808,5,339,0,0,4803,4804,5,206,0,0,4804,4808,5,120,
	0,0,4805,4806,5,206,0,0,4806,4808,5,349,0,0,4807,4795,1,0,0,0,4807,4796,
	1,0,0,0,4807,4797,1,0,0,0,4807,4798,1,0,0,0,4807,4799,1,0,0,0,4807,4801,
	1,0,0,0,4807,4803,1,0,0,0,4807,4805,1,0,0,0,4808,859,1,0,0,0,4809,4812,
	3,856,428,0,4810,4811,5,160,0,0,4811,4813,3,858,429,0,4812,4810,1,0,0,0,
	4812,4813,1,0,0,0,4813,861,1,0,0,0,4814,4815,5,206,0,0,4815,863,1,0,0,0,
	4816,4818,3,862,431,0,4817,4816,1,0,0,0,4818,4821,1,0,0,0,4819,4817,1,0,
	0,0,4819,4820,1,0,0,0,4820,4822,1,0,0,0,4821,4819,1,0,0,0,4822,4823,3,860,
	430,0,4823,865,1,0,0,0,4824,4825,5,11,0,0,4825,867,1,0,0,0,4826,4832,3,
	864,432,0,4827,4828,3,866,433,0,4828,4829,3,864,432,0,4829,4831,1,0,0,0,
	4830,4827,1,0,0,0,4831,4834,1,0,0,0,4832,4830,1,0,0,0,4832,4833,1,0,0,0,
	4833,869,1,0,0,0,4834,4832,1,0,0,0,4835,4836,5,218,0,0,4836,871,1,0,0,0,
	4837,4843,3,868,434,0,4838,4839,3,870,435,0,4839,4840,3,868,434,0,4840,
	4842,1,0,0,0,4841,4838,1,0,0,0,4842,4845,1,0,0,0,4843,4841,1,0,0,0,4843,
	4844,1,0,0,0,4844,873,1,0,0,0,4845,4843,1,0,0,0,4846,4847,7,40,0,0,4847,
	875,1,0,0,0,4848,4849,7,40,0,0,4849,877,1,0,0,0,4850,4852,3,640,320,0,4851,
	4853,3,880,440,0,4852,4851,1,0,0,0,4852,4853,1,0,0,0,4853,879,1,0,0,0,4854,
	4855,5,227,0,0,4855,4856,5,386,0,0,4856,4861,3,882,441,0,4857,4858,5,384,
	0,0,4858,4860,3,882,441,0,4859,4857,1,0,0,0,4860,4863,1,0,0,0,4861,4859,
	1,0,0,0,4861,4862,1,0,0,0,4862,4864,1,0,0,0,4863,4861,1,0,0,0,4864,4865,
	5,387,0,0,4865,881,1,0,0,0,4866,4869,3,896,448,0,4867,4868,5,392,0,0,4868,
	4870,3,772,386,0,4869,4867,1,0,0,0,4869,4870,1,0,0,0,4870,883,1,0,0,0,4871,
	4872,5,386,0,0,4872,4877,3,886,443,0,4873,4874,5,384,0,0,4874,4876,3,886,
	443,0,4875,4873,1,0,0,0,4876,4879,1,0,0,0,4877,4875,1,0,0,0,4877,4878,1,
	0,0,0,4878,4880,1,0,0,0,4879,4877,1,0,0,0,4880,4881,5,387,0,0,4881,885,
	1,0,0,0,4882,4883,3,896,448,0,4883,4884,3,888,444,0,4884,4885,3,772,386,
	0,4885,887,1,0,0,0,4886,4889,5,176,0,0,4887,4889,3,890,445,0,4888,4886,
	1,0,0,0,4888,4887,1,0,0,0,4889,889,1,0,0,0,4890,4891,7,41,0,0,4891,891,
	1,0,0,0,4892,4893,7,42,0,0,4893,893,1,0,0,0,4894,4898,3,892,446,0,4895,
	4898,5,412,0,0,4896,4898,3,898,449,0,4897,4894,1,0,0,0,4897,4895,1,0,0,
	0,4897,4896,1,0,0,0,4898,895,1,0,0,0,4899,4902,5,418,0,0,4900,4902,3,902,
	451,0,4901,4899,1,0,0,0,4901,4900,1,0,0,0,4902,897,1,0,0,0,4903,4906,3,
	896,448,0,4904,4905,5,382,0,0,4905,4907,3,896,448,0,4906,4904,1,0,0,0,4906,
	4907,1,0,0,0,4907,899,1,0,0,0,4908,4909,3,896,448,0,4909,901,1,0,0,0,4910,
	4911,7,43,0,0,4911,903,1,0,0,0,4912,4913,7,44,0,0,4913,905,1,0,0,0,4914,
	4915,3,908,454,0,4915,4916,5,0,0,1,4916,907,1,0,0,0,4917,4922,3,910,455,
	0,4918,4919,5,384,0,0,4919,4921,3,910,455,0,4920,4918,1,0,0,0,4921,4924,
	1,0,0,0,4922,4920,1,0,0,0,4922,4923,1,0,0,0,4923,909,1,0,0,0,4924,4922,
	1,0,0,0,4925,4930,3,912,456,0,4926,4927,5,386,0,0,4927,4928,3,914,457,0,
	4928,4929,5,387,0,0,4929,4931,1,0,0,0,4930,4926,1,0,0,0,4930,4931,1,0,0,
	0,4931,911,1,0,0,0,4932,4933,7,45,0,0,4933,913,1,0,0,0,4934,4939,3,916,
	458,0,4935,4936,5,384,0,0,4936,4938,3,916,458,0,4937,4935,1,0,0,0,4938,
	4941,1,0,0,0,4939,4937,1,0,0,0,4939,4940,1,0,0,0,4940,915,1,0,0,0,4941,
	4939,1,0,0,0,4942,4943,7,46,0,0,4943,917,1,0,0,0,4944,4945,5,239,0,0,4945,
	4946,3,896,448,0,4946,4947,5,134,0,0,4947,4948,3,382,191,0,4948,919,1,0,
	0,0,4949,4950,5,110,0,0,4950,4951,3,896,448,0,4951,4952,5,359,0,0,4952,
	4953,3,922,461,0,4953,921,1,0,0,0,4954,4959,3,772,386,0,4955,4956,5,384,
	0,0,4956,4958,3,772,386,0,4957,4955,1,0,0,0,4958,4961,1,0,0,0,4959,4957,
	1,0,0,0,4959,4960,1,0,0,0,4960,923,1,0,0,0,4961,4959,1,0,0,0,4962,4977,
	3,934,467,0,4963,4977,3,946,473,0,4964,4977,3,952,476,0,4965,4977,3,948,
	474,0,4966,4977,3,950,475,0,4967,4977,3,974,487,0,4968,4977,3,976,488,0,
	4969,4977,3,978,489,0,4970,4977,3,984,492,0,4971,4977,3,986,493,0,4972,
	4977,3,988,494,0,4973,4977,3,990,495,0,4974,4977,3,992,496,0,4975,4977,
	3,994,497,0,4976,4962,1,0,0,0,4976,4963,1,0,0,0,4976,4964,1,0,0,0,4976,
	4965,1,0,0,0,4976,4966,1,0,0,0,4976,4967,1,0,0,0,4976,4968,1,0,0,0,4976,
	4969,1,0,0,0,4976,4970,1,0,0,0,4976,4971,1,0,0,0,4976,4972,1,0,0,0,4976,
	4973,1,0,0,0,4976,4974,1,0,0,0,4976,4975,1,0,0,0,4977,925,1,0,0,0,4978,
	4979,5,249,0,0,4979,4980,5,392,0,0,4980,4986,5,417,0,0,4981,4982,5,80,0,
	0,4982,4983,5,236,0,0,4983,4984,5,392,0,0,4984,4986,3,954,477,0,4985,4978,
	1,0,0,0,4985,4981,1,0,0,0,4986,927,1,0,0,0,4987,4992,3,926,463,0,4988,4989,
	5,384,0,0,4989,4991,3,926,463,0,4990,4988,1,0,0,0,4991,4994,1,0,0,0,4992,
	4990,1,0,0,0,4992,4993,1,0,0,0,4993,929,1,0,0,0,4994,4992,1,0,0,0,4995,
	4999,5,249,0,0,4996,4997,5,80,0,0,4997,4999,5,236,0,0,4998,4995,1,0,0,0,
	4998,4996,1,0,0,0,4999,931,1,0,0,0,5000,5005,3,930,465,0,5001,5002,5,384,
	0,0,5002,5004,3,930,465,0,5003,5001,1,0,0,0,5004,5007,1,0,0,0,5005,5003,
	1,0,0,0,5005,5006,1,0,0,0,5006,933,1,0,0,0,5007,5005,1,0,0,0,5008,5009,
	5,58,0,0,5009,5010,5,270,0,0,5010,5012,5,233,0,0,5011,5013,3,40,20,0,5012,
	5011,1,0,0,0,5012,5013,1,0,0,0,5013,5023,1,0,0,0,5014,5015,3,896,448,0,
	5015,5016,5,176,0,0,5016,5017,3,896,448,0,5017,5024,1,0,0,0,5018,5021,3,
	896,448,0,5019,5020,5,375,0,0,5020,5022,3,928,464,0,5021,5019,1,0,0,0,5021,
	5022,1,0,0,0,5022,5024,1,0,0,0,5023,5014,1,0,0,0,5023,5018,1,0,0,0,5024,
	935,1,0,0,0,5025,5026,5,375,0,0,5026,5027,5,268,0,0,5027,937,1,0,0,0,5028,
	5030,5,2,0,0,5029,5031,3,936,468,0,5030,5029,1,0,0,0,5030,5031,1,0,0,0,
	5031,939,1,0,0,0,5032,5033,5,102,0,0,5033,941,1,0,0,0,5034,5035,5,91,0,
	0,5035,943,1,0,0,0,5036,5037,5,351,0,0,5037,945,1,0,0,0,5038,5039,5,9,0,
	0,5039,5040,5,270,0,0,5040,5041,5,233,0,0,5041,5059,3,896,448,0,5042,5060,
	5,362,0,0,5043,5060,5,91,0,0,5044,5045,5,293,0,0,5045,5060,3,928,464,0,
	5046,5047,5,352,0,0,5047,5060,3,932,466,0,5048,5049,5,264,0,0,5049,5050,
	5,330,0,0,5050,5060,3,896,448,0,5051,5053,3,938,469,0,5052,5054,3,940,470,
	0,5053,5052,1,0,0,0,5053,5054,1,0,0,0,5054,5060,1,0,0,0,5055,5057,3,940,
	470,0,5056,5058,3,938,469,0,5057,5056,1,0,0,0,5057,5058,1,0,0,0,5058,5060,
	1,0,0,0,5059,5042,1,0,0,0,5059,5043,1,0,0,0,5059,5044,1,0,0,0,5059,5046,
	1,0,0,0,5059,5048,1,0,0,0,5059,5051,1,0,0,0,5059,5055,1,0,0,0,5060,947,
	1,0,0,0,5061,5062,7,14,0,0,5062,5063,5,378,0,0,5063,5064,5,189,0,0,5064,
	949,1,0,0,0,5065,5077,5,268,0,0,5066,5067,5,3,0,0,5067,5068,5,270,0,0,5068,
	5069,5,233,0,0,5069,5070,5,375,0,0,5070,5078,3,896,448,0,5071,5072,5,270,
	0,0,5072,5073,5,233,0,0,5073,5074,3,896,448,0,5074,5075,5,375,0,0,5075,
	5076,3,896,448,0,5076,5078,1,0,0,0,5077,5066,1,0,0,0,5077,5071,1,0,0,0,
	5078,951,1,0,0,0,5079,5080,5,98,0,0,5080,5081,5,270,0,0,5081,5083,5,233,
	0,0,5082,5084,3,36,18,0,5083,5082,1,0,0,0,5083,5084,1,0,0,0,5084,5085,1,
	0,0,0,5085,5086,3,896,448,0,5086,953,1,0,0,0,5087,5092,3,896,448,0,5088,
	5089,5,382,0,0,5089,5091,3,896,448,0,5090,5088,1,0,0,0,5091,5094,1,0,0,
	0,5092,5090,1,0,0,0,5092,5093,1,0,0,0,5093,955,1,0,0,0,5094,5092,1,0,0,
	0,5095,5096,3,964,482,0,5096,957,1,0,0,0,5097,5098,3,956,478,0,5098,5099,
	5,0,0,1,5099,959,1,0,0,0,5100,5105,3,962,481,0,5101,5102,5,218,0,0,5102,
	5104,3,962,481,0,5103,5101,1,0,0,0,5104,5107,1,0,0,0,5105,5103,1,0,0,0,
	5105,5106,1,0,0,0,5106,961,1,0,0,0,5107,5105,1,0,0,0,5108,5113,3,964,482,
	0,5109,5110,5,11,0,0,5110,5112,3,964,482,0,5111,5109,1,0,0,0,5112,5115,
	1,0,0,0,5113,5111,1,0,0,0,5113,5114,1,0,0,0,5114,963,1,0,0,0,5115,5113,
	1,0,0,0,5116,5117,3,896,448,0,5117,5118,3,968,484,0,5118,5119,3,966,483,
	0,5119,965,1,0,0,0,5120,5121,7,25,0,0,5121,967,1,0,0,0,5122,5123,5,398,
	0,0,5123,969,1,0,0,0,5124,5129,5,169,0,0,5125,5126,5,201,0,0,5126,5127,
	5,330,0,0,5127,5129,3,954,477,0,5128,5124,1,0,0,0,5128,5125,1,0,0,0,5129,
	971,1,0,0,0,5130,5131,3,970,485,0,5131,5132,5,0,0,1,5132,973,1,0,0,0,5133,
	5134,5,58,0,0,5134,5135,5,337,0,0,5135,5136,3,896,448,0,5136,5137,5,382,
	0,0,5137,5138,3,896,448,0,5138,5139,5,371,0,0,5139,5140,3,956,478,0,5140,
	5141,5,95,0,0,5141,5142,3,970,485,0,5142,975,1,0,0,0,5143,5144,5,9,0,0,
	5144,5145,5,337,0,0,5145,5146,3,896,448,0,5146,5147,5,382,0,0,5147,5164,
	3,896,448,0,5148,5149,5,371,0,0,5149,5150,3,956,478,0,5150,5151,5,95,0,
	0,5151,5152,3,970,485,0,5152,5165,1,0,0,0,5153,5154,5,4,0,0,5154,5158,5,
	330,0,0,5155,5156,5,98,0,0,5156,5158,5,134,0,0,5157,5153,1,0,0,0,5157,5155,
	1,0,0,0,5158,5162,1,0,0,0,5159,5160,5,236,0,0,5160,5163,3,954,477,0,5161,
	5163,5,351,0,0,5162,5159,1,0,0,0,5162,5161,1,0,0,0,5163,5165,1,0,0,0,5164,
	5148,1,0,0,0,5164,5157,1,0,0,0,5165,977,1,0,0,0,5166,5167,5,98,0,0,5167,
	5168,5,337,0,0,5168,5169,3,896,448,0,5169,5170,5,382,0,0,5170,5171,3,896,
	448,0,5171,979,1,0,0,0,5172,5173,5,8,0,0,5173,5174,5,392,0,0,5174,5185,
	5,417,0,0,5175,5176,5,249,0,0,5176,5177,5,392,0,0,5177,5185,5,417,0,0,5178,
	5179,5,284,0,0,5179,5180,5,392,0,0,5180,5185,5,412,0,0,5181,5182,5,230,
	0,0,5182,5183,5,392,0,0,5183,5185,3,954,477,0,5184,5172,1,0,0,0,5184,5175,
	1,0,0,0,5184,5178,1,0,0,0,5184,5181,1,0,0,0,5185,981,1,0,0,0,5186,5191,
	3,980,490,0,5187,5188,5,384,0,0,5188,5190,3,980,490,0,5189,5187,1,0,0,0,
	5190,5193,1,0,0,0,5191,5189,1,0,0,0,5191,5192,1,0,0,0,5192,983,1,0,0,0,
	5193,5191,1,0,0,0,5194,5195,5,58,0,0,5195,5196,5,236,0,0,5196,5197,3,896,
	448,0,5197,5198,5,382,0,0,5198,5199,3,954,477,0,5199,5200,5,375,0,0,5200,
	5201,3,982,491,0,5201,985,1,0,0,0,5202,5203,5,9,0,0,5203,5204,5,236,0,0,
	5204,5205,3,896,448,0,5205,5206,5,382,0,0,5206,5214,3,954,477,0,5207,5208,
	5,293,0,0,5208,5215,3,982,491,0,5209,5210,5,352,0,0,5210,5215,5,284,0,0,
	5211,5212,7,47,0,0,5212,5213,5,337,0,0,5213,5215,3,896,448,0,5214,5207,
	1,0,0,0,5214,5209,1,0,0,0,5214,5211,1,0,0,0,5215,987,1,0,0,0,5216,5217,
	5,98,0,0,5217,5218,5,236,0,0,5218,5219,3,896,448,0,5219,5220,5,382,0,0,
	5220,5221,3,954,477,0,5221,989,1,0,0,0,5222,5223,5,58,0,0,5223,5224,7,48,
	0,0,5224,5225,5,192,0,0,5225,5226,5,412,0,0,5226,5227,5,148,0,0,5227,5231,
	3,896,448,0,5228,5229,5,330,0,0,5229,5232,3,954,477,0,5230,5232,3,944,472,
	0,5231,5228,1,0,0,0,5231,5230,1,0,0,0,5232,5236,1,0,0,0,5233,5234,5,375,
	0,0,5234,5235,5,219,0,0,5235,5237,5,417,0,0,5236,5233,1,0,0,0,5236,5237,
	1,0,0,0,5237,991,1,0,0,0,5238,5239,5,9,0,0,5239,5240,7,48,0,0,5240,5241,
	5,192,0,0,5241,5242,5,412,0,0,5242,5243,5,148,0,0,5243,5247,3,896,448,0,
	5244,5245,5,330,0,0,5245,5248,3,954,477,0,5246,5248,3,944,472,0,5247,5244,
	1,0,0,0,5247,5246,1,0,0,0,5248,5252,1,0,0,0,5249,5250,5,375,0,0,5250,5251,
	5,219,0,0,5251,5253,5,417,0,0,5252,5249,1,0,0,0,5252,5253,1,0,0,0,5253,
	993,1,0,0,0,5254,5255,5,98,0,0,5255,5256,7,48,0,0,5256,5257,5,192,0,0,5257,
	5258,5,412,0,0,5258,5259,5,148,0,0,5259,5260,3,896,448,0,5260,995,1,0,0,
	0,613,998,1006,1012,1019,1029,1032,1036,1056,1061,1066,1072,1076,1089,1093,
	1097,1102,1109,1113,1118,1125,1129,1140,1146,1153,1200,1229,1233,1236,1239,
	1244,1250,1254,1260,1262,1279,1291,1295,1302,1310,1313,1318,1322,1325,1335,
	1343,1347,1350,1354,1358,1361,1366,1372,1377,1382,1386,1397,1399,1403,1413,
	1417,1423,1426,1433,1438,1446,1451,1455,1463,1468,1474,1480,1483,1486,1489,
	1498,1506,1511,1519,1526,1529,1532,1534,1542,1545,1548,1551,1554,1557,1560,
	1563,1566,1569,1572,1574,1586,1590,1600,1606,1621,1638,1643,1647,1651,1658,
	1665,1671,1675,1678,1685,1708,1713,1717,1725,1734,1738,1744,1750,1757,1760,
	1766,1773,1781,1790,1799,1819,1826,1828,1835,1845,1853,1857,1861,1874,1883,
	1889,1893,1900,1903,1906,1909,1921,1927,1953,1961,1965,1968,1971,1974,1977,
	1980,1983,1986,1995,2005,2008,2028,2034,2040,2043,2045,2052,2059,2063,2073,
	2078,2087,2095,2103,2121,2134,2155,2159,2174,2180,2183,2186,2189,2192,2196,
	2210,2218,2221,2236,2270,2278,2283,2291,2296,2301,2311,2319,2327,2335,2346,
	2350,2358,2367,2370,2379,2385,2389,2395,2399,2411,2420,2431,2435,2442,2454,
	2461,2470,2473,2480,2486,2492,2495,2501,2505,2509,2514,2518,2522,2526,2534,
	2538,2542,2546,2550,2558,2562,2566,2574,2579,2584,2588,2592,2599,2608,2616,
	2627,2645,2648,2654,2680,2683,2689,2697,2705,2718,2725,2731,2735,2738,2741,
	2744,2747,2750,2757,2761,2764,2767,2770,2773,2776,2783,2786,2793,2796,2799,
	2802,2805,2808,2811,2814,2817,2820,2823,2827,2830,2833,2836,2839,2842,2845,
	2848,2851,2854,2857,2859,2865,2869,2876,2878,2881,2886,2889,2893,2898,2904,
	2910,2918,2926,2933,2939,2948,2951,2955,2968,2972,2983,2990,2994,2999,3002,
	3012,3014,3018,3025,3030,3050,3057,3080,3094,3115,3131,3144,3148,3152,3159,
	3187,3194,3199,3204,3212,3218,3222,3225,3228,3234,3241,3251,3255,3260,3264,
	3270,3277,3284,3292,3301,3305,3308,3316,3319,3327,3330,3338,3342,3347,3351,
	3360,3376,3391,3393,3409,3416,3433,3436,3439,3445,3468,3482,3485,3490,3516,
	3520,3523,3526,3530,3535,3538,3541,3544,3547,3553,3556,3559,3562,3565,3568,
	3571,3574,3577,3581,3583,3589,3594,3597,3600,3603,3609,3612,3615,3618,3621,
	3624,3627,3630,3633,3637,3639,3641,3646,3652,3657,3675,3684,3695,3703,3715,
	3718,3724,3731,3738,3745,3752,3761,3765,3772,3777,3781,3797,3801,3803,3806,
	3819,3822,3825,3837,3840,3847,3856,3861,3863,3865,3882,3885,3894,3900,3904,
	3907,3910,3913,3916,3928,3932,3935,3938,3945,3948,3953,3961,3967,3972,3976,
	3981,3988,4002,4005,4009,4026,4034,4037,4050,4059,4062,4068,4071,4076,4079,
	4088,4102,4108,4110,4118,4128,4133,4135,4147,4153,4155,4162,4169,4178,4188,
	4191,4194,4197,4201,4210,4219,4227,4233,4242,4249,4257,4267,4277,4282,4286,
	4290,4296,4317,4323,4327,4331,4334,4340,4345,4348,4352,4360,4370,4380,4399,
	4406,4409,4420,4427,4430,4432,4443,4453,4455,4461,4465,4474,4487,4491,4503,
	4507,4516,4544,4554,4562,4567,4588,4592,4606,4621,4630,4632,4640,4653,4664,
	4675,4686,4697,4708,4718,4727,4731,4739,4752,4762,4768,4781,4790,4792,4807,
	4812,4819,4832,4843,4852,4861,4869,4877,4888,4897,4901,4906,4922,4930,4939,
	4959,4976,4985,4992,4998,5005,5012,5021,5023,5030,5053,5057,5059,5077,5083,
	5092,5105,5113,5128,5157,5162,5164,5184,5191,5214,5231,5236,5247,5252];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!HiveParser.__ATN) {
			HiveParser.__ATN = new ATNDeserializer().deserialize(HiveParser._serializedATN);
		}

		return HiveParser.__ATN;
	}


	static DecisionsToDFA = HiveParser._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );

}

export class StatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EOF(): TerminalNode {
		return this.getToken(HiveParser.EOF, 0);
	}
	public explainStatement(): ExplainStatementContext {
		return this.getTypedRuleContext(ExplainStatementContext, 0) as ExplainStatementContext;
	}
	public execStatement(): ExecStatementContext {
		return this.getTypedRuleContext(ExecStatementContext, 0) as ExecStatementContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_statement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterStatement) {
	 		listener.enterStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitStatement) {
	 		listener.exitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitStatement) {
			return visitor.visitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExplainStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_EXPLAIN(): TerminalNode {
		return this.getToken(HiveParser.KW_EXPLAIN, 0);
	}
	public execStatement(): ExecStatementContext {
		return this.getTypedRuleContext(ExecStatementContext, 0) as ExecStatementContext;
	}
	public KW_REWRITE(): TerminalNode {
		return this.getToken(HiveParser.KW_REWRITE, 0);
	}
	public queryStatementExpression(): QueryStatementExpressionContext {
		return this.getTypedRuleContext(QueryStatementExpressionContext, 0) as QueryStatementExpressionContext;
	}
	public explainOption_list(): ExplainOptionContext[] {
		return this.getTypedRuleContexts(ExplainOptionContext) as ExplainOptionContext[];
	}
	public explainOption(i: number): ExplainOptionContext {
		return this.getTypedRuleContext(ExplainOptionContext, i) as ExplainOptionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_explainStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExplainStatement) {
	 		listener.enterExplainStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExplainStatement) {
	 		listener.exitExplainStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExplainStatement) {
			return visitor.visitExplainStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExplainOptionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_EXTENDED(): TerminalNode {
		return this.getToken(HiveParser.KW_EXTENDED, 0);
	}
	public KW_FORMATTED(): TerminalNode {
		return this.getToken(HiveParser.KW_FORMATTED, 0);
	}
	public KW_DEPENDENCY(): TerminalNode {
		return this.getToken(HiveParser.KW_DEPENDENCY, 0);
	}
	public KW_CBO(): TerminalNode {
		return this.getToken(HiveParser.KW_CBO, 0);
	}
	public KW_COST(): TerminalNode {
		return this.getToken(HiveParser.KW_COST, 0);
	}
	public KW_JOINCOST(): TerminalNode {
		return this.getToken(HiveParser.KW_JOINCOST, 0);
	}
	public KW_LOGICAL(): TerminalNode {
		return this.getToken(HiveParser.KW_LOGICAL, 0);
	}
	public KW_AUTHORIZATION(): TerminalNode {
		return this.getToken(HiveParser.KW_AUTHORIZATION, 0);
	}
	public KW_ANALYZE(): TerminalNode {
		return this.getToken(HiveParser.KW_ANALYZE, 0);
	}
	public KW_REOPTIMIZATION(): TerminalNode {
		return this.getToken(HiveParser.KW_REOPTIMIZATION, 0);
	}
	public KW_LOCKS(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCKS, 0);
	}
	public KW_AST(): TerminalNode {
		return this.getToken(HiveParser.KW_AST, 0);
	}
	public KW_VECTORIZATION(): TerminalNode {
		return this.getToken(HiveParser.KW_VECTORIZATION, 0);
	}
	public vectorizationOnly(): VectorizationOnlyContext {
		return this.getTypedRuleContext(VectorizationOnlyContext, 0) as VectorizationOnlyContext;
	}
	public vectorizatonDetail(): VectorizatonDetailContext {
		return this.getTypedRuleContext(VectorizatonDetailContext, 0) as VectorizatonDetailContext;
	}
	public KW_DEBUG(): TerminalNode {
		return this.getToken(HiveParser.KW_DEBUG, 0);
	}
	public KW_DDL(): TerminalNode {
		return this.getToken(HiveParser.KW_DDL, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_explainOption;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExplainOption) {
	 		listener.enterExplainOption(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExplainOption) {
	 		listener.exitExplainOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExplainOption) {
			return visitor.visitExplainOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VectorizationOnlyContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ONLY(): TerminalNode {
		return this.getToken(HiveParser.KW_ONLY, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_vectorizationOnly;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterVectorizationOnly) {
	 		listener.enterVectorizationOnly(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitVectorizationOnly) {
	 		listener.exitVectorizationOnly(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitVectorizationOnly) {
			return visitor.visitVectorizationOnly(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VectorizatonDetailContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SUMMARY(): TerminalNode {
		return this.getToken(HiveParser.KW_SUMMARY, 0);
	}
	public KW_OPERATOR(): TerminalNode {
		return this.getToken(HiveParser.KW_OPERATOR, 0);
	}
	public KW_EXPRESSION(): TerminalNode {
		return this.getToken(HiveParser.KW_EXPRESSION, 0);
	}
	public KW_DETAIL(): TerminalNode {
		return this.getToken(HiveParser.KW_DETAIL, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_vectorizatonDetail;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterVectorizatonDetail) {
	 		listener.enterVectorizatonDetail(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitVectorizatonDetail) {
	 		listener.exitVectorizatonDetail(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitVectorizatonDetail) {
			return visitor.visitVectorizatonDetail(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public queryStatementExpression(): QueryStatementExpressionContext {
		return this.getTypedRuleContext(QueryStatementExpressionContext, 0) as QueryStatementExpressionContext;
	}
	public loadStatement(): LoadStatementContext {
		return this.getTypedRuleContext(LoadStatementContext, 0) as LoadStatementContext;
	}
	public exportStatement(): ExportStatementContext {
		return this.getTypedRuleContext(ExportStatementContext, 0) as ExportStatementContext;
	}
	public importStatement(): ImportStatementContext {
		return this.getTypedRuleContext(ImportStatementContext, 0) as ImportStatementContext;
	}
	public replDumpStatement(): ReplDumpStatementContext {
		return this.getTypedRuleContext(ReplDumpStatementContext, 0) as ReplDumpStatementContext;
	}
	public replLoadStatement(): ReplLoadStatementContext {
		return this.getTypedRuleContext(ReplLoadStatementContext, 0) as ReplLoadStatementContext;
	}
	public replStatusStatement(): ReplStatusStatementContext {
		return this.getTypedRuleContext(ReplStatusStatementContext, 0) as ReplStatusStatementContext;
	}
	public ddlStatement(): DdlStatementContext {
		return this.getTypedRuleContext(DdlStatementContext, 0) as DdlStatementContext;
	}
	public deleteStatement(): DeleteStatementContext {
		return this.getTypedRuleContext(DeleteStatementContext, 0) as DeleteStatementContext;
	}
	public updateStatement(): UpdateStatementContext {
		return this.getTypedRuleContext(UpdateStatementContext, 0) as UpdateStatementContext;
	}
	public sqlTransactionStatement(): SqlTransactionStatementContext {
		return this.getTypedRuleContext(SqlTransactionStatementContext, 0) as SqlTransactionStatementContext;
	}
	public mergeStatement(): MergeStatementContext {
		return this.getTypedRuleContext(MergeStatementContext, 0) as MergeStatementContext;
	}
	public prepareStatement(): PrepareStatementContext {
		return this.getTypedRuleContext(PrepareStatementContext, 0) as PrepareStatementContext;
	}
	public executeStatement(): ExecuteStatementContext {
		return this.getTypedRuleContext(ExecuteStatementContext, 0) as ExecuteStatementContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_execStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExecStatement) {
	 		listener.enterExecStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExecStatement) {
	 		listener.exitExecStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExecStatement) {
			return visitor.visitExecStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_LOAD(): TerminalNode {
		return this.getToken(HiveParser.KW_LOAD, 0);
	}
	public KW_DATA(): TerminalNode {
		return this.getToken(HiveParser.KW_DATA, 0);
	}
	public KW_INPATH(): TerminalNode {
		return this.getToken(HiveParser.KW_INPATH, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_INTO(): TerminalNode {
		return this.getToken(HiveParser.KW_INTO, 0);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public tableOrPartition(): TableOrPartitionContext {
		return this.getTypedRuleContext(TableOrPartitionContext, 0) as TableOrPartitionContext;
	}
	public KW_LOCAL(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCAL, 0);
	}
	public KW_OVERWRITE(): TerminalNode {
		return this.getToken(HiveParser.KW_OVERWRITE, 0);
	}
	public inputFileFormat(): InputFileFormatContext {
		return this.getTypedRuleContext(InputFileFormatContext, 0) as InputFileFormatContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_loadStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterLoadStatement) {
	 		listener.enterLoadStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitLoadStatement) {
	 		listener.exitLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLoadStatement) {
			return visitor.visitLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplicationClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_FOR(): TerminalNode {
		return this.getToken(HiveParser.KW_FOR, 0);
	}
	public KW_REPLICATION(): TerminalNode {
		return this.getToken(HiveParser.KW_REPLICATION, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public KW_METADATA(): TerminalNode {
		return this.getToken(HiveParser.KW_METADATA, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_replicationClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterReplicationClause) {
	 		listener.enterReplicationClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitReplicationClause) {
	 		listener.exitReplicationClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplicationClause) {
			return visitor.visitReplicationClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExportStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_EXPORT(): TerminalNode {
		return this.getToken(HiveParser.KW_EXPORT, 0);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public tableOrPartition(): TableOrPartitionContext {
		return this.getTypedRuleContext(TableOrPartitionContext, 0) as TableOrPartitionContext;
	}
	public KW_TO(): TerminalNode {
		return this.getToken(HiveParser.KW_TO, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public replicationClause(): ReplicationClauseContext {
		return this.getTypedRuleContext(ReplicationClauseContext, 0) as ReplicationClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_exportStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExportStatement) {
	 		listener.enterExportStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExportStatement) {
	 		listener.exitExportStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExportStatement) {
			return visitor.visitExportStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ImportStatementContext extends ParserRuleContext {
	public _path!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_IMPORT(): TerminalNode {
		return this.getToken(HiveParser.KW_IMPORT, 0);
	}
	public KW_FROM(): TerminalNode {
		return this.getToken(HiveParser.KW_FROM, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public tableOrPartition(): TableOrPartitionContext {
		return this.getTypedRuleContext(TableOrPartitionContext, 0) as TableOrPartitionContext;
	}
	public tableLocation(): TableLocationContext {
		return this.getTypedRuleContext(TableLocationContext, 0) as TableLocationContext;
	}
	public KW_EXTERNAL(): TerminalNode {
		return this.getToken(HiveParser.KW_EXTERNAL, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_importStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterImportStatement) {
	 		listener.enterImportStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitImportStatement) {
	 		listener.exitImportStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitImportStatement) {
			return visitor.visitImportStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplDumpStatementContext extends ParserRuleContext {
	public _dbPolicy!: ReplDbPolicyContext;
	public _oldDbPolicy!: ReplDbPolicyContext;
	public _replConf!: ReplConfigsContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_REPL(): TerminalNode {
		return this.getToken(HiveParser.KW_REPL, 0);
	}
	public KW_DUMP(): TerminalNode {
		return this.getToken(HiveParser.KW_DUMP, 0);
	}
	public replDbPolicy_list(): ReplDbPolicyContext[] {
		return this.getTypedRuleContexts(ReplDbPolicyContext) as ReplDbPolicyContext[];
	}
	public replDbPolicy(i: number): ReplDbPolicyContext {
		return this.getTypedRuleContext(ReplDbPolicyContext, i) as ReplDbPolicyContext;
	}
	public KW_REPLACE(): TerminalNode {
		return this.getToken(HiveParser.KW_REPLACE, 0);
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public replConfigs(): ReplConfigsContext {
		return this.getTypedRuleContext(ReplConfigsContext, 0) as ReplConfigsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_replDumpStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterReplDumpStatement) {
	 		listener.enterReplDumpStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitReplDumpStatement) {
	 		listener.exitReplDumpStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplDumpStatement) {
			return visitor.visitReplDumpStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplDbPolicyContext extends ParserRuleContext {
	public _dbName!: Id_Context;
	public _tablePolicy!: ReplTableLevelPolicyContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public DOT(): TerminalNode {
		return this.getToken(HiveParser.DOT, 0);
	}
	public replTableLevelPolicy(): ReplTableLevelPolicyContext {
		return this.getTypedRuleContext(ReplTableLevelPolicyContext, 0) as ReplTableLevelPolicyContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_replDbPolicy;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterReplDbPolicy) {
	 		listener.enterReplDbPolicy(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitReplDbPolicy) {
	 		listener.exitReplDbPolicy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplDbPolicy) {
			return visitor.visitReplDbPolicy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplLoadStatementContext extends ParserRuleContext {
	public _sourceDbPolicy!: ReplDbPolicyContext;
	public _dbName!: Id_Context;
	public _replConf!: ReplConfigsContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_REPL(): TerminalNode {
		return this.getToken(HiveParser.KW_REPL, 0);
	}
	public KW_LOAD(): TerminalNode {
		return this.getToken(HiveParser.KW_LOAD, 0);
	}
	public replDbPolicy(): ReplDbPolicyContext {
		return this.getTypedRuleContext(ReplDbPolicyContext, 0) as ReplDbPolicyContext;
	}
	public KW_INTO(): TerminalNode {
		return this.getToken(HiveParser.KW_INTO, 0);
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public replConfigs(): ReplConfigsContext {
		return this.getTypedRuleContext(ReplConfigsContext, 0) as ReplConfigsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_replLoadStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterReplLoadStatement) {
	 		listener.enterReplLoadStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitReplLoadStatement) {
	 		listener.exitReplLoadStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplLoadStatement) {
			return visitor.visitReplLoadStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplConfigsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public replConfigsList(): ReplConfigsListContext {
		return this.getTypedRuleContext(ReplConfigsListContext, 0) as ReplConfigsListContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_replConfigs;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterReplConfigs) {
	 		listener.enterReplConfigs(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitReplConfigs) {
	 		listener.exitReplConfigs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplConfigs) {
			return visitor.visitReplConfigs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplConfigsListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public keyValueProperty_list(): KeyValuePropertyContext[] {
		return this.getTypedRuleContexts(KeyValuePropertyContext) as KeyValuePropertyContext[];
	}
	public keyValueProperty(i: number): KeyValuePropertyContext {
		return this.getTypedRuleContext(KeyValuePropertyContext, i) as KeyValuePropertyContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_replConfigsList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterReplConfigsList) {
	 		listener.enterReplConfigsList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitReplConfigsList) {
	 		listener.exitReplConfigsList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplConfigsList) {
			return visitor.visitReplConfigsList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplTableLevelPolicyContext extends ParserRuleContext {
	public _replTablesIncludeList!: Token;
	public _replTablesExcludeList!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public StringLiteral_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.StringLiteral);
	}
	public StringLiteral(i: number): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, i);
	}
	public DOT(): TerminalNode {
		return this.getToken(HiveParser.DOT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_replTableLevelPolicy;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterReplTableLevelPolicy) {
	 		listener.enterReplTableLevelPolicy(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitReplTableLevelPolicy) {
	 		listener.exitReplTableLevelPolicy(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplTableLevelPolicy) {
			return visitor.visitReplTableLevelPolicy(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplStatusStatementContext extends ParserRuleContext {
	public _dbName!: Id_Context;
	public _replConf!: ReplConfigsContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_REPL(): TerminalNode {
		return this.getToken(HiveParser.KW_REPL, 0);
	}
	public KW_STATUS(): TerminalNode {
		return this.getToken(HiveParser.KW_STATUS, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public replConfigs(): ReplConfigsContext {
		return this.getTypedRuleContext(ReplConfigsContext, 0) as ReplConfigsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_replStatusStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterReplStatusStatement) {
	 		listener.enterReplStatusStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitReplStatusStatement) {
	 		listener.exitReplStatusStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplStatusStatement) {
			return visitor.visitReplStatusStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DdlStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createDatabaseStatement(): CreateDatabaseStatementContext {
		return this.getTypedRuleContext(CreateDatabaseStatementContext, 0) as CreateDatabaseStatementContext;
	}
	public switchDatabaseStatement(): SwitchDatabaseStatementContext {
		return this.getTypedRuleContext(SwitchDatabaseStatementContext, 0) as SwitchDatabaseStatementContext;
	}
	public dropDatabaseStatement(): DropDatabaseStatementContext {
		return this.getTypedRuleContext(DropDatabaseStatementContext, 0) as DropDatabaseStatementContext;
	}
	public createTableStatement(): CreateTableStatementContext {
		return this.getTypedRuleContext(CreateTableStatementContext, 0) as CreateTableStatementContext;
	}
	public dropTableStatement(): DropTableStatementContext {
		return this.getTypedRuleContext(DropTableStatementContext, 0) as DropTableStatementContext;
	}
	public truncateTableStatement(): TruncateTableStatementContext {
		return this.getTypedRuleContext(TruncateTableStatementContext, 0) as TruncateTableStatementContext;
	}
	public alterStatement(): AlterStatementContext {
		return this.getTypedRuleContext(AlterStatementContext, 0) as AlterStatementContext;
	}
	public descStatement(): DescStatementContext {
		return this.getTypedRuleContext(DescStatementContext, 0) as DescStatementContext;
	}
	public showStatement(): ShowStatementContext {
		return this.getTypedRuleContext(ShowStatementContext, 0) as ShowStatementContext;
	}
	public metastoreCheck(): MetastoreCheckContext {
		return this.getTypedRuleContext(MetastoreCheckContext, 0) as MetastoreCheckContext;
	}
	public createViewStatement(): CreateViewStatementContext {
		return this.getTypedRuleContext(CreateViewStatementContext, 0) as CreateViewStatementContext;
	}
	public createMaterializedViewStatement(): CreateMaterializedViewStatementContext {
		return this.getTypedRuleContext(CreateMaterializedViewStatementContext, 0) as CreateMaterializedViewStatementContext;
	}
	public createScheduledQueryStatement(): CreateScheduledQueryStatementContext {
		return this.getTypedRuleContext(CreateScheduledQueryStatementContext, 0) as CreateScheduledQueryStatementContext;
	}
	public alterScheduledQueryStatement(): AlterScheduledQueryStatementContext {
		return this.getTypedRuleContext(AlterScheduledQueryStatementContext, 0) as AlterScheduledQueryStatementContext;
	}
	public dropScheduledQueryStatement(): DropScheduledQueryStatementContext {
		return this.getTypedRuleContext(DropScheduledQueryStatementContext, 0) as DropScheduledQueryStatementContext;
	}
	public dropViewStatement(): DropViewStatementContext {
		return this.getTypedRuleContext(DropViewStatementContext, 0) as DropViewStatementContext;
	}
	public dropMaterializedViewStatement(): DropMaterializedViewStatementContext {
		return this.getTypedRuleContext(DropMaterializedViewStatementContext, 0) as DropMaterializedViewStatementContext;
	}
	public createFunctionStatement(): CreateFunctionStatementContext {
		return this.getTypedRuleContext(CreateFunctionStatementContext, 0) as CreateFunctionStatementContext;
	}
	public createMacroStatement(): CreateMacroStatementContext {
		return this.getTypedRuleContext(CreateMacroStatementContext, 0) as CreateMacroStatementContext;
	}
	public dropFunctionStatement(): DropFunctionStatementContext {
		return this.getTypedRuleContext(DropFunctionStatementContext, 0) as DropFunctionStatementContext;
	}
	public reloadFunctionsStatement(): ReloadFunctionsStatementContext {
		return this.getTypedRuleContext(ReloadFunctionsStatementContext, 0) as ReloadFunctionsStatementContext;
	}
	public dropMacroStatement(): DropMacroStatementContext {
		return this.getTypedRuleContext(DropMacroStatementContext, 0) as DropMacroStatementContext;
	}
	public analyzeStatement(): AnalyzeStatementContext {
		return this.getTypedRuleContext(AnalyzeStatementContext, 0) as AnalyzeStatementContext;
	}
	public lockStatement(): LockStatementContext {
		return this.getTypedRuleContext(LockStatementContext, 0) as LockStatementContext;
	}
	public unlockStatement(): UnlockStatementContext {
		return this.getTypedRuleContext(UnlockStatementContext, 0) as UnlockStatementContext;
	}
	public lockDatabase(): LockDatabaseContext {
		return this.getTypedRuleContext(LockDatabaseContext, 0) as LockDatabaseContext;
	}
	public unlockDatabase(): UnlockDatabaseContext {
		return this.getTypedRuleContext(UnlockDatabaseContext, 0) as UnlockDatabaseContext;
	}
	public createRoleStatement(): CreateRoleStatementContext {
		return this.getTypedRuleContext(CreateRoleStatementContext, 0) as CreateRoleStatementContext;
	}
	public dropRoleStatement(): DropRoleStatementContext {
		return this.getTypedRuleContext(DropRoleStatementContext, 0) as DropRoleStatementContext;
	}
	public grantPrivileges(): GrantPrivilegesContext {
		return this.getTypedRuleContext(GrantPrivilegesContext, 0) as GrantPrivilegesContext;
	}
	public revokePrivileges(): RevokePrivilegesContext {
		return this.getTypedRuleContext(RevokePrivilegesContext, 0) as RevokePrivilegesContext;
	}
	public showGrants(): ShowGrantsContext {
		return this.getTypedRuleContext(ShowGrantsContext, 0) as ShowGrantsContext;
	}
	public showRoleGrants(): ShowRoleGrantsContext {
		return this.getTypedRuleContext(ShowRoleGrantsContext, 0) as ShowRoleGrantsContext;
	}
	public showRolePrincipals(): ShowRolePrincipalsContext {
		return this.getTypedRuleContext(ShowRolePrincipalsContext, 0) as ShowRolePrincipalsContext;
	}
	public showRoles(): ShowRolesContext {
		return this.getTypedRuleContext(ShowRolesContext, 0) as ShowRolesContext;
	}
	public grantRole(): GrantRoleContext {
		return this.getTypedRuleContext(GrantRoleContext, 0) as GrantRoleContext;
	}
	public revokeRole(): RevokeRoleContext {
		return this.getTypedRuleContext(RevokeRoleContext, 0) as RevokeRoleContext;
	}
	public setRole(): SetRoleContext {
		return this.getTypedRuleContext(SetRoleContext, 0) as SetRoleContext;
	}
	public showCurrentRole(): ShowCurrentRoleContext {
		return this.getTypedRuleContext(ShowCurrentRoleContext, 0) as ShowCurrentRoleContext;
	}
	public abortTransactionStatement(): AbortTransactionStatementContext {
		return this.getTypedRuleContext(AbortTransactionStatementContext, 0) as AbortTransactionStatementContext;
	}
	public abortCompactionStatement(): AbortCompactionStatementContext {
		return this.getTypedRuleContext(AbortCompactionStatementContext, 0) as AbortCompactionStatementContext;
	}
	public killQueryStatement(): KillQueryStatementContext {
		return this.getTypedRuleContext(KillQueryStatementContext, 0) as KillQueryStatementContext;
	}
	public resourcePlanDdlStatements(): ResourcePlanDdlStatementsContext {
		return this.getTypedRuleContext(ResourcePlanDdlStatementsContext, 0) as ResourcePlanDdlStatementsContext;
	}
	public createDataConnectorStatement(): CreateDataConnectorStatementContext {
		return this.getTypedRuleContext(CreateDataConnectorStatementContext, 0) as CreateDataConnectorStatementContext;
	}
	public dropDataConnectorStatement(): DropDataConnectorStatementContext {
		return this.getTypedRuleContext(DropDataConnectorStatementContext, 0) as DropDataConnectorStatementContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_ddlStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDdlStatement) {
	 		listener.enterDdlStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDdlStatement) {
	 		listener.exitDdlStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDdlStatement) {
			return visitor.visitDdlStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfExistsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_IF(): TerminalNode {
		return this.getToken(HiveParser.KW_IF, 0);
	}
	public KW_EXISTS(): TerminalNode {
		return this.getToken(HiveParser.KW_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_ifExists;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterIfExists) {
	 		listener.enterIfExists(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitIfExists) {
	 		listener.exitIfExists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIfExists) {
			return visitor.visitIfExists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RestrictOrCascadeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_RESTRICT(): TerminalNode {
		return this.getToken(HiveParser.KW_RESTRICT, 0);
	}
	public KW_CASCADE(): TerminalNode {
		return this.getToken(HiveParser.KW_CASCADE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_restrictOrCascade;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRestrictOrCascade) {
	 		listener.enterRestrictOrCascade(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRestrictOrCascade) {
	 		listener.exitRestrictOrCascade(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRestrictOrCascade) {
			return visitor.visitRestrictOrCascade(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfNotExistsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_IF(): TerminalNode {
		return this.getToken(HiveParser.KW_IF, 0);
	}
	public KW_NOT(): TerminalNode {
		return this.getToken(HiveParser.KW_NOT, 0);
	}
	public KW_EXISTS(): TerminalNode {
		return this.getToken(HiveParser.KW_EXISTS, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_ifNotExists;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterIfNotExists) {
	 		listener.enterIfNotExists(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitIfNotExists) {
	 		listener.exitIfNotExists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIfNotExists) {
			return visitor.visitIfNotExists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ForceContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_FORCE(): TerminalNode {
		return this.getToken(HiveParser.KW_FORCE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_force;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterForce) {
	 		listener.enterForce(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitForce) {
	 		listener.exitForce(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitForce) {
			return visitor.visitForce(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RewriteEnabledContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ENABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ENABLE, 0);
	}
	public KW_REWRITE(): TerminalNode {
		return this.getToken(HiveParser.KW_REWRITE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_rewriteEnabled;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRewriteEnabled) {
	 		listener.enterRewriteEnabled(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRewriteEnabled) {
	 		listener.exitRewriteEnabled(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRewriteEnabled) {
			return visitor.visitRewriteEnabled(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RewriteDisabledContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DISABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_DISABLE, 0);
	}
	public KW_REWRITE(): TerminalNode {
		return this.getToken(HiveParser.KW_REWRITE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_rewriteDisabled;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRewriteDisabled) {
	 		listener.enterRewriteDisabled(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRewriteDisabled) {
	 		listener.exitRewriteDisabled(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRewriteDisabled) {
			return visitor.visitRewriteDisabled(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StoredAsDirsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_STORED(): TerminalNode {
		return this.getToken(HiveParser.KW_STORED, 0);
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public KW_DIRECTORIES(): TerminalNode {
		return this.getToken(HiveParser.KW_DIRECTORIES, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_storedAsDirs;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterStoredAsDirs) {
	 		listener.enterStoredAsDirs(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitStoredAsDirs) {
	 		listener.exitStoredAsDirs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitStoredAsDirs) {
			return visitor.visitStoredAsDirs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrReplaceContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_OR(): TerminalNode {
		return this.getToken(HiveParser.KW_OR, 0);
	}
	public KW_REPLACE(): TerminalNode {
		return this.getToken(HiveParser.KW_REPLACE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_orReplace;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterOrReplace) {
	 		listener.enterOrReplace(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitOrReplace) {
	 		listener.exitOrReplace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitOrReplace) {
			return visitor.visitOrReplace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDatabaseStatementContext extends ParserRuleContext {
	public _name!: Id_Context;
	public _dbprops!: DbPropertiesContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public db_schema(): Db_schemaContext {
		return this.getTypedRuleContext(Db_schemaContext, 0) as Db_schemaContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public databaseComment(): DatabaseCommentContext {
		return this.getTypedRuleContext(DatabaseCommentContext, 0) as DatabaseCommentContext;
	}
	public dbLocation(): DbLocationContext {
		return this.getTypedRuleContext(DbLocationContext, 0) as DbLocationContext;
	}
	public dbManagedLocation(): DbManagedLocationContext {
		return this.getTypedRuleContext(DbManagedLocationContext, 0) as DbManagedLocationContext;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_DBPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_DBPROPERTIES, 0);
	}
	public dbProperties(): DbPropertiesContext {
		return this.getTypedRuleContext(DbPropertiesContext, 0) as DbPropertiesContext;
	}
	public KW_REMOTE(): TerminalNode {
		return this.getToken(HiveParser.KW_REMOTE, 0);
	}
	public dbConnectorName(): DbConnectorNameContext {
		return this.getTypedRuleContext(DbConnectorNameContext, 0) as DbConnectorNameContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createDatabaseStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateDatabaseStatement) {
	 		listener.enterCreateDatabaseStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateDatabaseStatement) {
	 		listener.exitCreateDatabaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateDatabaseStatement) {
			return visitor.visitCreateDatabaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DbLocationContext extends ParserRuleContext {
	public _locn!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_LOCATION(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCATION, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dbLocation;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDbLocation) {
	 		listener.enterDbLocation(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDbLocation) {
	 		listener.exitDbLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDbLocation) {
			return visitor.visitDbLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DbManagedLocationContext extends ParserRuleContext {
	public _locn!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_MANAGEDLOCATION(): TerminalNode {
		return this.getToken(HiveParser.KW_MANAGEDLOCATION, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dbManagedLocation;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDbManagedLocation) {
	 		listener.enterDbManagedLocation(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDbManagedLocation) {
	 		listener.exitDbManagedLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDbManagedLocation) {
			return visitor.visitDbManagedLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DbPropertiesContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public dbPropertiesList(): DbPropertiesListContext {
		return this.getTypedRuleContext(DbPropertiesListContext, 0) as DbPropertiesListContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dbProperties;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDbProperties) {
	 		listener.enterDbProperties(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDbProperties) {
	 		listener.exitDbProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDbProperties) {
			return visitor.visitDbProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DbPropertiesListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public keyValueProperty_list(): KeyValuePropertyContext[] {
		return this.getTypedRuleContexts(KeyValuePropertyContext) as KeyValuePropertyContext[];
	}
	public keyValueProperty(i: number): KeyValuePropertyContext {
		return this.getTypedRuleContext(KeyValuePropertyContext, i) as KeyValuePropertyContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dbPropertiesList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDbPropertiesList) {
	 		listener.enterDbPropertiesList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDbPropertiesList) {
	 		listener.exitDbPropertiesList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDbPropertiesList) {
			return visitor.visitDbPropertiesList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DbConnectorNameContext extends ParserRuleContext {
	public _dcName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_USING(): TerminalNode {
		return this.getToken(HiveParser.KW_USING, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dbConnectorName;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDbConnectorName) {
	 		listener.enterDbConnectorName(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDbConnectorName) {
	 		listener.exitDbConnectorName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDbConnectorName) {
			return visitor.visitDbConnectorName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SwitchDatabaseStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_USE(): TerminalNode {
		return this.getToken(HiveParser.KW_USE, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_switchDatabaseStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSwitchDatabaseStatement) {
	 		listener.enterSwitchDatabaseStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSwitchDatabaseStatement) {
	 		listener.exitSwitchDatabaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSwitchDatabaseStatement) {
			return visitor.visitSwitchDatabaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropDatabaseStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public db_schema(): Db_schemaContext {
		return this.getTypedRuleContext(Db_schemaContext, 0) as Db_schemaContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
	public restrictOrCascade(): RestrictOrCascadeContext {
		return this.getTypedRuleContext(RestrictOrCascadeContext, 0) as RestrictOrCascadeContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropDatabaseStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropDatabaseStatement) {
	 		listener.enterDropDatabaseStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropDatabaseStatement) {
	 		listener.exitDropDatabaseStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropDatabaseStatement) {
			return visitor.visitDropDatabaseStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DatabaseCommentContext extends ParserRuleContext {
	public _comment!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_COMMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMMENT, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_databaseComment;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDatabaseComment) {
	 		listener.enterDatabaseComment(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDatabaseComment) {
	 		listener.exitDatabaseComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDatabaseComment) {
			return visitor.visitDatabaseComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TruncateTableStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TRUNCATE(): TerminalNode {
		return this.getToken(HiveParser.KW_TRUNCATE, 0);
	}
	public tablePartitionPrefix(): TablePartitionPrefixContext {
		return this.getTypedRuleContext(TablePartitionPrefixContext, 0) as TablePartitionPrefixContext;
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public KW_COLUMNS(): TerminalNode {
		return this.getToken(HiveParser.KW_COLUMNS, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public force(): ForceContext {
		return this.getTypedRuleContext(ForceContext, 0) as ForceContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_truncateTableStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTruncateTableStatement) {
	 		listener.enterTruncateTableStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTruncateTableStatement) {
	 		listener.exitTruncateTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTruncateTableStatement) {
			return visitor.visitTruncateTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropTableStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
	public KW_PURGE(): TerminalNode {
		return this.getToken(HiveParser.KW_PURGE, 0);
	}
	public replicationClause(): ReplicationClauseContext {
		return this.getTypedRuleContext(ReplicationClauseContext, 0) as ReplicationClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropTableStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropTableStatement) {
	 		listener.enterDropTableStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropTableStatement) {
	 		listener.exitDropTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropTableStatement) {
			return visitor.visitDropTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InputFileFormatContext extends ParserRuleContext {
	public _inFmt!: Token;
	public _serdeCls!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_INPUTFORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
	}
	public KW_SERDE(): TerminalNode {
		return this.getToken(HiveParser.KW_SERDE, 0);
	}
	public StringLiteral_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.StringLiteral);
	}
	public StringLiteral(i: number): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_inputFileFormat;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterInputFileFormat) {
	 		listener.enterInputFileFormat(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitInputFileFormat) {
	 		listener.exitInputFileFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitInputFileFormat) {
			return visitor.visitInputFileFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TabTypeExprContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public DOT_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.DOT);
	}
	public DOT(i: number): TerminalNode {
		return this.getToken(HiveParser.DOT, i);
	}
	public KW_ELEM_TYPE_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_ELEM_TYPE);
	}
	public KW_ELEM_TYPE(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_ELEM_TYPE, i);
	}
	public KW_KEY_TYPE_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_KEY_TYPE);
	}
	public KW_KEY_TYPE(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_KEY_TYPE, i);
	}
	public KW_VALUE_TYPE_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_VALUE_TYPE);
	}
	public KW_VALUE_TYPE(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_VALUE_TYPE, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tabTypeExpr;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTabTypeExpr) {
	 		listener.enterTabTypeExpr(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTabTypeExpr) {
	 		listener.exitTabTypeExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTabTypeExpr) {
			return visitor.visitTabTypeExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartTypeExprContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tabTypeExpr(): TabTypeExprContext {
		return this.getTypedRuleContext(TabTypeExprContext, 0) as TabTypeExprContext;
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partTypeExpr;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartTypeExpr) {
	 		listener.enterPartTypeExpr(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartTypeExpr) {
	 		listener.exitPartTypeExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartTypeExpr) {
			return visitor.visitPartTypeExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TabPartColTypeExprContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
	public extColumnName(): ExtColumnNameContext {
		return this.getTypedRuleContext(ExtColumnNameContext, 0) as ExtColumnNameContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tabPartColTypeExpr;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTabPartColTypeExpr) {
	 		listener.enterTabPartColTypeExpr(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTabPartColTypeExpr) {
	 		listener.exitTabPartColTypeExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTabPartColTypeExpr) {
			return visitor.visitTabPartColTypeExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DescStatementContext extends ParserRuleContext {
	public _dbName!: Id_Context;
	public _dcName!: Id_Context;
	public _name!: DescFuncNamesContext;
	public _descOptions!: Token;
	public _parttype!: TabPartColTypeExprContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DESCRIBE(): TerminalNode {
		return this.getToken(HiveParser.KW_DESCRIBE, 0);
	}
	public KW_DESC(): TerminalNode {
		return this.getToken(HiveParser.KW_DESC, 0);
	}
	public db_schema(): Db_schemaContext {
		return this.getTypedRuleContext(Db_schemaContext, 0) as Db_schemaContext;
	}
	public KW_DATACONNECTOR(): TerminalNode {
		return this.getToken(HiveParser.KW_DATACONNECTOR, 0);
	}
	public KW_FUNCTION(): TerminalNode {
		return this.getToken(HiveParser.KW_FUNCTION, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public descFuncNames(): DescFuncNamesContext {
		return this.getTypedRuleContext(DescFuncNamesContext, 0) as DescFuncNamesContext;
	}
	public tabPartColTypeExpr(): TabPartColTypeExprContext {
		return this.getTypedRuleContext(TabPartColTypeExprContext, 0) as TabPartColTypeExprContext;
	}
	public KW_EXTENDED(): TerminalNode {
		return this.getToken(HiveParser.KW_EXTENDED, 0);
	}
	public KW_FORMATTED(): TerminalNode {
		return this.getToken(HiveParser.KW_FORMATTED, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_descStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDescStatement) {
	 		listener.enterDescStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDescStatement) {
	 		listener.exitDescStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDescStatement) {
			return visitor.visitDescStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AnalyzeStatementContext extends ParserRuleContext {
	public _parttype!: TableOrPartitionContext;
	public _noscan!: Token;
	public _statsColumnName!: ColumnNameListContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ANALYZE(): TerminalNode {
		return this.getToken(HiveParser.KW_ANALYZE, 0);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public tableOrPartition(): TableOrPartitionContext {
		return this.getTypedRuleContext(TableOrPartitionContext, 0) as TableOrPartitionContext;
	}
	public KW_COMPUTE(): TerminalNode {
		return this.getToken(HiveParser.KW_COMPUTE, 0);
	}
	public KW_STATISTICS(): TerminalNode {
		return this.getToken(HiveParser.KW_STATISTICS, 0);
	}
	public KW_CACHE(): TerminalNode {
		return this.getToken(HiveParser.KW_CACHE, 0);
	}
	public KW_METADATA(): TerminalNode {
		return this.getToken(HiveParser.KW_METADATA, 0);
	}
	public KW_FOR(): TerminalNode {
		return this.getToken(HiveParser.KW_FOR, 0);
	}
	public KW_COLUMNS(): TerminalNode {
		return this.getToken(HiveParser.KW_COLUMNS, 0);
	}
	public KW_NOSCAN(): TerminalNode {
		return this.getToken(HiveParser.KW_NOSCAN, 0);
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_analyzeStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAnalyzeStatement) {
	 		listener.enterAnalyzeStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAnalyzeStatement) {
	 		listener.exitAnalyzeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAnalyzeStatement) {
			return visitor.visitAnalyzeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_inContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_FROM(): TerminalNode {
		return this.getToken(HiveParser.KW_FROM, 0);
	}
	public KW_IN(): TerminalNode {
		return this.getToken(HiveParser.KW_IN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_from_in;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterFrom_in) {
	 		listener.enterFrom_in(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitFrom_in) {
	 		listener.exitFrom_in(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFrom_in) {
			return visitor.visitFrom_in(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Db_schemaContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DATABASE(): TerminalNode {
		return this.getToken(HiveParser.KW_DATABASE, 0);
	}
	public KW_SCHEMA(): TerminalNode {
		return this.getToken(HiveParser.KW_SCHEMA, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_db_schema;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDb_schema) {
	 		listener.enterDb_schema(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDb_schema) {
	 		listener.exitDb_schema(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDb_schema) {
			return visitor.visitDb_schema(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowStatementContext extends ParserRuleContext {
	public _isExtended!: Token;
	public _db_name!: Id_Context;
	public _filter!: ShowTablesFilterExprContext;
	public _tabName!: TableNameContext;
	public _prptyName!: Token;
	public _dbName!: Id_Context;
	public _parttype!: PartTypeExprContext;
	public _rp_name!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SHOW(): TerminalNode {
		return this.getToken(HiveParser.KW_SHOW, 0);
	}
	public KW_DATABASES(): TerminalNode {
		return this.getToken(HiveParser.KW_DATABASES, 0);
	}
	public KW_SCHEMAS(): TerminalNode {
		return this.getToken(HiveParser.KW_SCHEMAS, 0);
	}
	public KW_LIKE(): TerminalNode {
		return this.getToken(HiveParser.KW_LIKE, 0);
	}
	public showStmtIdentifier(): ShowStmtIdentifierContext {
		return this.getTypedRuleContext(ShowStmtIdentifierContext, 0) as ShowStmtIdentifierContext;
	}
	public KW_TABLES(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLES, 0);
	}
	public from_in_list(): From_inContext[] {
		return this.getTypedRuleContexts(From_inContext) as From_inContext[];
	}
	public from_in(i: number): From_inContext {
		return this.getTypedRuleContext(From_inContext, i) as From_inContext;
	}
	public KW_EXTENDED(): TerminalNode {
		return this.getToken(HiveParser.KW_EXTENDED, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public showTablesFilterExpr(): ShowTablesFilterExprContext {
		return this.getTypedRuleContext(ShowTablesFilterExprContext, 0) as ShowTablesFilterExprContext;
	}
	public KW_VIEWS(): TerminalNode {
		return this.getToken(HiveParser.KW_VIEWS, 0);
	}
	public KW_MATERIALIZED(): TerminalNode {
		return this.getToken(HiveParser.KW_MATERIALIZED, 0);
	}
	public KW_COLUMNS(): TerminalNode {
		return this.getToken(HiveParser.KW_COLUMNS, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public KW_SORTED(): TerminalNode {
		return this.getToken(HiveParser.KW_SORTED, 0);
	}
	public KW_FUNCTIONS(): TerminalNode {
		return this.getToken(HiveParser.KW_FUNCTIONS, 0);
	}
	public showFunctionIdentifier(): ShowFunctionIdentifierContext {
		return this.getTypedRuleContext(ShowFunctionIdentifierContext, 0) as ShowFunctionIdentifierContext;
	}
	public KW_PARTITIONS(): TerminalNode {
		return this.getToken(HiveParser.KW_PARTITIONS, 0);
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public db_schema(): Db_schemaContext {
		return this.getTypedRuleContext(Db_schemaContext, 0) as Db_schemaContext;
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public KW_TBLPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_LOCKS(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCKS, 0);
	}
	public partTypeExpr(): PartTypeExprContext {
		return this.getTypedRuleContext(PartTypeExprContext, 0) as PartTypeExprContext;
	}
	public KW_COMPACTIONS(): TerminalNode {
		return this.getToken(HiveParser.KW_COMPACTIONS, 0);
	}
	public compactionId(): CompactionIdContext {
		return this.getTypedRuleContext(CompactionIdContext, 0) as CompactionIdContext;
	}
	public compactionPool(): CompactionPoolContext {
		return this.getTypedRuleContext(CompactionPoolContext, 0) as CompactionPoolContext;
	}
	public compactionType(): CompactionTypeContext {
		return this.getTypedRuleContext(CompactionTypeContext, 0) as CompactionTypeContext;
	}
	public compactionStatus(): CompactionStatusContext {
		return this.getTypedRuleContext(CompactionStatusContext, 0) as CompactionStatusContext;
	}
	public KW_TRANSACTIONS(): TerminalNode {
		return this.getToken(HiveParser.KW_TRANSACTIONS, 0);
	}
	public KW_CONF(): TerminalNode {
		return this.getToken(HiveParser.KW_CONF, 0);
	}
	public KW_RESOURCE(): TerminalNode {
		return this.getToken(HiveParser.KW_RESOURCE, 0);
	}
	public KW_PLAN(): TerminalNode {
		return this.getToken(HiveParser.KW_PLAN, 0);
	}
	public KW_PLANS(): TerminalNode {
		return this.getToken(HiveParser.KW_PLANS, 0);
	}
	public KW_DATACONNECTORS(): TerminalNode {
		return this.getToken(HiveParser.KW_DATACONNECTORS, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_showStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterShowStatement) {
	 		listener.enterShowStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitShowStatement) {
	 		listener.exitShowStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowStatement) {
			return visitor.visitShowStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowTablesFilterExprContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_WHERE(): TerminalNode {
		return this.getToken(HiveParser.KW_WHERE, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public EQUAL(): TerminalNode {
		return this.getToken(HiveParser.EQUAL, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_LIKE(): TerminalNode {
		return this.getToken(HiveParser.KW_LIKE, 0);
	}
	public showStmtIdentifier(): ShowStmtIdentifierContext {
		return this.getTypedRuleContext(ShowStmtIdentifierContext, 0) as ShowStmtIdentifierContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_showTablesFilterExpr;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterShowTablesFilterExpr) {
	 		listener.enterShowTablesFilterExpr(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitShowTablesFilterExpr) {
	 		listener.exitShowTablesFilterExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowTablesFilterExpr) {
			return visitor.visitShowTablesFilterExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_LOCK(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCK, 0);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public lockMode(): LockModeContext {
		return this.getTypedRuleContext(LockModeContext, 0) as LockModeContext;
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_lockStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterLockStatement) {
	 		listener.enterLockStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitLockStatement) {
	 		listener.exitLockStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLockStatement) {
			return visitor.visitLockStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockDatabaseContext extends ParserRuleContext {
	public _dbName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_LOCK(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCK, 0);
	}
	public db_schema(): Db_schemaContext {
		return this.getTypedRuleContext(Db_schemaContext, 0) as Db_schemaContext;
	}
	public lockMode(): LockModeContext {
		return this.getTypedRuleContext(LockModeContext, 0) as LockModeContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_lockDatabase;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterLockDatabase) {
	 		listener.enterLockDatabase(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitLockDatabase) {
	 		listener.exitLockDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLockDatabase) {
			return visitor.visitLockDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockModeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SHARED(): TerminalNode {
		return this.getToken(HiveParser.KW_SHARED, 0);
	}
	public KW_EXCLUSIVE(): TerminalNode {
		return this.getToken(HiveParser.KW_EXCLUSIVE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_lockMode;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterLockMode) {
	 		listener.enterLockMode(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitLockMode) {
	 		listener.exitLockMode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLockMode) {
			return visitor.visitLockMode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnlockStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UNLOCK(): TerminalNode {
		return this.getToken(HiveParser.KW_UNLOCK, 0);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_unlockStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterUnlockStatement) {
	 		listener.enterUnlockStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitUnlockStatement) {
	 		listener.exitUnlockStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUnlockStatement) {
			return visitor.visitUnlockStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnlockDatabaseContext extends ParserRuleContext {
	public _dbName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UNLOCK(): TerminalNode {
		return this.getToken(HiveParser.KW_UNLOCK, 0);
	}
	public db_schema(): Db_schemaContext {
		return this.getTypedRuleContext(Db_schemaContext, 0) as Db_schemaContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_unlockDatabase;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterUnlockDatabase) {
	 		listener.enterUnlockDatabase(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitUnlockDatabase) {
	 		listener.exitUnlockDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUnlockDatabase) {
			return visitor.visitUnlockDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateRoleStatementContext extends ParserRuleContext {
	public _roleName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_ROLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLE, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createRoleStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateRoleStatement) {
	 		listener.enterCreateRoleStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateRoleStatement) {
	 		listener.exitCreateRoleStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateRoleStatement) {
			return visitor.visitCreateRoleStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropRoleStatementContext extends ParserRuleContext {
	public _roleName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_ROLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLE, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropRoleStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropRoleStatement) {
	 		listener.enterDropRoleStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropRoleStatement) {
	 		listener.exitDropRoleStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropRoleStatement) {
			return visitor.visitDropRoleStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantPrivilegesContext extends ParserRuleContext {
	public _privList!: PrivilegeListContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_GRANT(): TerminalNode {
		return this.getToken(HiveParser.KW_GRANT, 0);
	}
	public KW_TO(): TerminalNode {
		return this.getToken(HiveParser.KW_TO, 0);
	}
	public principalSpecification(): PrincipalSpecificationContext {
		return this.getTypedRuleContext(PrincipalSpecificationContext, 0) as PrincipalSpecificationContext;
	}
	public privilegeList(): PrivilegeListContext {
		return this.getTypedRuleContext(PrivilegeListContext, 0) as PrivilegeListContext;
	}
	public privilegeObject(): PrivilegeObjectContext {
		return this.getTypedRuleContext(PrivilegeObjectContext, 0) as PrivilegeObjectContext;
	}
	public withGrantOption(): WithGrantOptionContext {
		return this.getTypedRuleContext(WithGrantOptionContext, 0) as WithGrantOptionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_grantPrivileges;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterGrantPrivileges) {
	 		listener.enterGrantPrivileges(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitGrantPrivileges) {
	 		listener.exitGrantPrivileges(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGrantPrivileges) {
			return visitor.visitGrantPrivileges(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokePrivilegesContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_REVOKE(): TerminalNode {
		return this.getToken(HiveParser.KW_REVOKE, 0);
	}
	public privilegeList(): PrivilegeListContext {
		return this.getTypedRuleContext(PrivilegeListContext, 0) as PrivilegeListContext;
	}
	public KW_FROM(): TerminalNode {
		return this.getToken(HiveParser.KW_FROM, 0);
	}
	public principalSpecification(): PrincipalSpecificationContext {
		return this.getTypedRuleContext(PrincipalSpecificationContext, 0) as PrincipalSpecificationContext;
	}
	public grantOptionFor(): GrantOptionForContext {
		return this.getTypedRuleContext(GrantOptionForContext, 0) as GrantOptionForContext;
	}
	public privilegeObject(): PrivilegeObjectContext {
		return this.getTypedRuleContext(PrivilegeObjectContext, 0) as PrivilegeObjectContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_revokePrivileges;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRevokePrivileges) {
	 		listener.enterRevokePrivileges(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRevokePrivileges) {
	 		listener.exitRevokePrivileges(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRevokePrivileges) {
			return visitor.visitRevokePrivileges(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantRoleContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_GRANT(): TerminalNode {
		return this.getToken(HiveParser.KW_GRANT, 0);
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public KW_TO(): TerminalNode {
		return this.getToken(HiveParser.KW_TO, 0);
	}
	public principalSpecification(): PrincipalSpecificationContext {
		return this.getTypedRuleContext(PrincipalSpecificationContext, 0) as PrincipalSpecificationContext;
	}
	public KW_ROLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLE, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
	public withAdminOption(): WithAdminOptionContext {
		return this.getTypedRuleContext(WithAdminOptionContext, 0) as WithAdminOptionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_grantRole;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterGrantRole) {
	 		listener.enterGrantRole(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitGrantRole) {
	 		listener.exitGrantRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGrantRole) {
			return visitor.visitGrantRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokeRoleContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_REVOKE(): TerminalNode {
		return this.getToken(HiveParser.KW_REVOKE, 0);
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public KW_FROM(): TerminalNode {
		return this.getToken(HiveParser.KW_FROM, 0);
	}
	public principalSpecification(): PrincipalSpecificationContext {
		return this.getTypedRuleContext(PrincipalSpecificationContext, 0) as PrincipalSpecificationContext;
	}
	public adminOptionFor(): AdminOptionForContext {
		return this.getTypedRuleContext(AdminOptionForContext, 0) as AdminOptionForContext;
	}
	public KW_ROLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLE, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_revokeRole;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRevokeRole) {
	 		listener.enterRevokeRole(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRevokeRole) {
	 		listener.exitRevokeRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRevokeRole) {
			return visitor.visitRevokeRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRoleGrantsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SHOW(): TerminalNode {
		return this.getToken(HiveParser.KW_SHOW, 0);
	}
	public KW_ROLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLE, 0);
	}
	public KW_GRANT(): TerminalNode {
		return this.getToken(HiveParser.KW_GRANT, 0);
	}
	public principalName(): PrincipalNameContext {
		return this.getTypedRuleContext(PrincipalNameContext, 0) as PrincipalNameContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_showRoleGrants;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterShowRoleGrants) {
	 		listener.enterShowRoleGrants(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitShowRoleGrants) {
	 		listener.exitShowRoleGrants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowRoleGrants) {
			return visitor.visitShowRoleGrants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRolesContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SHOW(): TerminalNode {
		return this.getToken(HiveParser.KW_SHOW, 0);
	}
	public KW_ROLES(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLES, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_showRoles;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterShowRoles) {
	 		listener.enterShowRoles(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitShowRoles) {
	 		listener.exitShowRoles(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowRoles) {
			return visitor.visitShowRoles(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCurrentRoleContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SHOW(): TerminalNode {
		return this.getToken(HiveParser.KW_SHOW, 0);
	}
	public KW_CURRENT(): TerminalNode {
		return this.getToken(HiveParser.KW_CURRENT, 0);
	}
	public KW_ROLES(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLES, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_showCurrentRole;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterShowCurrentRole) {
	 		listener.enterShowCurrentRole(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitShowCurrentRole) {
	 		listener.exitShowCurrentRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowCurrentRole) {
			return visitor.visitShowCurrentRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetRoleContext extends ParserRuleContext {
	public _all!: Token;
	public _none!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_ROLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLE, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_ALL(): TerminalNode {
		return this.getToken(HiveParser.KW_ALL, 0);
	}
	public KW_NONE(): TerminalNode {
		return this.getToken(HiveParser.KW_NONE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_setRole;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSetRole) {
	 		listener.enterSetRole(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSetRole) {
	 		listener.exitSetRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSetRole) {
			return visitor.visitSetRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowGrantsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SHOW(): TerminalNode {
		return this.getToken(HiveParser.KW_SHOW, 0);
	}
	public KW_GRANT(): TerminalNode {
		return this.getToken(HiveParser.KW_GRANT, 0);
	}
	public principalName(): PrincipalNameContext {
		return this.getTypedRuleContext(PrincipalNameContext, 0) as PrincipalNameContext;
	}
	public KW_ON(): TerminalNode {
		return this.getToken(HiveParser.KW_ON, 0);
	}
	public privilegeIncludeColObject(): PrivilegeIncludeColObjectContext {
		return this.getTypedRuleContext(PrivilegeIncludeColObjectContext, 0) as PrivilegeIncludeColObjectContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_showGrants;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterShowGrants) {
	 		listener.enterShowGrants(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitShowGrants) {
	 		listener.exitShowGrants(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowGrants) {
			return visitor.visitShowGrants(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRolePrincipalsContext extends ParserRuleContext {
	public _roleName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SHOW(): TerminalNode {
		return this.getToken(HiveParser.KW_SHOW, 0);
	}
	public KW_PRINCIPALS(): TerminalNode {
		return this.getToken(HiveParser.KW_PRINCIPALS, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_showRolePrincipals;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterShowRolePrincipals) {
	 		listener.enterShowRolePrincipals(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitShowRolePrincipals) {
	 		listener.exitShowRolePrincipals(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowRolePrincipals) {
			return visitor.visitShowRolePrincipals(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeIncludeColObjectContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ALL(): TerminalNode {
		return this.getToken(HiveParser.KW_ALL, 0);
	}
	public privObjectCols(): PrivObjectColsContext {
		return this.getTypedRuleContext(PrivObjectColsContext, 0) as PrivObjectColsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_privilegeIncludeColObject;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrivilegeIncludeColObject) {
	 		listener.enterPrivilegeIncludeColObject(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrivilegeIncludeColObject) {
	 		listener.exitPrivilegeIncludeColObject(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivilegeIncludeColObject) {
			return visitor.visitPrivilegeIncludeColObject(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeObjectContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ON(): TerminalNode {
		return this.getToken(HiveParser.KW_ON, 0);
	}
	public privObject(): PrivObjectContext {
		return this.getTypedRuleContext(PrivObjectContext, 0) as PrivObjectContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_privilegeObject;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrivilegeObject) {
	 		listener.enterPrivilegeObject(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrivilegeObject) {
	 		listener.exitPrivilegeObject(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivilegeObject) {
			return visitor.visitPrivilegeObject(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivObjectContext extends ParserRuleContext {
	public _path!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public db_schema(): Db_schemaContext {
		return this.getTypedRuleContext(Db_schemaContext, 0) as Db_schemaContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
	public KW_URI(): TerminalNode {
		return this.getToken(HiveParser.KW_URI, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_SERVER(): TerminalNode {
		return this.getToken(HiveParser.KW_SERVER, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_privObject;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrivObject) {
	 		listener.enterPrivObject(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrivObject) {
	 		listener.exitPrivObject(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivObject) {
			return visitor.visitPrivObject(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivObjectColsContext extends ParserRuleContext {
	public _cols!: ColumnNameListContext;
	public _path!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public db_schema(): Db_schemaContext {
		return this.getTypedRuleContext(Db_schemaContext, 0) as Db_schemaContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
	public KW_URI(): TerminalNode {
		return this.getToken(HiveParser.KW_URI, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_SERVER(): TerminalNode {
		return this.getToken(HiveParser.KW_SERVER, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_privObjectCols;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrivObjectCols) {
	 		listener.enterPrivObjectCols(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrivObjectCols) {
	 		listener.exitPrivObjectCols(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivObjectCols) {
			return visitor.visitPrivObjectCols(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public privlegeDef_list(): PrivlegeDefContext[] {
		return this.getTypedRuleContexts(PrivlegeDefContext) as PrivlegeDefContext[];
	}
	public privlegeDef(i: number): PrivlegeDefContext {
		return this.getTypedRuleContext(PrivlegeDefContext, i) as PrivlegeDefContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_privilegeList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrivilegeList) {
	 		listener.enterPrivilegeList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrivilegeList) {
	 		listener.exitPrivilegeList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivilegeList) {
			return visitor.visitPrivilegeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivlegeDefContext extends ParserRuleContext {
	public _cols!: ColumnNameListContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public privilegeType(): PrivilegeTypeContext {
		return this.getTypedRuleContext(PrivilegeTypeContext, 0) as PrivilegeTypeContext;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_privlegeDef;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrivlegeDef) {
	 		listener.enterPrivlegeDef(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrivlegeDef) {
	 		listener.exitPrivlegeDef(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivlegeDef) {
			return visitor.visitPrivlegeDef(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeTypeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ALL(): TerminalNode {
		return this.getToken(HiveParser.KW_ALL, 0);
	}
	public KW_ALTER(): TerminalNode {
		return this.getToken(HiveParser.KW_ALTER, 0);
	}
	public KW_UPDATE(): TerminalNode {
		return this.getToken(HiveParser.KW_UPDATE, 0);
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_LOCK(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCK, 0);
	}
	public KW_SELECT(): TerminalNode {
		return this.getToken(HiveParser.KW_SELECT, 0);
	}
	public KW_SHOW_DATABASE(): TerminalNode {
		return this.getToken(HiveParser.KW_SHOW_DATABASE, 0);
	}
	public KW_INSERT(): TerminalNode {
		return this.getToken(HiveParser.KW_INSERT, 0);
	}
	public KW_DELETE(): TerminalNode {
		return this.getToken(HiveParser.KW_DELETE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_privilegeType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrivilegeType) {
	 		listener.enterPrivilegeType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrivilegeType) {
	 		listener.exitPrivilegeType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrivilegeType) {
			return visitor.visitPrivilegeType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrincipalSpecificationContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public principalName_list(): PrincipalNameContext[] {
		return this.getTypedRuleContexts(PrincipalNameContext) as PrincipalNameContext[];
	}
	public principalName(i: number): PrincipalNameContext {
		return this.getTypedRuleContext(PrincipalNameContext, i) as PrincipalNameContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_principalSpecification;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrincipalSpecification) {
	 		listener.enterPrincipalSpecification(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrincipalSpecification) {
	 		listener.exitPrincipalSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrincipalSpecification) {
			return visitor.visitPrincipalSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrincipalNameContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_USER(): TerminalNode {
		return this.getToken(HiveParser.KW_USER, 0);
	}
	public principalIdentifier(): PrincipalIdentifierContext {
		return this.getTypedRuleContext(PrincipalIdentifierContext, 0) as PrincipalIdentifierContext;
	}
	public KW_GROUP(): TerminalNode {
		return this.getToken(HiveParser.KW_GROUP, 0);
	}
	public KW_ROLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLE, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_principalName;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrincipalName) {
	 		listener.enterPrincipalName(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrincipalName) {
	 		listener.exitPrincipalName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrincipalName) {
			return visitor.visitPrincipalName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithGrantOptionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_GRANT(): TerminalNode {
		return this.getToken(HiveParser.KW_GRANT, 0);
	}
	public KW_OPTION(): TerminalNode {
		return this.getToken(HiveParser.KW_OPTION, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_withGrantOption;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWithGrantOption) {
	 		listener.enterWithGrantOption(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWithGrantOption) {
	 		listener.exitWithGrantOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWithGrantOption) {
			return visitor.visitWithGrantOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantOptionForContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_GRANT(): TerminalNode {
		return this.getToken(HiveParser.KW_GRANT, 0);
	}
	public KW_OPTION(): TerminalNode {
		return this.getToken(HiveParser.KW_OPTION, 0);
	}
	public KW_FOR(): TerminalNode {
		return this.getToken(HiveParser.KW_FOR, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_grantOptionFor;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterGrantOptionFor) {
	 		listener.enterGrantOptionFor(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitGrantOptionFor) {
	 		listener.exitGrantOptionFor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGrantOptionFor) {
			return visitor.visitGrantOptionFor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AdminOptionForContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ADMIN(): TerminalNode {
		return this.getToken(HiveParser.KW_ADMIN, 0);
	}
	public KW_OPTION(): TerminalNode {
		return this.getToken(HiveParser.KW_OPTION, 0);
	}
	public KW_FOR(): TerminalNode {
		return this.getToken(HiveParser.KW_FOR, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_adminOptionFor;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAdminOptionFor) {
	 		listener.enterAdminOptionFor(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAdminOptionFor) {
	 		listener.exitAdminOptionFor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAdminOptionFor) {
			return visitor.visitAdminOptionFor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithAdminOptionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_ADMIN(): TerminalNode {
		return this.getToken(HiveParser.KW_ADMIN, 0);
	}
	public KW_OPTION(): TerminalNode {
		return this.getToken(HiveParser.KW_OPTION, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_withAdminOption;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWithAdminOption) {
	 		listener.enterWithAdminOption(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWithAdminOption) {
	 		listener.exitWithAdminOption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWithAdminOption) {
			return visitor.visitWithAdminOption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MetastoreCheckContext extends ParserRuleContext {
	public _repair!: Token;
	public _opt!: Token;
	public _parts!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_MSCK(): TerminalNode {
		return this.getToken(HiveParser.KW_MSCK, 0);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public KW_REPAIR(): TerminalNode {
		return this.getToken(HiveParser.KW_REPAIR, 0);
	}
	public KW_PARTITIONS(): TerminalNode {
		return this.getToken(HiveParser.KW_PARTITIONS, 0);
	}
	public KW_ADD(): TerminalNode {
		return this.getToken(HiveParser.KW_ADD, 0);
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_SYNC(): TerminalNode {
		return this.getToken(HiveParser.KW_SYNC, 0);
	}
	public partitionSelectorSpec(): PartitionSelectorSpecContext {
		return this.getTypedRuleContext(PartitionSelectorSpecContext, 0) as PartitionSelectorSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_metastoreCheck;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterMetastoreCheck) {
	 		listener.enterMetastoreCheck(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitMetastoreCheck) {
	 		listener.exitMetastoreCheck(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitMetastoreCheck) {
			return visitor.visitMetastoreCheck(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResourceListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public resource_list(): ResourceContext[] {
		return this.getTypedRuleContexts(ResourceContext) as ResourceContext[];
	}
	public resource(i: number): ResourceContext {
		return this.getTypedRuleContext(ResourceContext, i) as ResourceContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_resourceList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterResourceList) {
	 		listener.enterResourceList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitResourceList) {
	 		listener.exitResourceList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitResourceList) {
			return visitor.visitResourceList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResourceContext extends ParserRuleContext {
	public _resType!: ResourceTypeContext;
	public _resPath!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public resourceType(): ResourceTypeContext {
		return this.getTypedRuleContext(ResourceTypeContext, 0) as ResourceTypeContext;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_resource;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterResource) {
	 		listener.enterResource(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitResource) {
	 		listener.exitResource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitResource) {
			return visitor.visitResource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResourceTypeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_JAR(): TerminalNode {
		return this.getToken(HiveParser.KW_JAR, 0);
	}
	public KW_FILE(): TerminalNode {
		return this.getToken(HiveParser.KW_FILE, 0);
	}
	public KW_ARCHIVE(): TerminalNode {
		return this.getToken(HiveParser.KW_ARCHIVE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_resourceType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterResourceType) {
	 		listener.enterResourceType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitResourceType) {
	 		listener.exitResourceType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitResourceType) {
			return visitor.visitResourceType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateFunctionStatementContext extends ParserRuleContext {
	public _temp!: Token;
	public _rList!: ResourceListContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_FUNCTION(): TerminalNode {
		return this.getToken(HiveParser.KW_FUNCTION, 0);
	}
	public functionIdentifier(): FunctionIdentifierContext {
		return this.getTypedRuleContext(FunctionIdentifierContext, 0) as FunctionIdentifierContext;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_USING(): TerminalNode {
		return this.getToken(HiveParser.KW_USING, 0);
	}
	public KW_TEMPORARY(): TerminalNode {
		return this.getToken(HiveParser.KW_TEMPORARY, 0);
	}
	public resourceList(): ResourceListContext {
		return this.getTypedRuleContext(ResourceListContext, 0) as ResourceListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createFunctionStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateFunctionStatement) {
	 		listener.enterCreateFunctionStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateFunctionStatement) {
	 		listener.exitCreateFunctionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateFunctionStatement) {
			return visitor.visitCreateFunctionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropFunctionStatementContext extends ParserRuleContext {
	public _temp!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_FUNCTION(): TerminalNode {
		return this.getToken(HiveParser.KW_FUNCTION, 0);
	}
	public functionIdentifier(): FunctionIdentifierContext {
		return this.getTypedRuleContext(FunctionIdentifierContext, 0) as FunctionIdentifierContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
	public KW_TEMPORARY(): TerminalNode {
		return this.getToken(HiveParser.KW_TEMPORARY, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropFunctionStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropFunctionStatement) {
	 		listener.enterDropFunctionStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropFunctionStatement) {
	 		listener.exitDropFunctionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropFunctionStatement) {
			return visitor.visitDropFunctionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReloadFunctionsStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_RELOAD(): TerminalNode {
		return this.getToken(HiveParser.KW_RELOAD, 0);
	}
	public KW_FUNCTIONS(): TerminalNode {
		return this.getToken(HiveParser.KW_FUNCTIONS, 0);
	}
	public KW_FUNCTION(): TerminalNode {
		return this.getToken(HiveParser.KW_FUNCTION, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_reloadFunctionsStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterReloadFunctionsStatement) {
	 		listener.enterReloadFunctionsStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitReloadFunctionsStatement) {
	 		listener.exitReloadFunctionsStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReloadFunctionsStatement) {
			return visitor.visitReloadFunctionsStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateMacroStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_TEMPORARY(): TerminalNode {
		return this.getToken(HiveParser.KW_TEMPORARY, 0);
	}
	public KW_MACRO(): TerminalNode {
		return this.getToken(HiveParser.KW_MACRO, 0);
	}
	public Identifier(): TerminalNode {
		return this.getToken(HiveParser.Identifier, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public columnNameTypeList(): ColumnNameTypeListContext {
		return this.getTypedRuleContext(ColumnNameTypeListContext, 0) as ColumnNameTypeListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createMacroStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateMacroStatement) {
	 		listener.enterCreateMacroStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateMacroStatement) {
	 		listener.exitCreateMacroStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateMacroStatement) {
			return visitor.visitCreateMacroStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropMacroStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_TEMPORARY(): TerminalNode {
		return this.getToken(HiveParser.KW_TEMPORARY, 0);
	}
	public KW_MACRO(): TerminalNode {
		return this.getToken(HiveParser.KW_MACRO, 0);
	}
	public Identifier(): TerminalNode {
		return this.getToken(HiveParser.Identifier, 0);
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropMacroStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropMacroStatement) {
	 		listener.enterDropMacroStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropMacroStatement) {
	 		listener.exitDropMacroStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropMacroStatement) {
			return visitor.visitDropMacroStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateViewStatementContext extends ParserRuleContext {
	public _name!: TableNameContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_VIEW(): TerminalNode {
		return this.getToken(HiveParser.KW_VIEW, 0);
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public selectStatementWithCTE(): SelectStatementWithCTEContext {
		return this.getTypedRuleContext(SelectStatementWithCTEContext, 0) as SelectStatementWithCTEContext;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public orReplace(): OrReplaceContext {
		return this.getTypedRuleContext(OrReplaceContext, 0) as OrReplaceContext;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public columnNameCommentList(): ColumnNameCommentListContext {
		return this.getTypedRuleContext(ColumnNameCommentListContext, 0) as ColumnNameCommentListContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public tableComment(): TableCommentContext {
		return this.getTypedRuleContext(TableCommentContext, 0) as TableCommentContext;
	}
	public viewPartition(): ViewPartitionContext {
		return this.getTypedRuleContext(ViewPartitionContext, 0) as ViewPartitionContext;
	}
	public tablePropertiesPrefixed(): TablePropertiesPrefixedContext {
		return this.getTypedRuleContext(TablePropertiesPrefixedContext, 0) as TablePropertiesPrefixedContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createViewStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateViewStatement) {
	 		listener.enterCreateViewStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateViewStatement) {
	 		listener.exitCreateViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateViewStatement) {
			return visitor.visitCreateViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ViewPartitionContext extends ParserRuleContext {
	public _spec!: PartitionTransformSpecContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_PARTITIONED(): TerminalNode {
		return this.getToken(HiveParser.KW_PARTITIONED, 0);
	}
	public KW_ON(): TerminalNode {
		return this.getToken(HiveParser.KW_ON, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
	public KW_SPEC(): TerminalNode {
		return this.getToken(HiveParser.KW_SPEC, 0);
	}
	public partitionTransformSpec(): PartitionTransformSpecContext {
		return this.getTypedRuleContext(PartitionTransformSpecContext, 0) as PartitionTransformSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_viewPartition;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterViewPartition) {
	 		listener.enterViewPartition(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitViewPartition) {
	 		listener.exitViewPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitViewPartition) {
			return visitor.visitViewPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ViewOrganizationContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public viewClusterSpec(): ViewClusterSpecContext {
		return this.getTypedRuleContext(ViewClusterSpecContext, 0) as ViewClusterSpecContext;
	}
	public viewComplexSpec(): ViewComplexSpecContext {
		return this.getTypedRuleContext(ViewComplexSpecContext, 0) as ViewComplexSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_viewOrganization;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterViewOrganization) {
	 		listener.enterViewOrganization(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitViewOrganization) {
	 		listener.exitViewOrganization(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitViewOrganization) {
			return visitor.visitViewOrganization(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ViewClusterSpecContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CLUSTERED(): TerminalNode {
		return this.getToken(HiveParser.KW_CLUSTERED, 0);
	}
	public KW_ON(): TerminalNode {
		return this.getToken(HiveParser.KW_ON, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_viewClusterSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterViewClusterSpec) {
	 		listener.enterViewClusterSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitViewClusterSpec) {
	 		listener.exitViewClusterSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitViewClusterSpec) {
			return visitor.visitViewClusterSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ViewComplexSpecContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public viewDistSpec(): ViewDistSpecContext {
		return this.getTypedRuleContext(ViewDistSpecContext, 0) as ViewDistSpecContext;
	}
	public viewSortSpec(): ViewSortSpecContext {
		return this.getTypedRuleContext(ViewSortSpecContext, 0) as ViewSortSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_viewComplexSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterViewComplexSpec) {
	 		listener.enterViewComplexSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitViewComplexSpec) {
	 		listener.exitViewComplexSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitViewComplexSpec) {
			return visitor.visitViewComplexSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ViewDistSpecContext extends ParserRuleContext {
	public _colList!: ColumnNameListContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DISTRIBUTED(): TerminalNode {
		return this.getToken(HiveParser.KW_DISTRIBUTED, 0);
	}
	public KW_ON(): TerminalNode {
		return this.getToken(HiveParser.KW_ON, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_viewDistSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterViewDistSpec) {
	 		listener.enterViewDistSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitViewDistSpec) {
	 		listener.exitViewDistSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitViewDistSpec) {
			return visitor.visitViewDistSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ViewSortSpecContext extends ParserRuleContext {
	public _colList!: ColumnNameListContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SORTED(): TerminalNode {
		return this.getToken(HiveParser.KW_SORTED, 0);
	}
	public KW_ON(): TerminalNode {
		return this.getToken(HiveParser.KW_ON, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_viewSortSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterViewSortSpec) {
	 		listener.enterViewSortSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitViewSortSpec) {
	 		listener.exitViewSortSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitViewSortSpec) {
			return visitor.visitViewSortSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropViewStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_VIEW(): TerminalNode {
		return this.getToken(HiveParser.KW_VIEW, 0);
	}
	public viewName(): ViewNameContext {
		return this.getTypedRuleContext(ViewNameContext, 0) as ViewNameContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropViewStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropViewStatement) {
	 		listener.enterDropViewStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropViewStatement) {
	 		listener.exitDropViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropViewStatement) {
			return visitor.visitDropViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateMaterializedViewStatementContext extends ParserRuleContext {
	public _name!: TableNameContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_MATERIALIZED(): TerminalNode {
		return this.getToken(HiveParser.KW_MATERIALIZED, 0);
	}
	public KW_VIEW(): TerminalNode {
		return this.getToken(HiveParser.KW_VIEW, 0);
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public selectStatementWithCTE(): SelectStatementWithCTEContext {
		return this.getTypedRuleContext(SelectStatementWithCTEContext, 0) as SelectStatementWithCTEContext;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public rewriteDisabled(): RewriteDisabledContext {
		return this.getTypedRuleContext(RewriteDisabledContext, 0) as RewriteDisabledContext;
	}
	public tableComment(): TableCommentContext {
		return this.getTypedRuleContext(TableCommentContext, 0) as TableCommentContext;
	}
	public viewPartition(): ViewPartitionContext {
		return this.getTypedRuleContext(ViewPartitionContext, 0) as ViewPartitionContext;
	}
	public viewOrganization(): ViewOrganizationContext {
		return this.getTypedRuleContext(ViewOrganizationContext, 0) as ViewOrganizationContext;
	}
	public tableRowFormat(): TableRowFormatContext {
		return this.getTypedRuleContext(TableRowFormatContext, 0) as TableRowFormatContext;
	}
	public tableFileFormat(): TableFileFormatContext {
		return this.getTypedRuleContext(TableFileFormatContext, 0) as TableFileFormatContext;
	}
	public tableLocation(): TableLocationContext {
		return this.getTypedRuleContext(TableLocationContext, 0) as TableLocationContext;
	}
	public tablePropertiesPrefixed(): TablePropertiesPrefixedContext {
		return this.getTypedRuleContext(TablePropertiesPrefixedContext, 0) as TablePropertiesPrefixedContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createMaterializedViewStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateMaterializedViewStatement) {
	 		listener.enterCreateMaterializedViewStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateMaterializedViewStatement) {
	 		listener.exitCreateMaterializedViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateMaterializedViewStatement) {
			return visitor.visitCreateMaterializedViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropMaterializedViewStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_MATERIALIZED(): TerminalNode {
		return this.getToken(HiveParser.KW_MATERIALIZED, 0);
	}
	public KW_VIEW(): TerminalNode {
		return this.getToken(HiveParser.KW_VIEW, 0);
	}
	public viewName(): ViewNameContext {
		return this.getTypedRuleContext(ViewNameContext, 0) as ViewNameContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropMaterializedViewStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropMaterializedViewStatement) {
	 		listener.enterDropMaterializedViewStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropMaterializedViewStatement) {
	 		listener.exitDropMaterializedViewStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropMaterializedViewStatement) {
			return visitor.visitDropMaterializedViewStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateScheduledQueryStatementContext extends ParserRuleContext {
	public _name!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_SCHEDULED(): TerminalNode {
		return this.getToken(HiveParser.KW_SCHEDULED, 0);
	}
	public KW_QUERY(): TerminalNode {
		return this.getToken(HiveParser.KW_QUERY, 0);
	}
	public scheduleSpec(): ScheduleSpecContext {
		return this.getTypedRuleContext(ScheduleSpecContext, 0) as ScheduleSpecContext;
	}
	public definedAsSpec(): DefinedAsSpecContext {
		return this.getTypedRuleContext(DefinedAsSpecContext, 0) as DefinedAsSpecContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public executedAsSpec(): ExecutedAsSpecContext {
		return this.getTypedRuleContext(ExecutedAsSpecContext, 0) as ExecutedAsSpecContext;
	}
	public enableSpecification(): EnableSpecificationContext {
		return this.getTypedRuleContext(EnableSpecificationContext, 0) as EnableSpecificationContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createScheduledQueryStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateScheduledQueryStatement) {
	 		listener.enterCreateScheduledQueryStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateScheduledQueryStatement) {
	 		listener.exitCreateScheduledQueryStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateScheduledQueryStatement) {
			return visitor.visitCreateScheduledQueryStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropScheduledQueryStatementContext extends ParserRuleContext {
	public _name!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_SCHEDULED(): TerminalNode {
		return this.getToken(HiveParser.KW_SCHEDULED, 0);
	}
	public KW_QUERY(): TerminalNode {
		return this.getToken(HiveParser.KW_QUERY, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropScheduledQueryStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropScheduledQueryStatement) {
	 		listener.enterDropScheduledQueryStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropScheduledQueryStatement) {
	 		listener.exitDropScheduledQueryStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropScheduledQueryStatement) {
			return visitor.visitDropScheduledQueryStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterScheduledQueryStatementContext extends ParserRuleContext {
	public _name!: Id_Context;
	public _mod!: AlterScheduledQueryChangeContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ALTER(): TerminalNode {
		return this.getToken(HiveParser.KW_ALTER, 0);
	}
	public KW_SCHEDULED(): TerminalNode {
		return this.getToken(HiveParser.KW_SCHEDULED, 0);
	}
	public KW_QUERY(): TerminalNode {
		return this.getToken(HiveParser.KW_QUERY, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public alterScheduledQueryChange(): AlterScheduledQueryChangeContext {
		return this.getTypedRuleContext(AlterScheduledQueryChangeContext, 0) as AlterScheduledQueryChangeContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterScheduledQueryStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterScheduledQueryStatement) {
	 		listener.enterAlterScheduledQueryStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterScheduledQueryStatement) {
	 		listener.exitAlterScheduledQueryStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterScheduledQueryStatement) {
			return visitor.visitAlterScheduledQueryStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterScheduledQueryChangeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public scheduleSpec(): ScheduleSpecContext {
		return this.getTypedRuleContext(ScheduleSpecContext, 0) as ScheduleSpecContext;
	}
	public executedAsSpec(): ExecutedAsSpecContext {
		return this.getTypedRuleContext(ExecutedAsSpecContext, 0) as ExecutedAsSpecContext;
	}
	public enableSpecification(): EnableSpecificationContext {
		return this.getTypedRuleContext(EnableSpecificationContext, 0) as EnableSpecificationContext;
	}
	public definedAsSpec(): DefinedAsSpecContext {
		return this.getTypedRuleContext(DefinedAsSpecContext, 0) as DefinedAsSpecContext;
	}
	public KW_EXECUTE(): TerminalNode {
		return this.getToken(HiveParser.KW_EXECUTE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterScheduledQueryChange;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterScheduledQueryChange) {
	 		listener.enterAlterScheduledQueryChange(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterScheduledQueryChange) {
	 		listener.exitAlterScheduledQueryChange(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterScheduledQueryChange) {
			return visitor.visitAlterScheduledQueryChange(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScheduleSpecContext extends ParserRuleContext {
	public _cronString!: Token;
	public _value!: Token;
	public _qualifier!: IntervalQualifiersContext;
	public _offsetTs!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CRON(): TerminalNode {
		return this.getToken(HiveParser.KW_CRON, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_EVERY(): TerminalNode {
		return this.getToken(HiveParser.KW_EVERY, 0);
	}
	public intervalQualifiers(): IntervalQualifiersContext {
		return this.getTypedRuleContext(IntervalQualifiersContext, 0) as IntervalQualifiersContext;
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
	public KW_AT(): TerminalNode {
		return this.getToken(HiveParser.KW_AT, 0);
	}
	public KW_OFFSET(): TerminalNode {
		return this.getToken(HiveParser.KW_OFFSET, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_scheduleSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterScheduleSpec) {
	 		listener.enterScheduleSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitScheduleSpec) {
	 		listener.exitScheduleSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitScheduleSpec) {
			return visitor.visitScheduleSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecutedAsSpecContext extends ParserRuleContext {
	public _executedAs!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_EXECUTED(): TerminalNode {
		return this.getToken(HiveParser.KW_EXECUTED, 0);
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_executedAsSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExecutedAsSpec) {
	 		listener.enterExecutedAsSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExecutedAsSpec) {
	 		listener.exitExecutedAsSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExecutedAsSpec) {
			return visitor.visitExecutedAsSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefinedAsSpecContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public statement(): StatementContext {
		return this.getTypedRuleContext(StatementContext, 0) as StatementContext;
	}
	public KW_DEFINED(): TerminalNode {
		return this.getToken(HiveParser.KW_DEFINED, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_definedAsSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDefinedAsSpec) {
	 		listener.enterDefinedAsSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDefinedAsSpec) {
	 		listener.exitDefinedAsSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDefinedAsSpec) {
			return visitor.visitDefinedAsSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowFunctionIdentifierContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public functionIdentifier(): FunctionIdentifierContext {
		return this.getTypedRuleContext(FunctionIdentifierContext, 0) as FunctionIdentifierContext;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_showFunctionIdentifier;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterShowFunctionIdentifier) {
	 		listener.enterShowFunctionIdentifier(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitShowFunctionIdentifier) {
	 		listener.exitShowFunctionIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowFunctionIdentifier) {
			return visitor.visitShowFunctionIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowStmtIdentifierContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_showStmtIdentifier;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterShowStmtIdentifier) {
	 		listener.enterShowStmtIdentifier(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitShowStmtIdentifier) {
	 		listener.exitShowStmtIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitShowStmtIdentifier) {
			return visitor.visitShowStmtIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableCommentContext extends ParserRuleContext {
	public _comment!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_COMMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMMENT, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableComment;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableComment) {
	 		listener.enterTableComment(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableComment) {
	 		listener.exitTableComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableComment) {
			return visitor.visitTableComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTablePartitionSpecContext extends ParserRuleContext {
	public _opt1!: CreateTablePartitionColumnTypeSpecContext;
	public _opt2!: CreateTablePartitionColumnSpecContext;
	public _spec!: PartitionTransformSpecContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_PARTITIONED(): TerminalNode {
		return this.getToken(HiveParser.KW_PARTITIONED, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public KW_SPEC(): TerminalNode {
		return this.getToken(HiveParser.KW_SPEC, 0);
	}
	public partitionTransformSpec(): PartitionTransformSpecContext {
		return this.getTypedRuleContext(PartitionTransformSpecContext, 0) as PartitionTransformSpecContext;
	}
	public createTablePartitionColumnTypeSpec(): CreateTablePartitionColumnTypeSpecContext {
		return this.getTypedRuleContext(CreateTablePartitionColumnTypeSpecContext, 0) as CreateTablePartitionColumnTypeSpecContext;
	}
	public createTablePartitionColumnSpec(): CreateTablePartitionColumnSpecContext {
		return this.getTypedRuleContext(CreateTablePartitionColumnSpecContext, 0) as CreateTablePartitionColumnSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createTablePartitionSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateTablePartitionSpec) {
	 		listener.enterCreateTablePartitionSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateTablePartitionSpec) {
	 		listener.exitCreateTablePartitionSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateTablePartitionSpec) {
			return visitor.visitCreateTablePartitionSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTablePartitionColumnTypeSpecContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnNameTypeConstraint_list(): ColumnNameTypeConstraintContext[] {
		return this.getTypedRuleContexts(ColumnNameTypeConstraintContext) as ColumnNameTypeConstraintContext[];
	}
	public columnNameTypeConstraint(i: number): ColumnNameTypeConstraintContext {
		return this.getTypedRuleContext(ColumnNameTypeConstraintContext, i) as ColumnNameTypeConstraintContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createTablePartitionColumnTypeSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateTablePartitionColumnTypeSpec) {
	 		listener.enterCreateTablePartitionColumnTypeSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateTablePartitionColumnTypeSpec) {
	 		listener.exitCreateTablePartitionColumnTypeSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateTablePartitionColumnTypeSpec) {
			return visitor.visitCreateTablePartitionColumnTypeSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTablePartitionColumnSpecContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnName_list(): ColumnNameContext[] {
		return this.getTypedRuleContexts(ColumnNameContext) as ColumnNameContext[];
	}
	public columnName(i: number): ColumnNameContext {
		return this.getTypedRuleContext(ColumnNameContext, i) as ColumnNameContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createTablePartitionColumnSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateTablePartitionColumnSpec) {
	 		listener.enterCreateTablePartitionColumnSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateTablePartitionColumnSpec) {
	 		listener.exitCreateTablePartitionColumnSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateTablePartitionColumnSpec) {
			return visitor.visitCreateTablePartitionColumnSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionTransformSpecContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnNameTransformConstraint_list(): ColumnNameTransformConstraintContext[] {
		return this.getTypedRuleContexts(ColumnNameTransformConstraintContext) as ColumnNameTransformConstraintContext[];
	}
	public columnNameTransformConstraint(i: number): ColumnNameTransformConstraintContext {
		return this.getTypedRuleContext(ColumnNameTransformConstraintContext, i) as ColumnNameTransformConstraintContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partitionTransformSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartitionTransformSpec) {
	 		listener.enterPartitionTransformSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartitionTransformSpec) {
	 		listener.exitPartitionTransformSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionTransformSpec) {
			return visitor.visitPartitionTransformSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameTransformConstraintContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public partitionTransformType(): PartitionTransformTypeContext {
		return this.getTypedRuleContext(PartitionTransformTypeContext, 0) as PartitionTransformTypeContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameTransformConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameTransformConstraint) {
	 		listener.enterColumnNameTransformConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameTransformConstraint) {
	 		listener.exitColumnNameTransformConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameTransformConstraint) {
			return visitor.visitColumnNameTransformConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionTransformTypeContext extends ParserRuleContext {
	public _value!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnName(): ColumnNameContext {
		return this.getTypedRuleContext(ColumnNameContext, 0) as ColumnNameContext;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public KW_YEAR(): TerminalNode {
		return this.getToken(HiveParser.KW_YEAR, 0);
	}
	public KW_MONTH(): TerminalNode {
		return this.getToken(HiveParser.KW_MONTH, 0);
	}
	public KW_DAY(): TerminalNode {
		return this.getToken(HiveParser.KW_DAY, 0);
	}
	public KW_HOUR(): TerminalNode {
		return this.getToken(HiveParser.KW_HOUR, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(HiveParser.COMMA, 0);
	}
	public KW_TRUNCATE(): TerminalNode {
		return this.getToken(HiveParser.KW_TRUNCATE, 0);
	}
	public KW_BUCKET(): TerminalNode {
		return this.getToken(HiveParser.KW_BUCKET, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partitionTransformType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartitionTransformType) {
	 		listener.enterPartitionTransformType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartitionTransformType) {
	 		listener.exitPartitionTransformType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionTransformType) {
			return visitor.visitPartitionTransformType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableBucketsContext extends ParserRuleContext {
	public _bucketCols!: ColumnNameListContext;
	public _sortCols!: ColumnNameOrderListContext;
	public _num!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CLUSTERED(): TerminalNode {
		return this.getToken(HiveParser.KW_CLUSTERED, 0);
	}
	public KW_BY_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_BY);
	}
	public KW_BY(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_BY, i);
	}
	public LPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.LPAREN);
	}
	public LPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.LPAREN, i);
	}
	public RPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.RPAREN);
	}
	public RPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.RPAREN, i);
	}
	public KW_INTO(): TerminalNode {
		return this.getToken(HiveParser.KW_INTO, 0);
	}
	public KW_BUCKETS(): TerminalNode {
		return this.getToken(HiveParser.KW_BUCKETS, 0);
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
	public KW_SORTED(): TerminalNode {
		return this.getToken(HiveParser.KW_SORTED, 0);
	}
	public columnNameOrderList(): ColumnNameOrderListContext {
		return this.getTypedRuleContext(ColumnNameOrderListContext, 0) as ColumnNameOrderListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableBuckets;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableBuckets) {
	 		listener.enterTableBuckets(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableBuckets) {
	 		listener.exitTableBuckets(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableBuckets) {
			return visitor.visitTableBuckets(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableImplBucketsContext extends ParserRuleContext {
	public _num!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CLUSTERED(): TerminalNode {
		return this.getToken(HiveParser.KW_CLUSTERED, 0);
	}
	public KW_INTO(): TerminalNode {
		return this.getToken(HiveParser.KW_INTO, 0);
	}
	public KW_BUCKETS(): TerminalNode {
		return this.getToken(HiveParser.KW_BUCKETS, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableImplBuckets;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableImplBuckets) {
	 		listener.enterTableImplBuckets(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableImplBuckets) {
	 		listener.exitTableImplBuckets(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableImplBuckets) {
			return visitor.visitTableImplBuckets(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableSkewedContext extends ParserRuleContext {
	public _skewedCols!: ColumnNameListContext;
	public _skewedValues!: SkewedValueElementContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SKEWED(): TerminalNode {
		return this.getToken(HiveParser.KW_SKEWED, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
	public LPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.LPAREN);
	}
	public LPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.LPAREN, i);
	}
	public RPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.RPAREN);
	}
	public RPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.RPAREN, i);
	}
	public KW_ON(): TerminalNode {
		return this.getToken(HiveParser.KW_ON, 0);
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
	public skewedValueElement(): SkewedValueElementContext {
		return this.getTypedRuleContext(SkewedValueElementContext, 0) as SkewedValueElementContext;
	}
	public storedAsDirs(): StoredAsDirsContext {
		return this.getTypedRuleContext(StoredAsDirsContext, 0) as StoredAsDirsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableSkewed;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableSkewed) {
	 		listener.enterTableSkewed(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableSkewed) {
	 		listener.exitTableSkewed(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableSkewed) {
			return visitor.visitTableSkewed(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowFormatContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public rowFormatSerde(): RowFormatSerdeContext {
		return this.getTypedRuleContext(RowFormatSerdeContext, 0) as RowFormatSerdeContext;
	}
	public rowFormatDelimited(): RowFormatDelimitedContext {
		return this.getTypedRuleContext(RowFormatDelimitedContext, 0) as RowFormatDelimitedContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_rowFormat;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRowFormat) {
	 		listener.enterRowFormat(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRowFormat) {
	 		listener.exitRowFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRowFormat) {
			return visitor.visitRowFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordReaderContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_RECORDREADER(): TerminalNode {
		return this.getToken(HiveParser.KW_RECORDREADER, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_recordReader;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRecordReader) {
	 		listener.enterRecordReader(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRecordReader) {
	 		listener.exitRecordReader(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRecordReader) {
			return visitor.visitRecordReader(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RecordWriterContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_RECORDWRITER(): TerminalNode {
		return this.getToken(HiveParser.KW_RECORDWRITER, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_recordWriter;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRecordWriter) {
	 		listener.enterRecordWriter(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRecordWriter) {
	 		listener.exitRecordWriter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRecordWriter) {
			return visitor.visitRecordWriter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowFormatSerdeContext extends ParserRuleContext {
	public _name!: Token;
	public _serdeprops!: TablePropertiesContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ROW(): TerminalNode {
		return this.getToken(HiveParser.KW_ROW, 0);
	}
	public KW_FORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_FORMAT, 0);
	}
	public KW_SERDE(): TerminalNode {
		return this.getToken(HiveParser.KW_SERDE, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_SERDEPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
	}
	public tableProperties(): TablePropertiesContext {
		return this.getTypedRuleContext(TablePropertiesContext, 0) as TablePropertiesContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_rowFormatSerde;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRowFormatSerde) {
	 		listener.enterRowFormatSerde(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRowFormatSerde) {
	 		listener.exitRowFormatSerde(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRowFormatSerde) {
			return visitor.visitRowFormatSerde(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowFormatDelimitedContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ROW(): TerminalNode {
		return this.getToken(HiveParser.KW_ROW, 0);
	}
	public KW_FORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_FORMAT, 0);
	}
	public KW_DELIMITED(): TerminalNode {
		return this.getToken(HiveParser.KW_DELIMITED, 0);
	}
	public tableRowFormatFieldIdentifier(): TableRowFormatFieldIdentifierContext {
		return this.getTypedRuleContext(TableRowFormatFieldIdentifierContext, 0) as TableRowFormatFieldIdentifierContext;
	}
	public tableRowFormatCollItemsIdentifier(): TableRowFormatCollItemsIdentifierContext {
		return this.getTypedRuleContext(TableRowFormatCollItemsIdentifierContext, 0) as TableRowFormatCollItemsIdentifierContext;
	}
	public tableRowFormatMapKeysIdentifier(): TableRowFormatMapKeysIdentifierContext {
		return this.getTypedRuleContext(TableRowFormatMapKeysIdentifierContext, 0) as TableRowFormatMapKeysIdentifierContext;
	}
	public tableRowFormatLinesIdentifier(): TableRowFormatLinesIdentifierContext {
		return this.getTypedRuleContext(TableRowFormatLinesIdentifierContext, 0) as TableRowFormatLinesIdentifierContext;
	}
	public tableRowNullFormat(): TableRowNullFormatContext {
		return this.getTypedRuleContext(TableRowNullFormatContext, 0) as TableRowNullFormatContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_rowFormatDelimited;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRowFormatDelimited) {
	 		listener.enterRowFormatDelimited(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRowFormatDelimited) {
	 		listener.exitRowFormatDelimited(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRowFormatDelimited) {
			return visitor.visitRowFormatDelimited(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRowFormatContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public rowFormatDelimited(): RowFormatDelimitedContext {
		return this.getTypedRuleContext(RowFormatDelimitedContext, 0) as RowFormatDelimitedContext;
	}
	public rowFormatSerde(): RowFormatSerdeContext {
		return this.getTypedRuleContext(RowFormatSerdeContext, 0) as RowFormatSerdeContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableRowFormat;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableRowFormat) {
	 		listener.enterTableRowFormat(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableRowFormat) {
	 		listener.exitTableRowFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableRowFormat) {
			return visitor.visitTableRowFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablePropertiesPrefixedContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TBLPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
	}
	public tableProperties(): TablePropertiesContext {
		return this.getTypedRuleContext(TablePropertiesContext, 0) as TablePropertiesContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tablePropertiesPrefixed;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTablePropertiesPrefixed) {
	 		listener.enterTablePropertiesPrefixed(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTablePropertiesPrefixed) {
	 		listener.exitTablePropertiesPrefixed(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTablePropertiesPrefixed) {
			return visitor.visitTablePropertiesPrefixed(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablePropertiesContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public tablePropertiesList(): TablePropertiesListContext {
		return this.getTypedRuleContext(TablePropertiesListContext, 0) as TablePropertiesListContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableProperties;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableProperties) {
	 		listener.enterTableProperties(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableProperties) {
	 		listener.exitTableProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableProperties) {
			return visitor.visitTableProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablePropertiesListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public keyValueProperty_list(): KeyValuePropertyContext[] {
		return this.getTypedRuleContexts(KeyValuePropertyContext) as KeyValuePropertyContext[];
	}
	public keyValueProperty(i: number): KeyValuePropertyContext {
		return this.getTypedRuleContext(KeyValuePropertyContext, i) as KeyValuePropertyContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
	public keyProperty_list(): KeyPropertyContext[] {
		return this.getTypedRuleContexts(KeyPropertyContext) as KeyPropertyContext[];
	}
	public keyProperty(i: number): KeyPropertyContext {
		return this.getTypedRuleContext(KeyPropertyContext, i) as KeyPropertyContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tablePropertiesList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTablePropertiesList) {
	 		listener.enterTablePropertiesList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTablePropertiesList) {
	 		listener.exitTablePropertiesList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTablePropertiesList) {
			return visitor.visitTablePropertiesList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KeyValuePropertyContext extends ParserRuleContext {
	public _key!: Token;
	public _value!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUAL(): TerminalNode {
		return this.getToken(HiveParser.EQUAL, 0);
	}
	public StringLiteral_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.StringLiteral);
	}
	public StringLiteral(i: number): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_keyValueProperty;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterKeyValueProperty) {
	 		listener.enterKeyValueProperty(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitKeyValueProperty) {
	 		listener.exitKeyValueProperty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitKeyValueProperty) {
			return visitor.visitKeyValueProperty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KeyPropertyContext extends ParserRuleContext {
	public _key!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_keyProperty;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterKeyProperty) {
	 		listener.enterKeyProperty(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitKeyProperty) {
	 		listener.exitKeyProperty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitKeyProperty) {
			return visitor.visitKeyProperty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRowFormatFieldIdentifierContext extends ParserRuleContext {
	public _fldIdnt!: Token;
	public _fldEscape!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_FIELDS(): TerminalNode {
		return this.getToken(HiveParser.KW_FIELDS, 0);
	}
	public KW_TERMINATED(): TerminalNode {
		return this.getToken(HiveParser.KW_TERMINATED, 0);
	}
	public KW_BY_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_BY);
	}
	public KW_BY(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_BY, i);
	}
	public StringLiteral_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.StringLiteral);
	}
	public StringLiteral(i: number): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, i);
	}
	public KW_ESCAPED(): TerminalNode {
		return this.getToken(HiveParser.KW_ESCAPED, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableRowFormatFieldIdentifier;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableRowFormatFieldIdentifier) {
	 		listener.enterTableRowFormatFieldIdentifier(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableRowFormatFieldIdentifier) {
	 		listener.exitTableRowFormatFieldIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableRowFormatFieldIdentifier) {
			return visitor.visitTableRowFormatFieldIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRowFormatCollItemsIdentifierContext extends ParserRuleContext {
	public _collIdnt!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_COLLECTION(): TerminalNode {
		return this.getToken(HiveParser.KW_COLLECTION, 0);
	}
	public KW_ITEMS(): TerminalNode {
		return this.getToken(HiveParser.KW_ITEMS, 0);
	}
	public KW_TERMINATED(): TerminalNode {
		return this.getToken(HiveParser.KW_TERMINATED, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableRowFormatCollItemsIdentifier;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableRowFormatCollItemsIdentifier) {
	 		listener.enterTableRowFormatCollItemsIdentifier(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableRowFormatCollItemsIdentifier) {
	 		listener.exitTableRowFormatCollItemsIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableRowFormatCollItemsIdentifier) {
			return visitor.visitTableRowFormatCollItemsIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRowFormatMapKeysIdentifierContext extends ParserRuleContext {
	public _mapKeysIdnt!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_MAP(): TerminalNode {
		return this.getToken(HiveParser.KW_MAP, 0);
	}
	public KW_KEYS(): TerminalNode {
		return this.getToken(HiveParser.KW_KEYS, 0);
	}
	public KW_TERMINATED(): TerminalNode {
		return this.getToken(HiveParser.KW_TERMINATED, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableRowFormatMapKeysIdentifier;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableRowFormatMapKeysIdentifier) {
	 		listener.enterTableRowFormatMapKeysIdentifier(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableRowFormatMapKeysIdentifier) {
	 		listener.exitTableRowFormatMapKeysIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableRowFormatMapKeysIdentifier) {
			return visitor.visitTableRowFormatMapKeysIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRowFormatLinesIdentifierContext extends ParserRuleContext {
	public _linesIdnt!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_LINES(): TerminalNode {
		return this.getToken(HiveParser.KW_LINES, 0);
	}
	public KW_TERMINATED(): TerminalNode {
		return this.getToken(HiveParser.KW_TERMINATED, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableRowFormatLinesIdentifier;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableRowFormatLinesIdentifier) {
	 		listener.enterTableRowFormatLinesIdentifier(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableRowFormatLinesIdentifier) {
	 		listener.exitTableRowFormatLinesIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableRowFormatLinesIdentifier) {
			return visitor.visitTableRowFormatLinesIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableRowNullFormatContext extends ParserRuleContext {
	public _nullIdnt!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_NULL(): TerminalNode {
		return this.getToken(HiveParser.KW_NULL, 0);
	}
	public KW_DEFINED(): TerminalNode {
		return this.getToken(HiveParser.KW_DEFINED, 0);
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableRowNullFormat;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableRowNullFormat) {
	 		listener.enterTableRowNullFormat(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableRowNullFormat) {
	 		listener.exitTableRowNullFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableRowNullFormat) {
			return visitor.visitTableRowNullFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableFileFormatContext extends ParserRuleContext {
	public _inFmt!: Token;
	public _outFmt!: Token;
	public _inDriver!: Token;
	public _outDriver!: Token;
	public _storageHandler!: Token;
	public _serdeprops!: TablePropertiesContext;
	public _fileformat!: Id_Context;
	public _genericSpec!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_STORED_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_STORED);
	}
	public KW_STORED(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_STORED, i);
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public KW_INPUTFORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
	}
	public KW_OUTPUTFORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_OUTPUTFORMAT, 0);
	}
	public StringLiteral_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.StringLiteral);
	}
	public StringLiteral(i: number): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, i);
	}
	public KW_INPUTDRIVER(): TerminalNode {
		return this.getToken(HiveParser.KW_INPUTDRIVER, 0);
	}
	public KW_OUTPUTDRIVER(): TerminalNode {
		return this.getToken(HiveParser.KW_OUTPUTDRIVER, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_SERDEPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
	}
	public tableProperties(): TablePropertiesContext {
		return this.getTypedRuleContext(TablePropertiesContext, 0) as TablePropertiesContext;
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableFileFormat;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableFileFormat) {
	 		listener.enterTableFileFormat(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableFileFormat) {
	 		listener.exitTableFileFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableFileFormat) {
			return visitor.visitTableFileFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableLocationContext extends ParserRuleContext {
	public _locn!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_LOCATION(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCATION, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableLocation;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableLocation) {
	 		listener.enterTableLocation(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableLocation) {
	 		listener.exitTableLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableLocation) {
			return visitor.visitTableLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameTypeListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnNameType_list(): ColumnNameTypeContext[] {
		return this.getTypedRuleContexts(ColumnNameTypeContext) as ColumnNameTypeContext[];
	}
	public columnNameType(i: number): ColumnNameTypeContext {
		return this.getTypedRuleContext(ColumnNameTypeContext, i) as ColumnNameTypeContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameTypeList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameTypeList) {
	 		listener.enterColumnNameTypeList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameTypeList) {
	 		listener.exitColumnNameTypeList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameTypeList) {
			return visitor.visitColumnNameTypeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameTypeOrConstraintListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnNameTypeOrConstraint_list(): ColumnNameTypeOrConstraintContext[] {
		return this.getTypedRuleContexts(ColumnNameTypeOrConstraintContext) as ColumnNameTypeOrConstraintContext[];
	}
	public columnNameTypeOrConstraint(i: number): ColumnNameTypeOrConstraintContext {
		return this.getTypedRuleContext(ColumnNameTypeOrConstraintContext, i) as ColumnNameTypeOrConstraintContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameTypeOrConstraintList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameTypeOrConstraintList) {
	 		listener.enterColumnNameTypeOrConstraintList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameTypeOrConstraintList) {
	 		listener.exitColumnNameTypeOrConstraintList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameTypeOrConstraintList) {
			return visitor.visitColumnNameTypeOrConstraintList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameColonTypeListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnNameColonType_list(): ColumnNameColonTypeContext[] {
		return this.getTypedRuleContexts(ColumnNameColonTypeContext) as ColumnNameColonTypeContext[];
	}
	public columnNameColonType(i: number): ColumnNameColonTypeContext {
		return this.getTypedRuleContext(ColumnNameColonTypeContext, i) as ColumnNameColonTypeContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameColonTypeList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameColonTypeList) {
	 		listener.enterColumnNameColonTypeList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameColonTypeList) {
	 		listener.exitColumnNameColonTypeList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameColonTypeList) {
			return visitor.visitColumnNameColonTypeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnName_list(): ColumnNameContext[] {
		return this.getTypedRuleContexts(ColumnNameContext) as ColumnNameContext[];
	}
	public columnName(i: number): ColumnNameContext {
		return this.getTypedRuleContext(ColumnNameContext, i) as ColumnNameContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameList) {
	 		listener.enterColumnNameList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameList) {
	 		listener.exitColumnNameList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameList) {
			return visitor.visitColumnNameList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnName;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnName) {
	 		listener.enterColumnName(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnName) {
	 		listener.exitColumnName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnName) {
			return visitor.visitColumnName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExtColumnNameContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public DOT_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.DOT);
	}
	public DOT(i: number): TerminalNode {
		return this.getToken(HiveParser.DOT, i);
	}
	public KW_ELEM_TYPE_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_ELEM_TYPE);
	}
	public KW_ELEM_TYPE(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_ELEM_TYPE, i);
	}
	public KW_KEY_TYPE_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_KEY_TYPE);
	}
	public KW_KEY_TYPE(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_KEY_TYPE, i);
	}
	public KW_VALUE_TYPE_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_VALUE_TYPE);
	}
	public KW_VALUE_TYPE(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_VALUE_TYPE, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_extColumnName;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExtColumnName) {
	 		listener.enterExtColumnName(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExtColumnName) {
	 		listener.exitExtColumnName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExtColumnName) {
			return visitor.visitExtColumnName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameOrderListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnNameOrder_list(): ColumnNameOrderContext[] {
		return this.getTypedRuleContexts(ColumnNameOrderContext) as ColumnNameOrderContext[];
	}
	public columnNameOrder(i: number): ColumnNameOrderContext {
		return this.getTypedRuleContext(ColumnNameOrderContext, i) as ColumnNameOrderContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameOrderList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameOrderList) {
	 		listener.enterColumnNameOrderList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameOrderList) {
	 		listener.exitColumnNameOrderList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameOrderList) {
			return visitor.visitColumnNameOrderList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnParenthesesListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnParenthesesList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnParenthesesList) {
	 		listener.enterColumnParenthesesList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnParenthesesList) {
	 		listener.exitColumnParenthesesList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnParenthesesList) {
			return visitor.visitColumnParenthesesList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnableValidateSpecificationContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public enableSpecification(): EnableSpecificationContext {
		return this.getTypedRuleContext(EnableSpecificationContext, 0) as EnableSpecificationContext;
	}
	public validateSpecification(): ValidateSpecificationContext {
		return this.getTypedRuleContext(ValidateSpecificationContext, 0) as ValidateSpecificationContext;
	}
	public enforcedSpecification(): EnforcedSpecificationContext {
		return this.getTypedRuleContext(EnforcedSpecificationContext, 0) as EnforcedSpecificationContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_enableValidateSpecification;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterEnableValidateSpecification) {
	 		listener.enterEnableValidateSpecification(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitEnableValidateSpecification) {
	 		listener.exitEnableValidateSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitEnableValidateSpecification) {
			return visitor.visitEnableValidateSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnableSpecificationContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ENABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ENABLE, 0);
	}
	public KW_DISABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_DISABLE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_enableSpecification;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterEnableSpecification) {
	 		listener.enterEnableSpecification(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitEnableSpecification) {
	 		listener.exitEnableSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitEnableSpecification) {
			return visitor.visitEnableSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValidateSpecificationContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_VALIDATE(): TerminalNode {
		return this.getToken(HiveParser.KW_VALIDATE, 0);
	}
	public KW_NOVALIDATE(): TerminalNode {
		return this.getToken(HiveParser.KW_NOVALIDATE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_validateSpecification;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterValidateSpecification) {
	 		listener.enterValidateSpecification(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitValidateSpecification) {
	 		listener.exitValidateSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitValidateSpecification) {
			return visitor.visitValidateSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnforcedSpecificationContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ENFORCED(): TerminalNode {
		return this.getToken(HiveParser.KW_ENFORCED, 0);
	}
	public KW_NOT(): TerminalNode {
		return this.getToken(HiveParser.KW_NOT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_enforcedSpecification;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterEnforcedSpecification) {
	 		listener.enterEnforcedSpecification(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitEnforcedSpecification) {
	 		listener.exitEnforcedSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitEnforcedSpecification) {
			return visitor.visitEnforcedSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelySpecificationContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_RELY(): TerminalNode {
		return this.getToken(HiveParser.KW_RELY, 0);
	}
	public KW_NORELY(): TerminalNode {
		return this.getToken(HiveParser.KW_NORELY, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_relySpecification;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRelySpecification) {
	 		listener.enterRelySpecification(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRelySpecification) {
	 		listener.exitRelySpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRelySpecification) {
			return visitor.visitRelySpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateConstraintContext extends ParserRuleContext {
	public _constraintName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableLevelConstraint(): TableLevelConstraintContext {
		return this.getTypedRuleContext(TableLevelConstraintContext, 0) as TableLevelConstraintContext;
	}
	public KW_CONSTRAINT(): TerminalNode {
		return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	}
	public constraintOptsCreate(): ConstraintOptsCreateContext {
		return this.getTypedRuleContext(ConstraintOptsCreateContext, 0) as ConstraintOptsCreateContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateConstraint) {
	 		listener.enterCreateConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateConstraint) {
	 		listener.exitCreateConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateConstraint) {
			return visitor.visitCreateConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterConstraintWithNameContext extends ParserRuleContext {
	public _constraintName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CONSTRAINT(): TerminalNode {
		return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	}
	public tableLevelConstraint(): TableLevelConstraintContext {
		return this.getTypedRuleContext(TableLevelConstraintContext, 0) as TableLevelConstraintContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public constraintOptsAlter(): ConstraintOptsAlterContext {
		return this.getTypedRuleContext(ConstraintOptsAlterContext, 0) as ConstraintOptsAlterContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterConstraintWithName;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterConstraintWithName) {
	 		listener.enterAlterConstraintWithName(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterConstraintWithName) {
	 		listener.exitAlterConstraintWithName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterConstraintWithName) {
			return visitor.visitAlterConstraintWithName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableLevelConstraintContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public pkUkConstraint(): PkUkConstraintContext {
		return this.getTypedRuleContext(PkUkConstraintContext, 0) as PkUkConstraintContext;
	}
	public checkConstraint(): CheckConstraintContext {
		return this.getTypedRuleContext(CheckConstraintContext, 0) as CheckConstraintContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableLevelConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableLevelConstraint) {
	 		listener.enterTableLevelConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableLevelConstraint) {
	 		listener.exitTableLevelConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableLevelConstraint) {
			return visitor.visitTableLevelConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PkUkConstraintContext extends ParserRuleContext {
	public _pkCols!: ColumnParenthesesListContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableConstraintType(): TableConstraintTypeContext {
		return this.getTypedRuleContext(TableConstraintTypeContext, 0) as TableConstraintTypeContext;
	}
	public columnParenthesesList(): ColumnParenthesesListContext {
		return this.getTypedRuleContext(ColumnParenthesesListContext, 0) as ColumnParenthesesListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_pkUkConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPkUkConstraint) {
	 		listener.enterPkUkConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPkUkConstraint) {
	 		listener.exitPkUkConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPkUkConstraint) {
			return visitor.visitPkUkConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CheckConstraintContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CHECK(): TerminalNode {
		return this.getToken(HiveParser.KW_CHECK, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_checkConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCheckConstraint) {
	 		listener.enterCheckConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCheckConstraint) {
	 		listener.exitCheckConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCheckConstraint) {
			return visitor.visitCheckConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateForeignKeyContext extends ParserRuleContext {
	public _constraintName!: Id_Context;
	public _fkCols!: ColumnParenthesesListContext;
	public _tabName!: TableNameContext;
	public _parCols!: ColumnParenthesesListContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_FOREIGN(): TerminalNode {
		return this.getToken(HiveParser.KW_FOREIGN, 0);
	}
	public KW_KEY(): TerminalNode {
		return this.getToken(HiveParser.KW_KEY, 0);
	}
	public KW_REFERENCES(): TerminalNode {
		return this.getToken(HiveParser.KW_REFERENCES, 0);
	}
	public columnParenthesesList_list(): ColumnParenthesesListContext[] {
		return this.getTypedRuleContexts(ColumnParenthesesListContext) as ColumnParenthesesListContext[];
	}
	public columnParenthesesList(i: number): ColumnParenthesesListContext {
		return this.getTypedRuleContext(ColumnParenthesesListContext, i) as ColumnParenthesesListContext;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public KW_CONSTRAINT(): TerminalNode {
		return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	}
	public constraintOptsCreate(): ConstraintOptsCreateContext {
		return this.getTypedRuleContext(ConstraintOptsCreateContext, 0) as ConstraintOptsCreateContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createForeignKey;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateForeignKey) {
	 		listener.enterCreateForeignKey(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateForeignKey) {
	 		listener.exitCreateForeignKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateForeignKey) {
			return visitor.visitCreateForeignKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterForeignKeyWithNameContext extends ParserRuleContext {
	public _constraintName!: Id_Context;
	public _fkCols!: ColumnParenthesesListContext;
	public _tabName!: TableNameContext;
	public _parCols!: ColumnParenthesesListContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CONSTRAINT(): TerminalNode {
		return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	}
	public KW_FOREIGN(): TerminalNode {
		return this.getToken(HiveParser.KW_FOREIGN, 0);
	}
	public KW_KEY(): TerminalNode {
		return this.getToken(HiveParser.KW_KEY, 0);
	}
	public KW_REFERENCES(): TerminalNode {
		return this.getToken(HiveParser.KW_REFERENCES, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public columnParenthesesList_list(): ColumnParenthesesListContext[] {
		return this.getTypedRuleContexts(ColumnParenthesesListContext) as ColumnParenthesesListContext[];
	}
	public columnParenthesesList(i: number): ColumnParenthesesListContext {
		return this.getTypedRuleContext(ColumnParenthesesListContext, i) as ColumnParenthesesListContext;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public constraintOptsAlter(): ConstraintOptsAlterContext {
		return this.getTypedRuleContext(ConstraintOptsAlterContext, 0) as ConstraintOptsAlterContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterForeignKeyWithName;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterForeignKeyWithName) {
	 		listener.enterAlterForeignKeyWithName(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterForeignKeyWithName) {
	 		listener.exitAlterForeignKeyWithName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterForeignKeyWithName) {
			return visitor.visitAlterForeignKeyWithName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedValueElementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public skewedColumnValues(): SkewedColumnValuesContext {
		return this.getTypedRuleContext(SkewedColumnValuesContext, 0) as SkewedColumnValuesContext;
	}
	public skewedColumnValuePairList(): SkewedColumnValuePairListContext {
		return this.getTypedRuleContext(SkewedColumnValuePairListContext, 0) as SkewedColumnValuePairListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_skewedValueElement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSkewedValueElement) {
	 		listener.enterSkewedValueElement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSkewedValueElement) {
	 		listener.exitSkewedValueElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedValueElement) {
			return visitor.visitSkewedValueElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedColumnValuePairListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public skewedColumnValuePair_list(): SkewedColumnValuePairContext[] {
		return this.getTypedRuleContexts(SkewedColumnValuePairContext) as SkewedColumnValuePairContext[];
	}
	public skewedColumnValuePair(i: number): SkewedColumnValuePairContext {
		return this.getTypedRuleContext(SkewedColumnValuePairContext, i) as SkewedColumnValuePairContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_skewedColumnValuePairList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSkewedColumnValuePairList) {
	 		listener.enterSkewedColumnValuePairList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSkewedColumnValuePairList) {
	 		listener.exitSkewedColumnValuePairList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedColumnValuePairList) {
			return visitor.visitSkewedColumnValuePairList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedColumnValuePairContext extends ParserRuleContext {
	public _colValues!: SkewedColumnValuesContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public skewedColumnValues(): SkewedColumnValuesContext {
		return this.getTypedRuleContext(SkewedColumnValuesContext, 0) as SkewedColumnValuesContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_skewedColumnValuePair;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSkewedColumnValuePair) {
	 		listener.enterSkewedColumnValuePair(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSkewedColumnValuePair) {
	 		listener.exitSkewedColumnValuePair(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedColumnValuePair) {
			return visitor.visitSkewedColumnValuePair(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedColumnValuesContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public skewedColumnValue_list(): SkewedColumnValueContext[] {
		return this.getTypedRuleContexts(SkewedColumnValueContext) as SkewedColumnValueContext[];
	}
	public skewedColumnValue(i: number): SkewedColumnValueContext {
		return this.getTypedRuleContext(SkewedColumnValueContext, i) as SkewedColumnValueContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_skewedColumnValues;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSkewedColumnValues) {
	 		listener.enterSkewedColumnValues(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSkewedColumnValues) {
	 		listener.exitSkewedColumnValues(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedColumnValues) {
			return visitor.visitSkewedColumnValues(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedColumnValueContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public constant(): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, 0) as ConstantContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_skewedColumnValue;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSkewedColumnValue) {
	 		listener.enterSkewedColumnValue(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSkewedColumnValue) {
	 		listener.exitSkewedColumnValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedColumnValue) {
			return visitor.visitSkewedColumnValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedValueLocationElementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public skewedColumnValue(): SkewedColumnValueContext {
		return this.getTypedRuleContext(SkewedColumnValueContext, 0) as SkewedColumnValueContext;
	}
	public skewedColumnValuePair(): SkewedColumnValuePairContext {
		return this.getTypedRuleContext(SkewedColumnValuePairContext, 0) as SkewedColumnValuePairContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_skewedValueLocationElement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSkewedValueLocationElement) {
	 		listener.enterSkewedValueLocationElement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSkewedValueLocationElement) {
	 		listener.exitSkewedValueLocationElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedValueLocationElement) {
			return visitor.visitSkewedValueLocationElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrderSpecificationContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ASC(): TerminalNode {
		return this.getToken(HiveParser.KW_ASC, 0);
	}
	public KW_DESC(): TerminalNode {
		return this.getToken(HiveParser.KW_DESC, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_orderSpecification;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterOrderSpecification) {
	 		listener.enterOrderSpecification(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitOrderSpecification) {
	 		listener.exitOrderSpecification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitOrderSpecification) {
			return visitor.visitOrderSpecification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NullOrderingContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_NULLS(): TerminalNode {
		return this.getToken(HiveParser.KW_NULLS, 0);
	}
	public KW_FIRST(): TerminalNode {
		return this.getToken(HiveParser.KW_FIRST, 0);
	}
	public KW_LAST(): TerminalNode {
		return this.getToken(HiveParser.KW_LAST, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_nullOrdering;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterNullOrdering) {
	 		listener.enterNullOrdering(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitNullOrdering) {
	 		listener.exitNullOrdering(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitNullOrdering) {
			return visitor.visitNullOrdering(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameOrderContext extends ParserRuleContext {
	public _orderSpec!: OrderSpecificationContext;
	public _nullSpec!: NullOrderingContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public orderSpecification(): OrderSpecificationContext {
		return this.getTypedRuleContext(OrderSpecificationContext, 0) as OrderSpecificationContext;
	}
	public nullOrdering(): NullOrderingContext {
		return this.getTypedRuleContext(NullOrderingContext, 0) as NullOrderingContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameOrder;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameOrder) {
	 		listener.enterColumnNameOrder(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameOrder) {
	 		listener.exitColumnNameOrder(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameOrder) {
			return visitor.visitColumnNameOrder(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameCommentListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnNameComment_list(): ColumnNameCommentContext[] {
		return this.getTypedRuleContexts(ColumnNameCommentContext) as ColumnNameCommentContext[];
	}
	public columnNameComment(i: number): ColumnNameCommentContext {
		return this.getTypedRuleContext(ColumnNameCommentContext, i) as ColumnNameCommentContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameCommentList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameCommentList) {
	 		listener.enterColumnNameCommentList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameCommentList) {
	 		listener.exitColumnNameCommentList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameCommentList) {
			return visitor.visitColumnNameCommentList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameCommentContext extends ParserRuleContext {
	public _colName!: Id_Context;
	public _comment!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_COMMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMMENT, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameComment;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameComment) {
	 		listener.enterColumnNameComment(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameComment) {
	 		listener.exitColumnNameComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameComment) {
			return visitor.visitColumnNameComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrderSpecificationRewriteContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ASC(): TerminalNode {
		return this.getToken(HiveParser.KW_ASC, 0);
	}
	public KW_DESC(): TerminalNode {
		return this.getToken(HiveParser.KW_DESC, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_orderSpecificationRewrite;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterOrderSpecificationRewrite) {
	 		listener.enterOrderSpecificationRewrite(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitOrderSpecificationRewrite) {
	 		listener.exitOrderSpecificationRewrite(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitOrderSpecificationRewrite) {
			return visitor.visitOrderSpecificationRewrite(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnRefOrderContext extends ParserRuleContext {
	public _orderSpec!: OrderSpecificationRewriteContext;
	public _nullSpec!: NullOrderingContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public orderSpecificationRewrite(): OrderSpecificationRewriteContext {
		return this.getTypedRuleContext(OrderSpecificationRewriteContext, 0) as OrderSpecificationRewriteContext;
	}
	public nullOrdering(): NullOrderingContext {
		return this.getTypedRuleContext(NullOrderingContext, 0) as NullOrderingContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnRefOrder;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnRefOrder) {
	 		listener.enterColumnRefOrder(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnRefOrder) {
	 		listener.exitColumnRefOrder(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnRefOrder) {
			return visitor.visitColumnRefOrder(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameTypeContext extends ParserRuleContext {
	public _colName!: Id_Context;
	public _comment!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public colType(): ColTypeContext {
		return this.getTypedRuleContext(ColTypeContext, 0) as ColTypeContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_COMMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMMENT, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameType) {
	 		listener.enterColumnNameType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameType) {
	 		listener.exitColumnNameType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameType) {
			return visitor.visitColumnNameType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameTypeOrConstraintContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableConstraint(): TableConstraintContext {
		return this.getTypedRuleContext(TableConstraintContext, 0) as TableConstraintContext;
	}
	public columnNameTypeConstraint(): ColumnNameTypeConstraintContext {
		return this.getTypedRuleContext(ColumnNameTypeConstraintContext, 0) as ColumnNameTypeConstraintContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameTypeOrConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameTypeOrConstraint) {
	 		listener.enterColumnNameTypeOrConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameTypeOrConstraint) {
	 		listener.exitColumnNameTypeOrConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameTypeOrConstraint) {
			return visitor.visitColumnNameTypeOrConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableConstraintContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createForeignKey(): CreateForeignKeyContext {
		return this.getTypedRuleContext(CreateForeignKeyContext, 0) as CreateForeignKeyContext;
	}
	public createConstraint(): CreateConstraintContext {
		return this.getTypedRuleContext(CreateConstraintContext, 0) as CreateConstraintContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableConstraint) {
	 		listener.enterTableConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableConstraint) {
	 		listener.exitTableConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableConstraint) {
			return visitor.visitTableConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameTypeConstraintContext extends ParserRuleContext {
	public _colName!: Id_Context;
	public _comment!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public colType(): ColTypeContext {
		return this.getTypedRuleContext(ColTypeContext, 0) as ColTypeContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public columnConstraint(): ColumnConstraintContext {
		return this.getTypedRuleContext(ColumnConstraintContext, 0) as ColumnConstraintContext;
	}
	public KW_COMMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMMENT, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameTypeConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameTypeConstraint) {
	 		listener.enterColumnNameTypeConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameTypeConstraint) {
	 		listener.exitColumnNameTypeConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameTypeConstraint) {
			return visitor.visitColumnNameTypeConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnConstraintContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public foreignKeyConstraint(): ForeignKeyConstraintContext {
		return this.getTypedRuleContext(ForeignKeyConstraintContext, 0) as ForeignKeyConstraintContext;
	}
	public colConstraint(): ColConstraintContext {
		return this.getTypedRuleContext(ColConstraintContext, 0) as ColConstraintContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnConstraint) {
	 		listener.enterColumnConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnConstraint) {
	 		listener.exitColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnConstraint) {
			return visitor.visitColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ForeignKeyConstraintContext extends ParserRuleContext {
	public _constraintName!: Id_Context;
	public _tabName!: TableNameContext;
	public _colName!: ColumnNameContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_REFERENCES(): TerminalNode {
		return this.getToken(HiveParser.KW_REFERENCES, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public columnName(): ColumnNameContext {
		return this.getTypedRuleContext(ColumnNameContext, 0) as ColumnNameContext;
	}
	public KW_CONSTRAINT(): TerminalNode {
		return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	}
	public constraintOptsCreate(): ConstraintOptsCreateContext {
		return this.getTypedRuleContext(ConstraintOptsCreateContext, 0) as ConstraintOptsCreateContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_foreignKeyConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterForeignKeyConstraint) {
	 		listener.enterForeignKeyConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitForeignKeyConstraint) {
	 		listener.exitForeignKeyConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitForeignKeyConstraint) {
			return visitor.visitForeignKeyConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColConstraintContext extends ParserRuleContext {
	public _constraintName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnConstraintType(): ColumnConstraintTypeContext {
		return this.getTypedRuleContext(ColumnConstraintTypeContext, 0) as ColumnConstraintTypeContext;
	}
	public KW_CONSTRAINT(): TerminalNode {
		return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	}
	public constraintOptsCreate(): ConstraintOptsCreateContext {
		return this.getTypedRuleContext(ConstraintOptsCreateContext, 0) as ConstraintOptsCreateContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_colConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColConstraint) {
	 		listener.enterColConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColConstraint) {
	 		listener.exitColConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColConstraint) {
			return visitor.visitColConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterColumnConstraintContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterForeignKeyConstraint(): AlterForeignKeyConstraintContext {
		return this.getTypedRuleContext(AlterForeignKeyConstraintContext, 0) as AlterForeignKeyConstraintContext;
	}
	public alterColConstraint(): AlterColConstraintContext {
		return this.getTypedRuleContext(AlterColConstraintContext, 0) as AlterColConstraintContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterColumnConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterColumnConstraint) {
	 		listener.enterAlterColumnConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterColumnConstraint) {
	 		listener.exitAlterColumnConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterColumnConstraint) {
			return visitor.visitAlterColumnConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterForeignKeyConstraintContext extends ParserRuleContext {
	public _constraintName!: Id_Context;
	public _tabName!: TableNameContext;
	public _colName!: ColumnNameContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_REFERENCES(): TerminalNode {
		return this.getToken(HiveParser.KW_REFERENCES, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public columnName(): ColumnNameContext {
		return this.getTypedRuleContext(ColumnNameContext, 0) as ColumnNameContext;
	}
	public KW_CONSTRAINT(): TerminalNode {
		return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	}
	public constraintOptsAlter(): ConstraintOptsAlterContext {
		return this.getTypedRuleContext(ConstraintOptsAlterContext, 0) as ConstraintOptsAlterContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterForeignKeyConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterForeignKeyConstraint) {
	 		listener.enterAlterForeignKeyConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterForeignKeyConstraint) {
	 		listener.exitAlterForeignKeyConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterForeignKeyConstraint) {
			return visitor.visitAlterForeignKeyConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterColConstraintContext extends ParserRuleContext {
	public _constraintName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnConstraintType(): ColumnConstraintTypeContext {
		return this.getTypedRuleContext(ColumnConstraintTypeContext, 0) as ColumnConstraintTypeContext;
	}
	public KW_CONSTRAINT(): TerminalNode {
		return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	}
	public constraintOptsAlter(): ConstraintOptsAlterContext {
		return this.getTypedRuleContext(ConstraintOptsAlterContext, 0) as ConstraintOptsAlterContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterColConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterColConstraint) {
	 		listener.enterAlterColConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterColConstraint) {
	 		listener.exitAlterColConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterColConstraint) {
			return visitor.visitAlterColConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnConstraintTypeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_NOT(): TerminalNode {
		return this.getToken(HiveParser.KW_NOT, 0);
	}
	public KW_NULL(): TerminalNode {
		return this.getToken(HiveParser.KW_NULL, 0);
	}
	public KW_DEFAULT(): TerminalNode {
		return this.getToken(HiveParser.KW_DEFAULT, 0);
	}
	public defaultVal(): DefaultValContext {
		return this.getTypedRuleContext(DefaultValContext, 0) as DefaultValContext;
	}
	public checkConstraint(): CheckConstraintContext {
		return this.getTypedRuleContext(CheckConstraintContext, 0) as CheckConstraintContext;
	}
	public tableConstraintType(): TableConstraintTypeContext {
		return this.getTypedRuleContext(TableConstraintTypeContext, 0) as TableConstraintTypeContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnConstraintType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnConstraintType) {
	 		listener.enterColumnConstraintType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnConstraintType) {
	 		listener.exitColumnConstraintType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnConstraintType) {
			return visitor.visitColumnConstraintType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefaultValContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public constant(): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, 0) as ConstantContext;
	}
	public function_(): Function_Context {
		return this.getTypedRuleContext(Function_Context, 0) as Function_Context;
	}
	public castExpression(): CastExpressionContext {
		return this.getTypedRuleContext(CastExpressionContext, 0) as CastExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_defaultVal;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDefaultVal) {
	 		listener.enterDefaultVal(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDefaultVal) {
	 		listener.exitDefaultVal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDefaultVal) {
			return visitor.visitDefaultVal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableConstraintTypeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_PRIMARY(): TerminalNode {
		return this.getToken(HiveParser.KW_PRIMARY, 0);
	}
	public KW_KEY(): TerminalNode {
		return this.getToken(HiveParser.KW_KEY, 0);
	}
	public KW_UNIQUE(): TerminalNode {
		return this.getToken(HiveParser.KW_UNIQUE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableConstraintType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableConstraintType) {
	 		listener.enterTableConstraintType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableConstraintType) {
	 		listener.exitTableConstraintType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableConstraintType) {
			return visitor.visitTableConstraintType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstraintOptsCreateContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public enableValidateSpecification(): EnableValidateSpecificationContext {
		return this.getTypedRuleContext(EnableValidateSpecificationContext, 0) as EnableValidateSpecificationContext;
	}
	public relySpecification(): RelySpecificationContext {
		return this.getTypedRuleContext(RelySpecificationContext, 0) as RelySpecificationContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_constraintOptsCreate;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterConstraintOptsCreate) {
	 		listener.enterConstraintOptsCreate(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitConstraintOptsCreate) {
	 		listener.exitConstraintOptsCreate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitConstraintOptsCreate) {
			return visitor.visitConstraintOptsCreate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstraintOptsAlterContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public enableValidateSpecification(): EnableValidateSpecificationContext {
		return this.getTypedRuleContext(EnableValidateSpecificationContext, 0) as EnableValidateSpecificationContext;
	}
	public relySpecification(): RelySpecificationContext {
		return this.getTypedRuleContext(RelySpecificationContext, 0) as RelySpecificationContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_constraintOptsAlter;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterConstraintOptsAlter) {
	 		listener.enterConstraintOptsAlter(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitConstraintOptsAlter) {
	 		listener.exitConstraintOptsAlter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitConstraintOptsAlter) {
			return visitor.visitConstraintOptsAlter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnNameColonTypeContext extends ParserRuleContext {
	public _colName!: Id_Context;
	public _comment!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COLON(): TerminalNode {
		return this.getToken(HiveParser.COLON, 0);
	}
	public colType(): ColTypeContext {
		return this.getTypedRuleContext(ColTypeContext, 0) as ColTypeContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_COMMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMMENT, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnNameColonType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnNameColonType) {
	 		listener.enterColumnNameColonType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnNameColonType) {
	 		listener.exitColumnNameColonType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnNameColonType) {
			return visitor.visitColumnNameColonType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColTypeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public type_(): TypeContext {
		return this.getTypedRuleContext(TypeContext, 0) as TypeContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_colType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColType) {
	 		listener.enterColType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColType) {
	 		listener.exitColType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColType) {
			return visitor.visitColType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColTypeListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public colType_list(): ColTypeContext[] {
		return this.getTypedRuleContexts(ColTypeContext) as ColTypeContext[];
	}
	public colType(i: number): ColTypeContext {
		return this.getTypedRuleContext(ColTypeContext, i) as ColTypeContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_colTypeList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColTypeList) {
	 		listener.enterColTypeList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColTypeList) {
	 		listener.exitColTypeList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColTypeList) {
			return visitor.visitColTypeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TypeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public primitiveType(): PrimitiveTypeContext {
		return this.getTypedRuleContext(PrimitiveTypeContext, 0) as PrimitiveTypeContext;
	}
	public listType(): ListTypeContext {
		return this.getTypedRuleContext(ListTypeContext, 0) as ListTypeContext;
	}
	public structType(): StructTypeContext {
		return this.getTypedRuleContext(StructTypeContext, 0) as StructTypeContext;
	}
	public mapType(): MapTypeContext {
		return this.getTypedRuleContext(MapTypeContext, 0) as MapTypeContext;
	}
	public unionType(): UnionTypeContext {
		return this.getTypedRuleContext(UnionTypeContext, 0) as UnionTypeContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_type;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterType) {
	 		listener.enterType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitType) {
	 		listener.exitType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitType) {
			return visitor.visitType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrimitiveTypeContext extends ParserRuleContext {
	public _prec!: Token;
	public _scale!: Token;
	public _length!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TINYINT(): TerminalNode {
		return this.getToken(HiveParser.KW_TINYINT, 0);
	}
	public KW_SMALLINT(): TerminalNode {
		return this.getToken(HiveParser.KW_SMALLINT, 0);
	}
	public KW_INT(): TerminalNode {
		return this.getToken(HiveParser.KW_INT, 0);
	}
	public KW_BIGINT(): TerminalNode {
		return this.getToken(HiveParser.KW_BIGINT, 0);
	}
	public KW_BOOLEAN(): TerminalNode {
		return this.getToken(HiveParser.KW_BOOLEAN, 0);
	}
	public KW_FLOAT(): TerminalNode {
		return this.getToken(HiveParser.KW_FLOAT, 0);
	}
	public KW_REAL(): TerminalNode {
		return this.getToken(HiveParser.KW_REAL, 0);
	}
	public KW_DOUBLE(): TerminalNode {
		return this.getToken(HiveParser.KW_DOUBLE, 0);
	}
	public KW_PRECISION(): TerminalNode {
		return this.getToken(HiveParser.KW_PRECISION, 0);
	}
	public KW_DATE(): TerminalNode {
		return this.getToken(HiveParser.KW_DATE, 0);
	}
	public KW_DATETIME(): TerminalNode {
		return this.getToken(HiveParser.KW_DATETIME, 0);
	}
	public KW_TIMESTAMP(): TerminalNode {
		return this.getToken(HiveParser.KW_TIMESTAMP, 0);
	}
	public KW_TIMESTAMPLOCALTZ(): TerminalNode {
		return this.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0);
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_LOCAL(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCAL, 0);
	}
	public KW_TIME(): TerminalNode {
		return this.getToken(HiveParser.KW_TIME, 0);
	}
	public KW_ZONE(): TerminalNode {
		return this.getToken(HiveParser.KW_ZONE, 0);
	}
	public KW_STRING(): TerminalNode {
		return this.getToken(HiveParser.KW_STRING, 0);
	}
	public KW_BINARY(): TerminalNode {
		return this.getToken(HiveParser.KW_BINARY, 0);
	}
	public KW_DECIMAL(): TerminalNode {
		return this.getToken(HiveParser.KW_DECIMAL, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public Number_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.Number);
	}
	public Number(i: number): TerminalNode {
		return this.getToken(HiveParser.Number, i);
	}
	public COMMA(): TerminalNode {
		return this.getToken(HiveParser.COMMA, 0);
	}
	public KW_VARCHAR(): TerminalNode {
		return this.getToken(HiveParser.KW_VARCHAR, 0);
	}
	public KW_CHAR(): TerminalNode {
		return this.getToken(HiveParser.KW_CHAR, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_primitiveType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrimitiveType) {
	 		listener.enterPrimitiveType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrimitiveType) {
	 		listener.exitPrimitiveType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrimitiveType) {
			return visitor.visitPrimitiveType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ListTypeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ARRAY(): TerminalNode {
		return this.getToken(HiveParser.KW_ARRAY, 0);
	}
	public LESSTHAN(): TerminalNode {
		return this.getToken(HiveParser.LESSTHAN, 0);
	}
	public type_(): TypeContext {
		return this.getTypedRuleContext(TypeContext, 0) as TypeContext;
	}
	public GREATERTHAN(): TerminalNode {
		return this.getToken(HiveParser.GREATERTHAN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_listType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterListType) {
	 		listener.enterListType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitListType) {
	 		listener.exitListType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitListType) {
			return visitor.visitListType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StructTypeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_STRUCT(): TerminalNode {
		return this.getToken(HiveParser.KW_STRUCT, 0);
	}
	public LESSTHAN(): TerminalNode {
		return this.getToken(HiveParser.LESSTHAN, 0);
	}
	public columnNameColonTypeList(): ColumnNameColonTypeListContext {
		return this.getTypedRuleContext(ColumnNameColonTypeListContext, 0) as ColumnNameColonTypeListContext;
	}
	public GREATERTHAN(): TerminalNode {
		return this.getToken(HiveParser.GREATERTHAN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_structType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterStructType) {
	 		listener.enterStructType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitStructType) {
	 		listener.exitStructType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitStructType) {
			return visitor.visitStructType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MapTypeContext extends ParserRuleContext {
	public _left!: PrimitiveTypeContext;
	public _right!: TypeContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_MAP(): TerminalNode {
		return this.getToken(HiveParser.KW_MAP, 0);
	}
	public LESSTHAN(): TerminalNode {
		return this.getToken(HiveParser.LESSTHAN, 0);
	}
	public COMMA(): TerminalNode {
		return this.getToken(HiveParser.COMMA, 0);
	}
	public GREATERTHAN(): TerminalNode {
		return this.getToken(HiveParser.GREATERTHAN, 0);
	}
	public primitiveType(): PrimitiveTypeContext {
		return this.getTypedRuleContext(PrimitiveTypeContext, 0) as PrimitiveTypeContext;
	}
	public type_(): TypeContext {
		return this.getTypedRuleContext(TypeContext, 0) as TypeContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_mapType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterMapType) {
	 		listener.enterMapType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitMapType) {
	 		listener.exitMapType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitMapType) {
			return visitor.visitMapType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnionTypeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UNIONTYPE(): TerminalNode {
		return this.getToken(HiveParser.KW_UNIONTYPE, 0);
	}
	public LESSTHAN(): TerminalNode {
		return this.getToken(HiveParser.LESSTHAN, 0);
	}
	public colTypeList(): ColTypeListContext {
		return this.getTypedRuleContext(ColTypeListContext, 0) as ColTypeListContext;
	}
	public GREATERTHAN(): TerminalNode {
		return this.getToken(HiveParser.GREATERTHAN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_unionType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterUnionType) {
	 		listener.enterUnionType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitUnionType) {
	 		listener.exitUnionType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUnionType) {
			return visitor.visitUnionType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UNION(): TerminalNode {
		return this.getToken(HiveParser.KW_UNION, 0);
	}
	public KW_INTERSECT(): TerminalNode {
		return this.getToken(HiveParser.KW_INTERSECT, 0);
	}
	public KW_EXCEPT(): TerminalNode {
		return this.getToken(HiveParser.KW_EXCEPT, 0);
	}
	public KW_MINUS(): TerminalNode {
		return this.getToken(HiveParser.KW_MINUS, 0);
	}
	public KW_ALL(): TerminalNode {
		return this.getToken(HiveParser.KW_ALL, 0);
	}
	public KW_DISTINCT(): TerminalNode {
		return this.getToken(HiveParser.KW_DISTINCT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_setOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSetOperator) {
	 		listener.enterSetOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSetOperator) {
	 		listener.exitSetOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSetOperator) {
			return visitor.visitSetOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryStatementExpressionContext extends ParserRuleContext {
	public _w!: WithClauseContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public queryStatementExpressionBody(): QueryStatementExpressionBodyContext {
		return this.getTypedRuleContext(QueryStatementExpressionBodyContext, 0) as QueryStatementExpressionBodyContext;
	}
	public withClause(): WithClauseContext {
		return this.getTypedRuleContext(WithClauseContext, 0) as WithClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_queryStatementExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterQueryStatementExpression) {
	 		listener.enterQueryStatementExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitQueryStatementExpression) {
	 		listener.exitQueryStatementExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitQueryStatementExpression) {
			return visitor.visitQueryStatementExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QueryStatementExpressionBodyContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fromStatement(): FromStatementContext {
		return this.getTypedRuleContext(FromStatementContext, 0) as FromStatementContext;
	}
	public regularBody(): RegularBodyContext {
		return this.getTypedRuleContext(RegularBodyContext, 0) as RegularBodyContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_queryStatementExpressionBody;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterQueryStatementExpressionBody) {
	 		listener.enterQueryStatementExpressionBody(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitQueryStatementExpressionBody) {
	 		listener.exitQueryStatementExpressionBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitQueryStatementExpressionBody) {
			return visitor.visitQueryStatementExpressionBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public cteStatement_list(): CteStatementContext[] {
		return this.getTypedRuleContexts(CteStatementContext) as CteStatementContext[];
	}
	public cteStatement(i: number): CteStatementContext {
		return this.getTypedRuleContext(CteStatementContext, i) as CteStatementContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_withClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWithClause) {
	 		listener.enterWithClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWithClause) {
	 		listener.exitWithClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWithClause) {
			return visitor.visitWithClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CteStatementContext extends ParserRuleContext {
	public _colAliases!: ColumnNameListContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public LPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.LPAREN);
	}
	public LPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.LPAREN, i);
	}
	public queryStatementExpression(): QueryStatementExpressionContext {
		return this.getTypedRuleContext(QueryStatementExpressionContext, 0) as QueryStatementExpressionContext;
	}
	public RPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.RPAREN);
	}
	public RPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.RPAREN, i);
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_cteStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCteStatement) {
	 		listener.enterCteStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCteStatement) {
	 		listener.exitCteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCteStatement) {
			return visitor.visitCteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FromStatementContext extends ParserRuleContext {
	public _u!: SetOperatorContext;
	public _r!: SingleFromStatementContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public singleFromStatement_list(): SingleFromStatementContext[] {
		return this.getTypedRuleContexts(SingleFromStatementContext) as SingleFromStatementContext[];
	}
	public singleFromStatement(i: number): SingleFromStatementContext {
		return this.getTypedRuleContext(SingleFromStatementContext, i) as SingleFromStatementContext;
	}
	public setOperator_list(): SetOperatorContext[] {
		return this.getTypedRuleContexts(SetOperatorContext) as SetOperatorContext[];
	}
	public setOperator(i: number): SetOperatorContext {
		return this.getTypedRuleContext(SetOperatorContext, i) as SetOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_fromStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterFromStatement) {
	 		listener.enterFromStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitFromStatement) {
	 		listener.exitFromStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFromStatement) {
			return visitor.visitFromStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleFromStatementContext extends ParserRuleContext {
	public _body!: BodyContext;
	public _b: BodyContext[] = [];
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public fromClause(): FromClauseContext {
		return this.getTypedRuleContext(FromClauseContext, 0) as FromClauseContext;
	}
	public body_list(): BodyContext[] {
		return this.getTypedRuleContexts(BodyContext) as BodyContext[];
	}
	public body(i: number): BodyContext {
		return this.getTypedRuleContext(BodyContext, i) as BodyContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_singleFromStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSingleFromStatement) {
	 		listener.enterSingleFromStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSingleFromStatement) {
	 		listener.exitSingleFromStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSingleFromStatement) {
			return visitor.visitSingleFromStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RegularBodyContext extends ParserRuleContext {
	public _i!: InsertClauseContext;
	public _s!: SelectStatementContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertClause(): InsertClauseContext {
		return this.getTypedRuleContext(InsertClauseContext, 0) as InsertClauseContext;
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_regularBody;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRegularBody) {
	 		listener.enterRegularBody(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRegularBody) {
	 		listener.exitRegularBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRegularBody) {
			return visitor.visitRegularBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AtomSelectStatementContext extends ParserRuleContext {
	public _s!: SelectClauseContext;
	public _f!: FromClauseContext;
	public _w!: WhereClauseContext;
	public _g!: GroupByClauseContext;
	public _h!: HavingClauseContext;
	public _win!: Window_clauseContext;
	public _q!: QualifyClauseContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectClause(): SelectClauseContext {
		return this.getTypedRuleContext(SelectClauseContext, 0) as SelectClauseContext;
	}
	public fromClause(): FromClauseContext {
		return this.getTypedRuleContext(FromClauseContext, 0) as FromClauseContext;
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
	public groupByClause(): GroupByClauseContext {
		return this.getTypedRuleContext(GroupByClauseContext, 0) as GroupByClauseContext;
	}
	public havingClause(): HavingClauseContext {
		return this.getTypedRuleContext(HavingClauseContext, 0) as HavingClauseContext;
	}
	public window_clause(): Window_clauseContext {
		return this.getTypedRuleContext(Window_clauseContext, 0) as Window_clauseContext;
	}
	public qualifyClause(): QualifyClauseContext {
		return this.getTypedRuleContext(QualifyClauseContext, 0) as QualifyClauseContext;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public valuesSource(): ValuesSourceContext {
		return this.getTypedRuleContext(ValuesSourceContext, 0) as ValuesSourceContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_atomSelectStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAtomSelectStatement) {
	 		listener.enterAtomSelectStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAtomSelectStatement) {
	 		listener.exitAtomSelectStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAtomSelectStatement) {
			return visitor.visitAtomSelectStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectStatementContext extends ParserRuleContext {
	public _a!: AtomSelectStatementContext;
	public _set_!: SetOpSelectStatementContext;
	public _o!: OrderByClauseContext;
	public _c!: ClusterByClauseContext;
	public _d!: DistributeByClauseContext;
	public _sort!: SortByClauseContext;
	public _l!: LimitClauseContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public atomSelectStatement(): AtomSelectStatementContext {
		return this.getTypedRuleContext(AtomSelectStatementContext, 0) as AtomSelectStatementContext;
	}
	public setOpSelectStatement(): SetOpSelectStatementContext {
		return this.getTypedRuleContext(SetOpSelectStatementContext, 0) as SetOpSelectStatementContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public clusterByClause(): ClusterByClauseContext {
		return this.getTypedRuleContext(ClusterByClauseContext, 0) as ClusterByClauseContext;
	}
	public distributeByClause(): DistributeByClauseContext {
		return this.getTypedRuleContext(DistributeByClauseContext, 0) as DistributeByClauseContext;
	}
	public sortByClause(): SortByClauseContext {
		return this.getTypedRuleContext(SortByClauseContext, 0) as SortByClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_selectStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSelectStatement) {
	 		listener.enterSelectStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSelectStatement) {
	 		listener.exitSelectStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectStatement) {
			return visitor.visitSelectStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetOpSelectStatementContext extends ParserRuleContext {
	public _u!: SetOperatorContext;
	public _b!: AtomSelectStatementContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public setOperator_list(): SetOperatorContext[] {
		return this.getTypedRuleContexts(SetOperatorContext) as SetOperatorContext[];
	}
	public setOperator(i: number): SetOperatorContext {
		return this.getTypedRuleContext(SetOperatorContext, i) as SetOperatorContext;
	}
	public atomSelectStatement_list(): AtomSelectStatementContext[] {
		return this.getTypedRuleContexts(AtomSelectStatementContext) as AtomSelectStatementContext[];
	}
	public atomSelectStatement(i: number): AtomSelectStatementContext {
		return this.getTypedRuleContext(AtomSelectStatementContext, i) as AtomSelectStatementContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_setOpSelectStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSetOpSelectStatement) {
	 		listener.enterSetOpSelectStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSetOpSelectStatement) {
	 		listener.exitSetOpSelectStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSetOpSelectStatement) {
			return visitor.visitSetOpSelectStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectStatementWithCTEContext extends ParserRuleContext {
	public _w!: WithClauseContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public withClause(): WithClauseContext {
		return this.getTypedRuleContext(WithClauseContext, 0) as WithClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_selectStatementWithCTE;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSelectStatementWithCTE) {
	 		listener.enterSelectStatementWithCTE(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSelectStatementWithCTE) {
	 		listener.exitSelectStatementWithCTE(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectStatementWithCTE) {
			return visitor.visitSelectStatementWithCTE(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BodyContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public insertClause(): InsertClauseContext {
		return this.getTypedRuleContext(InsertClauseContext, 0) as InsertClauseContext;
	}
	public selectClause(): SelectClauseContext {
		return this.getTypedRuleContext(SelectClauseContext, 0) as SelectClauseContext;
	}
	public lateralView(): LateralViewContext {
		return this.getTypedRuleContext(LateralViewContext, 0) as LateralViewContext;
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
	public groupByClause(): GroupByClauseContext {
		return this.getTypedRuleContext(GroupByClauseContext, 0) as GroupByClauseContext;
	}
	public havingClause(): HavingClauseContext {
		return this.getTypedRuleContext(HavingClauseContext, 0) as HavingClauseContext;
	}
	public window_clause(): Window_clauseContext {
		return this.getTypedRuleContext(Window_clauseContext, 0) as Window_clauseContext;
	}
	public qualifyClause(): QualifyClauseContext {
		return this.getTypedRuleContext(QualifyClauseContext, 0) as QualifyClauseContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public clusterByClause(): ClusterByClauseContext {
		return this.getTypedRuleContext(ClusterByClauseContext, 0) as ClusterByClauseContext;
	}
	public distributeByClause(): DistributeByClauseContext {
		return this.getTypedRuleContext(DistributeByClauseContext, 0) as DistributeByClauseContext;
	}
	public sortByClause(): SortByClauseContext {
		return this.getTypedRuleContext(SortByClauseContext, 0) as SortByClauseContext;
	}
	public limitClause(): LimitClauseContext {
		return this.getTypedRuleContext(LimitClauseContext, 0) as LimitClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_body;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterBody) {
	 		listener.enterBody(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitBody) {
	 		listener.exitBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitBody) {
			return visitor.visitBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InsertClauseContext extends ParserRuleContext {
	public _targetCols!: ColumnNameListContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_INSERT(): TerminalNode {
		return this.getToken(HiveParser.KW_INSERT, 0);
	}
	public KW_OVERWRITE(): TerminalNode {
		return this.getToken(HiveParser.KW_OVERWRITE, 0);
	}
	public destination(): DestinationContext {
		return this.getTypedRuleContext(DestinationContext, 0) as DestinationContext;
	}
	public KW_INTO(): TerminalNode {
		return this.getToken(HiveParser.KW_INTO, 0);
	}
	public tableOrPartition(): TableOrPartitionContext {
		return this.getTypedRuleContext(TableOrPartitionContext, 0) as TableOrPartitionContext;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public columnNameList(): ColumnNameListContext {
		return this.getTypedRuleContext(ColumnNameListContext, 0) as ColumnNameListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_insertClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterInsertClause) {
	 		listener.enterInsertClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitInsertClause) {
	 		listener.exitInsertClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitInsertClause) {
			return visitor.visitInsertClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DestinationContext extends ParserRuleContext {
	public _local!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DIRECTORY(): TerminalNode {
		return this.getToken(HiveParser.KW_DIRECTORY, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public tableRowFormat(): TableRowFormatContext {
		return this.getTypedRuleContext(TableRowFormatContext, 0) as TableRowFormatContext;
	}
	public tableFileFormat(): TableFileFormatContext {
		return this.getTypedRuleContext(TableFileFormatContext, 0) as TableFileFormatContext;
	}
	public KW_LOCAL(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCAL, 0);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public tableOrPartition(): TableOrPartitionContext {
		return this.getTypedRuleContext(TableOrPartitionContext, 0) as TableOrPartitionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_destination;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDestination) {
	 		listener.enterDestination(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDestination) {
	 		listener.exitDestination(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDestination) {
			return visitor.visitDestination(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LimitClauseContext extends ParserRuleContext {
	public _offset!: Token;
	public _num!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_LIMIT(): TerminalNode {
		return this.getToken(HiveParser.KW_LIMIT, 0);
	}
	public KW_OFFSET(): TerminalNode {
		return this.getToken(HiveParser.KW_OFFSET, 0);
	}
	public Number_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.Number);
	}
	public Number(i: number): TerminalNode {
		return this.getToken(HiveParser.Number, i);
	}
	public COMMA(): TerminalNode {
		return this.getToken(HiveParser.COMMA, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_limitClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterLimitClause) {
	 		listener.enterLimitClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitLimitClause) {
	 		listener.exitLimitClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLimitClause) {
			return visitor.visitLimitClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeleteStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DELETE(): TerminalNode {
		return this.getToken(HiveParser.KW_DELETE, 0);
	}
	public KW_FROM(): TerminalNode {
		return this.getToken(HiveParser.KW_FROM, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_deleteStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDeleteStatement) {
	 		listener.enterDeleteStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDeleteStatement) {
	 		listener.exitDeleteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDeleteStatement) {
			return visitor.visitDeleteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnAssignmentClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableOrColumn(): TableOrColumnContext {
		return this.getTypedRuleContext(TableOrColumnContext, 0) as TableOrColumnContext;
	}
	public EQUAL(): TerminalNode {
		return this.getToken(HiveParser.EQUAL, 0);
	}
	public precedencePlusExpressionOrDefault(): PrecedencePlusExpressionOrDefaultContext {
		return this.getTypedRuleContext(PrecedencePlusExpressionOrDefaultContext, 0) as PrecedencePlusExpressionOrDefaultContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnAssignmentClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnAssignmentClause) {
	 		listener.enterColumnAssignmentClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnAssignmentClause) {
	 		listener.exitColumnAssignmentClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnAssignmentClause) {
			return visitor.visitColumnAssignmentClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedencePlusExpressionOrDefaultContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public defaultValue(): DefaultValueContext {
		return this.getTypedRuleContext(DefaultValueContext, 0) as DefaultValueContext;
	}
	public precedencePlusExpression(): PrecedencePlusExpressionContext {
		return this.getTypedRuleContext(PrecedencePlusExpressionContext, 0) as PrecedencePlusExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedencePlusExpressionOrDefault;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedencePlusExpressionOrDefault) {
	 		listener.enterPrecedencePlusExpressionOrDefault(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedencePlusExpressionOrDefault) {
	 		listener.exitPrecedencePlusExpressionOrDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedencePlusExpressionOrDefault) {
			return visitor.visitPrecedencePlusExpressionOrDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetColumnsClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public columnAssignmentClause_list(): ColumnAssignmentClauseContext[] {
		return this.getTypedRuleContexts(ColumnAssignmentClauseContext) as ColumnAssignmentClauseContext[];
	}
	public columnAssignmentClause(i: number): ColumnAssignmentClauseContext {
		return this.getTypedRuleContext(ColumnAssignmentClauseContext, i) as ColumnAssignmentClauseContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_setColumnsClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSetColumnsClause) {
	 		listener.enterSetColumnsClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSetColumnsClause) {
	 		listener.exitSetColumnsClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSetColumnsClause) {
			return visitor.visitSetColumnsClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UpdateStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UPDATE(): TerminalNode {
		return this.getToken(HiveParser.KW_UPDATE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public setColumnsClause(): SetColumnsClauseContext {
		return this.getTypedRuleContext(SetColumnsClauseContext, 0) as SetColumnsClauseContext;
	}
	public whereClause(): WhereClauseContext {
		return this.getTypedRuleContext(WhereClauseContext, 0) as WhereClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_updateStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterUpdateStatement) {
	 		listener.enterUpdateStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitUpdateStatement) {
	 		listener.exitUpdateStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUpdateStatement) {
			return visitor.visitUpdateStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SqlTransactionStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public startTransactionStatement(): StartTransactionStatementContext {
		return this.getTypedRuleContext(StartTransactionStatementContext, 0) as StartTransactionStatementContext;
	}
	public commitStatement(): CommitStatementContext {
		return this.getTypedRuleContext(CommitStatementContext, 0) as CommitStatementContext;
	}
	public rollbackStatement(): RollbackStatementContext {
		return this.getTypedRuleContext(RollbackStatementContext, 0) as RollbackStatementContext;
	}
	public setAutoCommitStatement(): SetAutoCommitStatementContext {
		return this.getTypedRuleContext(SetAutoCommitStatementContext, 0) as SetAutoCommitStatementContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_sqlTransactionStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSqlTransactionStatement) {
	 		listener.enterSqlTransactionStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSqlTransactionStatement) {
	 		listener.exitSqlTransactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSqlTransactionStatement) {
			return visitor.visitSqlTransactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StartTransactionStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_START(): TerminalNode {
		return this.getToken(HiveParser.KW_START, 0);
	}
	public KW_TRANSACTION(): TerminalNode {
		return this.getToken(HiveParser.KW_TRANSACTION, 0);
	}
	public transactionMode_list(): TransactionModeContext[] {
		return this.getTypedRuleContexts(TransactionModeContext) as TransactionModeContext[];
	}
	public transactionMode(i: number): TransactionModeContext {
		return this.getTypedRuleContext(TransactionModeContext, i) as TransactionModeContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_startTransactionStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterStartTransactionStatement) {
	 		listener.enterStartTransactionStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitStartTransactionStatement) {
	 		listener.exitStartTransactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitStartTransactionStatement) {
			return visitor.visitStartTransactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionModeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public isolationLevel(): IsolationLevelContext {
		return this.getTypedRuleContext(IsolationLevelContext, 0) as IsolationLevelContext;
	}
	public transactionAccessMode(): TransactionAccessModeContext {
		return this.getTypedRuleContext(TransactionAccessModeContext, 0) as TransactionAccessModeContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_transactionMode;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTransactionMode) {
	 		listener.enterTransactionMode(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTransactionMode) {
	 		listener.exitTransactionMode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTransactionMode) {
			return visitor.visitTransactionMode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionAccessModeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_READ(): TerminalNode {
		return this.getToken(HiveParser.KW_READ, 0);
	}
	public KW_ONLY(): TerminalNode {
		return this.getToken(HiveParser.KW_ONLY, 0);
	}
	public KW_WRITE(): TerminalNode {
		return this.getToken(HiveParser.KW_WRITE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_transactionAccessMode;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTransactionAccessMode) {
	 		listener.enterTransactionAccessMode(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTransactionAccessMode) {
	 		listener.exitTransactionAccessMode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTransactionAccessMode) {
			return visitor.visitTransactionAccessMode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IsolationLevelContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ISOLATION(): TerminalNode {
		return this.getToken(HiveParser.KW_ISOLATION, 0);
	}
	public KW_LEVEL(): TerminalNode {
		return this.getToken(HiveParser.KW_LEVEL, 0);
	}
	public levelOfIsolation(): LevelOfIsolationContext {
		return this.getTypedRuleContext(LevelOfIsolationContext, 0) as LevelOfIsolationContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_isolationLevel;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterIsolationLevel) {
	 		listener.enterIsolationLevel(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitIsolationLevel) {
	 		listener.exitIsolationLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIsolationLevel) {
			return visitor.visitIsolationLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LevelOfIsolationContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SNAPSHOT(): TerminalNode {
		return this.getToken(HiveParser.KW_SNAPSHOT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_levelOfIsolation;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterLevelOfIsolation) {
	 		listener.enterLevelOfIsolation(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitLevelOfIsolation) {
	 		listener.exitLevelOfIsolation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLevelOfIsolation) {
			return visitor.visitLevelOfIsolation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommitStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_COMMIT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMMIT, 0);
	}
	public KW_WORK(): TerminalNode {
		return this.getToken(HiveParser.KW_WORK, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_commitStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCommitStatement) {
	 		listener.enterCommitStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCommitStatement) {
	 		listener.exitCommitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCommitStatement) {
			return visitor.visitCommitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollbackStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ROLLBACK(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLLBACK, 0);
	}
	public KW_WORK(): TerminalNode {
		return this.getToken(HiveParser.KW_WORK, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_rollbackStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRollbackStatement) {
	 		listener.enterRollbackStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRollbackStatement) {
	 		listener.exitRollbackStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRollbackStatement) {
			return visitor.visitRollbackStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetAutoCommitStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_AUTOCOMMIT(): TerminalNode {
		return this.getToken(HiveParser.KW_AUTOCOMMIT, 0);
	}
	public booleanValueTok(): BooleanValueTokContext {
		return this.getTypedRuleContext(BooleanValueTokContext, 0) as BooleanValueTokContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_setAutoCommitStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSetAutoCommitStatement) {
	 		listener.enterSetAutoCommitStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSetAutoCommitStatement) {
	 		listener.exitSetAutoCommitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSetAutoCommitStatement) {
			return visitor.visitSetAutoCommitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AbortTransactionStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ABORT(): TerminalNode {
		return this.getToken(HiveParser.KW_ABORT, 0);
	}
	public KW_TRANSACTIONS(): TerminalNode {
		return this.getToken(HiveParser.KW_TRANSACTIONS, 0);
	}
	public Number_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.Number);
	}
	public Number(i: number): TerminalNode {
		return this.getToken(HiveParser.Number, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_abortTransactionStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAbortTransactionStatement) {
	 		listener.enterAbortTransactionStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAbortTransactionStatement) {
	 		listener.exitAbortTransactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAbortTransactionStatement) {
			return visitor.visitAbortTransactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AbortCompactionStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ABORT(): TerminalNode {
		return this.getToken(HiveParser.KW_ABORT, 0);
	}
	public KW_COMPACTIONS(): TerminalNode {
		return this.getToken(HiveParser.KW_COMPACTIONS, 0);
	}
	public Number_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.Number);
	}
	public Number(i: number): TerminalNode {
		return this.getToken(HiveParser.Number, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_abortCompactionStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAbortCompactionStatement) {
	 		listener.enterAbortCompactionStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAbortCompactionStatement) {
	 		listener.exitAbortCompactionStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAbortCompactionStatement) {
			return visitor.visitAbortCompactionStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_MERGE(): TerminalNode {
		return this.getToken(HiveParser.KW_MERGE, 0);
	}
	public KW_INTO(): TerminalNode {
		return this.getToken(HiveParser.KW_INTO, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public KW_USING(): TerminalNode {
		return this.getToken(HiveParser.KW_USING, 0);
	}
	public joinSourcePart(): JoinSourcePartContext {
		return this.getTypedRuleContext(JoinSourcePartContext, 0) as JoinSourcePartContext;
	}
	public KW_ON(): TerminalNode {
		return this.getToken(HiveParser.KW_ON, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public whenClauses(): WhenClausesContext {
		return this.getTypedRuleContext(WhenClausesContext, 0) as WhenClausesContext;
	}
	public QUERY_HINT(): TerminalNode {
		return this.getToken(HiveParser.QUERY_HINT, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_mergeStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterMergeStatement) {
	 		listener.enterMergeStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitMergeStatement) {
	 		listener.exitMergeStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitMergeStatement) {
			return visitor.visitMergeStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhenClausesContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public whenMatchedAndClause_list(): WhenMatchedAndClauseContext[] {
		return this.getTypedRuleContexts(WhenMatchedAndClauseContext) as WhenMatchedAndClauseContext[];
	}
	public whenMatchedAndClause(i: number): WhenMatchedAndClauseContext {
		return this.getTypedRuleContext(WhenMatchedAndClauseContext, i) as WhenMatchedAndClauseContext;
	}
	public whenMatchedThenClause_list(): WhenMatchedThenClauseContext[] {
		return this.getTypedRuleContexts(WhenMatchedThenClauseContext) as WhenMatchedThenClauseContext[];
	}
	public whenMatchedThenClause(i: number): WhenMatchedThenClauseContext {
		return this.getTypedRuleContext(WhenMatchedThenClauseContext, i) as WhenMatchedThenClauseContext;
	}
	public whenNotMatchedClause(): WhenNotMatchedClauseContext {
		return this.getTypedRuleContext(WhenNotMatchedClauseContext, 0) as WhenNotMatchedClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_whenClauses;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWhenClauses) {
	 		listener.enterWhenClauses(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWhenClauses) {
	 		listener.exitWhenClauses(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWhenClauses) {
			return visitor.visitWhenClauses(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhenNotMatchedClauseContext extends ParserRuleContext {
	public _targetCols!: ColumnParenthesesListContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_WHEN(): TerminalNode {
		return this.getToken(HiveParser.KW_WHEN, 0);
	}
	public KW_NOT(): TerminalNode {
		return this.getToken(HiveParser.KW_NOT, 0);
	}
	public KW_MATCHED(): TerminalNode {
		return this.getToken(HiveParser.KW_MATCHED, 0);
	}
	public KW_THEN(): TerminalNode {
		return this.getToken(HiveParser.KW_THEN, 0);
	}
	public KW_INSERT(): TerminalNode {
		return this.getToken(HiveParser.KW_INSERT, 0);
	}
	public KW_VALUES(): TerminalNode {
		return this.getToken(HiveParser.KW_VALUES, 0);
	}
	public valueRowConstructor(): ValueRowConstructorContext {
		return this.getTypedRuleContext(ValueRowConstructorContext, 0) as ValueRowConstructorContext;
	}
	public KW_AND(): TerminalNode {
		return this.getToken(HiveParser.KW_AND, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public columnParenthesesList(): ColumnParenthesesListContext {
		return this.getTypedRuleContext(ColumnParenthesesListContext, 0) as ColumnParenthesesListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_whenNotMatchedClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWhenNotMatchedClause) {
	 		listener.enterWhenNotMatchedClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWhenNotMatchedClause) {
	 		listener.exitWhenNotMatchedClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWhenNotMatchedClause) {
			return visitor.visitWhenNotMatchedClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhenMatchedAndClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_WHEN(): TerminalNode {
		return this.getToken(HiveParser.KW_WHEN, 0);
	}
	public KW_MATCHED(): TerminalNode {
		return this.getToken(HiveParser.KW_MATCHED, 0);
	}
	public KW_AND(): TerminalNode {
		return this.getToken(HiveParser.KW_AND, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public KW_THEN(): TerminalNode {
		return this.getToken(HiveParser.KW_THEN, 0);
	}
	public updateOrDelete(): UpdateOrDeleteContext {
		return this.getTypedRuleContext(UpdateOrDeleteContext, 0) as UpdateOrDeleteContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_whenMatchedAndClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWhenMatchedAndClause) {
	 		listener.enterWhenMatchedAndClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWhenMatchedAndClause) {
	 		listener.exitWhenMatchedAndClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWhenMatchedAndClause) {
			return visitor.visitWhenMatchedAndClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhenMatchedThenClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_WHEN(): TerminalNode {
		return this.getToken(HiveParser.KW_WHEN, 0);
	}
	public KW_MATCHED(): TerminalNode {
		return this.getToken(HiveParser.KW_MATCHED, 0);
	}
	public KW_THEN(): TerminalNode {
		return this.getToken(HiveParser.KW_THEN, 0);
	}
	public updateOrDelete(): UpdateOrDeleteContext {
		return this.getTypedRuleContext(UpdateOrDeleteContext, 0) as UpdateOrDeleteContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_whenMatchedThenClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWhenMatchedThenClause) {
	 		listener.enterWhenMatchedThenClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWhenMatchedThenClause) {
	 		listener.exitWhenMatchedThenClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWhenMatchedThenClause) {
			return visitor.visitWhenMatchedThenClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UpdateOrDeleteContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UPDATE(): TerminalNode {
		return this.getToken(HiveParser.KW_UPDATE, 0);
	}
	public setColumnsClause(): SetColumnsClauseContext {
		return this.getTypedRuleContext(SetColumnsClauseContext, 0) as SetColumnsClauseContext;
	}
	public KW_DELETE(): TerminalNode {
		return this.getToken(HiveParser.KW_DELETE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_updateOrDelete;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterUpdateOrDelete) {
	 		listener.enterUpdateOrDelete(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitUpdateOrDelete) {
	 		listener.exitUpdateOrDelete(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUpdateOrDelete) {
			return visitor.visitUpdateOrDelete(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KillQueryStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_KILL(): TerminalNode {
		return this.getToken(HiveParser.KW_KILL, 0);
	}
	public KW_QUERY(): TerminalNode {
		return this.getToken(HiveParser.KW_QUERY, 0);
	}
	public StringLiteral_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.StringLiteral);
	}
	public StringLiteral(i: number): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_killQueryStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterKillQueryStatement) {
	 		listener.enterKillQueryStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitKillQueryStatement) {
	 		listener.exitKillQueryStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitKillQueryStatement) {
			return visitor.visitKillQueryStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CompactionIdContext extends ParserRuleContext {
	public _compactId!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_COMPACT_ID(): TerminalNode {
		return this.getToken(HiveParser.KW_COMPACT_ID, 0);
	}
	public EQUAL(): TerminalNode {
		return this.getToken(HiveParser.EQUAL, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_compactionId;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCompactionId) {
	 		listener.enterCompactionId(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCompactionId) {
	 		listener.exitCompactionId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCompactionId) {
			return visitor.visitCompactionId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CompactionPoolContext extends ParserRuleContext {
	public _poolName!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_POOL(): TerminalNode {
		return this.getToken(HiveParser.KW_POOL, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_compactionPool;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCompactionPool) {
	 		listener.enterCompactionPool(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCompactionPool) {
	 		listener.exitCompactionPool(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCompactionPool) {
			return visitor.visitCompactionPool(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CompactionTypeContext extends ParserRuleContext {
	public _compactType!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TYPE(): TerminalNode {
		return this.getToken(HiveParser.KW_TYPE, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_compactionType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCompactionType) {
	 		listener.enterCompactionType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCompactionType) {
	 		listener.exitCompactionType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCompactionType) {
			return visitor.visitCompactionType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CompactionStatusContext extends ParserRuleContext {
	public _status!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_STATUS(): TerminalNode {
		return this.getToken(HiveParser.KW_STATUS, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_compactionStatus;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCompactionStatus) {
	 		listener.enterCompactionStatus(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCompactionStatus) {
	 		listener.exitCompactionStatus(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCompactionStatus) {
			return visitor.visitCompactionStatus(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementContext extends ParserRuleContext {
	public _tableNameTree!: TableNameContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ALTER(): TerminalNode {
		return this.getToken(HiveParser.KW_ALTER, 0);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public alterTableStatementSuffix(): AlterTableStatementSuffixContext {
		return this.getTypedRuleContext(AlterTableStatementSuffixContext, 0) as AlterTableStatementSuffixContext;
	}
	public KW_VIEW(): TerminalNode {
		return this.getToken(HiveParser.KW_VIEW, 0);
	}
	public alterViewStatementSuffix(): AlterViewStatementSuffixContext {
		return this.getTypedRuleContext(AlterViewStatementSuffixContext, 0) as AlterViewStatementSuffixContext;
	}
	public KW_MATERIALIZED(): TerminalNode {
		return this.getToken(HiveParser.KW_MATERIALIZED, 0);
	}
	public alterMaterializedViewStatementSuffix(): AlterMaterializedViewStatementSuffixContext {
		return this.getTypedRuleContext(AlterMaterializedViewStatementSuffixContext, 0) as AlterMaterializedViewStatementSuffixContext;
	}
	public db_schema(): Db_schemaContext {
		return this.getTypedRuleContext(Db_schemaContext, 0) as Db_schemaContext;
	}
	public alterDatabaseStatementSuffix(): AlterDatabaseStatementSuffixContext {
		return this.getTypedRuleContext(AlterDatabaseStatementSuffixContext, 0) as AlterDatabaseStatementSuffixContext;
	}
	public KW_DATACONNECTOR(): TerminalNode {
		return this.getToken(HiveParser.KW_DATACONNECTOR, 0);
	}
	public alterDataConnectorStatementSuffix(): AlterDataConnectorStatementSuffixContext {
		return this.getTypedRuleContext(AlterDataConnectorStatementSuffixContext, 0) as AlterDataConnectorStatementSuffixContext;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatement) {
	 		listener.enterAlterStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatement) {
	 		listener.exitAlterStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatement) {
			return visitor.visitAlterStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterTableStatementSuffixContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterStatementSuffixRename(): AlterStatementSuffixRenameContext {
		return this.getTypedRuleContext(AlterStatementSuffixRenameContext, 0) as AlterStatementSuffixRenameContext;
	}
	public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext {
		return this.getTypedRuleContext(AlterStatementSuffixDropPartitionsContext, 0) as AlterStatementSuffixDropPartitionsContext;
	}
	public alterStatementSuffixAddPartitions(): AlterStatementSuffixAddPartitionsContext {
		return this.getTypedRuleContext(AlterStatementSuffixAddPartitionsContext, 0) as AlterStatementSuffixAddPartitionsContext;
	}
	public alterStatementSuffixTouch(): AlterStatementSuffixTouchContext {
		return this.getTypedRuleContext(AlterStatementSuffixTouchContext, 0) as AlterStatementSuffixTouchContext;
	}
	public alterStatementSuffixArchive(): AlterStatementSuffixArchiveContext {
		return this.getTypedRuleContext(AlterStatementSuffixArchiveContext, 0) as AlterStatementSuffixArchiveContext;
	}
	public alterStatementSuffixUnArchive(): AlterStatementSuffixUnArchiveContext {
		return this.getTypedRuleContext(AlterStatementSuffixUnArchiveContext, 0) as AlterStatementSuffixUnArchiveContext;
	}
	public alterStatementSuffixProperties(): AlterStatementSuffixPropertiesContext {
		return this.getTypedRuleContext(AlterStatementSuffixPropertiesContext, 0) as AlterStatementSuffixPropertiesContext;
	}
	public alterStatementSuffixSkewedby(): AlterStatementSuffixSkewedbyContext {
		return this.getTypedRuleContext(AlterStatementSuffixSkewedbyContext, 0) as AlterStatementSuffixSkewedbyContext;
	}
	public alterStatementSuffixExchangePartition(): AlterStatementSuffixExchangePartitionContext {
		return this.getTypedRuleContext(AlterStatementSuffixExchangePartitionContext, 0) as AlterStatementSuffixExchangePartitionContext;
	}
	public alterStatementPartitionKeyType(): AlterStatementPartitionKeyTypeContext {
		return this.getTypedRuleContext(AlterStatementPartitionKeyTypeContext, 0) as AlterStatementPartitionKeyTypeContext;
	}
	public alterStatementSuffixDropConstraint(): AlterStatementSuffixDropConstraintContext {
		return this.getTypedRuleContext(AlterStatementSuffixDropConstraintContext, 0) as AlterStatementSuffixDropConstraintContext;
	}
	public alterStatementSuffixAddConstraint(): AlterStatementSuffixAddConstraintContext {
		return this.getTypedRuleContext(AlterStatementSuffixAddConstraintContext, 0) as AlterStatementSuffixAddConstraintContext;
	}
	public alterTblPartitionStatementSuffix(): AlterTblPartitionStatementSuffixContext {
		return this.getTypedRuleContext(AlterTblPartitionStatementSuffixContext, 0) as AlterTblPartitionStatementSuffixContext;
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
	public alterStatementSuffixSetOwner(): AlterStatementSuffixSetOwnerContext {
		return this.getTypedRuleContext(AlterStatementSuffixSetOwnerContext, 0) as AlterStatementSuffixSetOwnerContext;
	}
	public alterStatementSuffixSetPartSpec(): AlterStatementSuffixSetPartSpecContext {
		return this.getTypedRuleContext(AlterStatementSuffixSetPartSpecContext, 0) as AlterStatementSuffixSetPartSpecContext;
	}
	public alterStatementSuffixExecute(): AlterStatementSuffixExecuteContext {
		return this.getTypedRuleContext(AlterStatementSuffixExecuteContext, 0) as AlterStatementSuffixExecuteContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterTableStatementSuffix;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterTableStatementSuffix) {
	 		listener.enterAlterTableStatementSuffix(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterTableStatementSuffix) {
	 		listener.exitAlterTableStatementSuffix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterTableStatementSuffix) {
			return visitor.visitAlterTableStatementSuffix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterTblPartitionStatementSuffixContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterStatementSuffixFileFormat(): AlterStatementSuffixFileFormatContext {
		return this.getTypedRuleContext(AlterStatementSuffixFileFormatContext, 0) as AlterStatementSuffixFileFormatContext;
	}
	public alterStatementSuffixLocation(): AlterStatementSuffixLocationContext {
		return this.getTypedRuleContext(AlterStatementSuffixLocationContext, 0) as AlterStatementSuffixLocationContext;
	}
	public alterStatementSuffixMergeFiles(): AlterStatementSuffixMergeFilesContext {
		return this.getTypedRuleContext(AlterStatementSuffixMergeFilesContext, 0) as AlterStatementSuffixMergeFilesContext;
	}
	public alterStatementSuffixSerdeProperties(): AlterStatementSuffixSerdePropertiesContext {
		return this.getTypedRuleContext(AlterStatementSuffixSerdePropertiesContext, 0) as AlterStatementSuffixSerdePropertiesContext;
	}
	public alterStatementSuffixRenamePart(): AlterStatementSuffixRenamePartContext {
		return this.getTypedRuleContext(AlterStatementSuffixRenamePartContext, 0) as AlterStatementSuffixRenamePartContext;
	}
	public alterStatementSuffixBucketNum(): AlterStatementSuffixBucketNumContext {
		return this.getTypedRuleContext(AlterStatementSuffixBucketNumContext, 0) as AlterStatementSuffixBucketNumContext;
	}
	public alterTblPartitionStatementSuffixSkewedLocation(): AlterTblPartitionStatementSuffixSkewedLocationContext {
		return this.getTypedRuleContext(AlterTblPartitionStatementSuffixSkewedLocationContext, 0) as AlterTblPartitionStatementSuffixSkewedLocationContext;
	}
	public alterStatementSuffixClusterbySortby(): AlterStatementSuffixClusterbySortbyContext {
		return this.getTypedRuleContext(AlterStatementSuffixClusterbySortbyContext, 0) as AlterStatementSuffixClusterbySortbyContext;
	}
	public alterStatementSuffixCompact(): AlterStatementSuffixCompactContext {
		return this.getTypedRuleContext(AlterStatementSuffixCompactContext, 0) as AlterStatementSuffixCompactContext;
	}
	public alterStatementSuffixUpdateStatsCol(): AlterStatementSuffixUpdateStatsColContext {
		return this.getTypedRuleContext(AlterStatementSuffixUpdateStatsColContext, 0) as AlterStatementSuffixUpdateStatsColContext;
	}
	public alterStatementSuffixUpdateStats(): AlterStatementSuffixUpdateStatsContext {
		return this.getTypedRuleContext(AlterStatementSuffixUpdateStatsContext, 0) as AlterStatementSuffixUpdateStatsContext;
	}
	public alterStatementSuffixRenameCol(): AlterStatementSuffixRenameColContext {
		return this.getTypedRuleContext(AlterStatementSuffixRenameColContext, 0) as AlterStatementSuffixRenameColContext;
	}
	public alterStatementSuffixAddCol(): AlterStatementSuffixAddColContext {
		return this.getTypedRuleContext(AlterStatementSuffixAddColContext, 0) as AlterStatementSuffixAddColContext;
	}
	public alterStatementSuffixUpdateColumns(): AlterStatementSuffixUpdateColumnsContext {
		return this.getTypedRuleContext(AlterStatementSuffixUpdateColumnsContext, 0) as AlterStatementSuffixUpdateColumnsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterTblPartitionStatementSuffix;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterTblPartitionStatementSuffix) {
	 		listener.enterAlterTblPartitionStatementSuffix(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterTblPartitionStatementSuffix) {
	 		listener.exitAlterTblPartitionStatementSuffix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterTblPartitionStatementSuffix) {
			return visitor.visitAlterTblPartitionStatementSuffix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementPartitionKeyTypeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_PARTITION(): TerminalNode {
		return this.getToken(HiveParser.KW_PARTITION, 0);
	}
	public KW_COLUMN(): TerminalNode {
		return this.getToken(HiveParser.KW_COLUMN, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public columnNameType(): ColumnNameTypeContext {
		return this.getTypedRuleContext(ColumnNameTypeContext, 0) as ColumnNameTypeContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementPartitionKeyType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementPartitionKeyType) {
	 		listener.enterAlterStatementPartitionKeyType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementPartitionKeyType) {
	 		listener.exitAlterStatementPartitionKeyType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementPartitionKeyType) {
			return visitor.visitAlterStatementPartitionKeyType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterViewStatementSuffixContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterViewSuffixProperties(): AlterViewSuffixPropertiesContext {
		return this.getTypedRuleContext(AlterViewSuffixPropertiesContext, 0) as AlterViewSuffixPropertiesContext;
	}
	public alterStatementSuffixRename(): AlterStatementSuffixRenameContext {
		return this.getTypedRuleContext(AlterStatementSuffixRenameContext, 0) as AlterStatementSuffixRenameContext;
	}
	public alterStatementSuffixAddPartitions(): AlterStatementSuffixAddPartitionsContext {
		return this.getTypedRuleContext(AlterStatementSuffixAddPartitionsContext, 0) as AlterStatementSuffixAddPartitionsContext;
	}
	public alterStatementSuffixDropPartitions(): AlterStatementSuffixDropPartitionsContext {
		return this.getTypedRuleContext(AlterStatementSuffixDropPartitionsContext, 0) as AlterStatementSuffixDropPartitionsContext;
	}
	public selectStatementWithCTE(): SelectStatementWithCTEContext {
		return this.getTypedRuleContext(SelectStatementWithCTEContext, 0) as SelectStatementWithCTEContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterViewStatementSuffix;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterViewStatementSuffix) {
	 		listener.enterAlterViewStatementSuffix(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterViewStatementSuffix) {
	 		listener.exitAlterViewStatementSuffix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterViewStatementSuffix) {
			return visitor.visitAlterViewStatementSuffix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterMaterializedViewStatementSuffixContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterMaterializedViewSuffixRewrite(): AlterMaterializedViewSuffixRewriteContext {
		return this.getTypedRuleContext(AlterMaterializedViewSuffixRewriteContext, 0) as AlterMaterializedViewSuffixRewriteContext;
	}
	public alterMaterializedViewSuffixRebuild(): AlterMaterializedViewSuffixRebuildContext {
		return this.getTypedRuleContext(AlterMaterializedViewSuffixRebuildContext, 0) as AlterMaterializedViewSuffixRebuildContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterMaterializedViewStatementSuffix;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterMaterializedViewStatementSuffix) {
	 		listener.enterAlterMaterializedViewStatementSuffix(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterMaterializedViewStatementSuffix) {
	 		listener.exitAlterMaterializedViewStatementSuffix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterMaterializedViewStatementSuffix) {
			return visitor.visitAlterMaterializedViewStatementSuffix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterMaterializedViewSuffixRewriteContext extends ParserRuleContext {
	public _mvRewriteFlag!: RewriteEnabledContext;
	public _mvRewriteFlag2!: RewriteDisabledContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public rewriteEnabled(): RewriteEnabledContext {
		return this.getTypedRuleContext(RewriteEnabledContext, 0) as RewriteEnabledContext;
	}
	public rewriteDisabled(): RewriteDisabledContext {
		return this.getTypedRuleContext(RewriteDisabledContext, 0) as RewriteDisabledContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterMaterializedViewSuffixRewrite;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterMaterializedViewSuffixRewrite) {
	 		listener.enterAlterMaterializedViewSuffixRewrite(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterMaterializedViewSuffixRewrite) {
	 		listener.exitAlterMaterializedViewSuffixRewrite(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterMaterializedViewSuffixRewrite) {
			return visitor.visitAlterMaterializedViewSuffixRewrite(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterMaterializedViewSuffixRebuildContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_REBUILD(): TerminalNode {
		return this.getToken(HiveParser.KW_REBUILD, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterMaterializedViewSuffixRebuild;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterMaterializedViewSuffixRebuild) {
	 		listener.enterAlterMaterializedViewSuffixRebuild(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterMaterializedViewSuffixRebuild) {
	 		listener.exitAlterMaterializedViewSuffixRebuild(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterMaterializedViewSuffixRebuild) {
			return visitor.visitAlterMaterializedViewSuffixRebuild(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseStatementSuffixContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterDatabaseSuffixProperties(): AlterDatabaseSuffixPropertiesContext {
		return this.getTypedRuleContext(AlterDatabaseSuffixPropertiesContext, 0) as AlterDatabaseSuffixPropertiesContext;
	}
	public alterDatabaseSuffixSetOwner(): AlterDatabaseSuffixSetOwnerContext {
		return this.getTypedRuleContext(AlterDatabaseSuffixSetOwnerContext, 0) as AlterDatabaseSuffixSetOwnerContext;
	}
	public alterDatabaseSuffixSetLocation(): AlterDatabaseSuffixSetLocationContext {
		return this.getTypedRuleContext(AlterDatabaseSuffixSetLocationContext, 0) as AlterDatabaseSuffixSetLocationContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterDatabaseStatementSuffix;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterDatabaseStatementSuffix) {
	 		listener.enterAlterDatabaseStatementSuffix(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterDatabaseStatementSuffix) {
	 		listener.exitAlterDatabaseStatementSuffix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDatabaseStatementSuffix) {
			return visitor.visitAlterDatabaseStatementSuffix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseSuffixPropertiesContext extends ParserRuleContext {
	public _name!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_DBPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_DBPROPERTIES, 0);
	}
	public dbProperties(): DbPropertiesContext {
		return this.getTypedRuleContext(DbPropertiesContext, 0) as DbPropertiesContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterDatabaseSuffixProperties;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterDatabaseSuffixProperties) {
	 		listener.enterAlterDatabaseSuffixProperties(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterDatabaseSuffixProperties) {
	 		listener.exitAlterDatabaseSuffixProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDatabaseSuffixProperties) {
			return visitor.visitAlterDatabaseSuffixProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseSuffixSetOwnerContext extends ParserRuleContext {
	public _dbName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_OWNER(): TerminalNode {
		return this.getToken(HiveParser.KW_OWNER, 0);
	}
	public principalName(): PrincipalNameContext {
		return this.getTypedRuleContext(PrincipalNameContext, 0) as PrincipalNameContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterDatabaseSuffixSetOwner;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterDatabaseSuffixSetOwner) {
	 		listener.enterAlterDatabaseSuffixSetOwner(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterDatabaseSuffixSetOwner) {
	 		listener.exitAlterDatabaseSuffixSetOwner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDatabaseSuffixSetOwner) {
			return visitor.visitAlterDatabaseSuffixSetOwner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseSuffixSetLocationContext extends ParserRuleContext {
	public _dbName!: Id_Context;
	public _newLocation!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_LOCATION(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCATION, 0);
	}
	public KW_MANAGEDLOCATION(): TerminalNode {
		return this.getToken(HiveParser.KW_MANAGEDLOCATION, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterDatabaseSuffixSetLocation;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterDatabaseSuffixSetLocation) {
	 		listener.enterAlterDatabaseSuffixSetLocation(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterDatabaseSuffixSetLocation) {
	 		listener.exitAlterDatabaseSuffixSetLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDatabaseSuffixSetLocation) {
			return visitor.visitAlterDatabaseSuffixSetLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseSuffixSetManagedLocationContext extends ParserRuleContext {
	public _dbName!: Id_Context;
	public _newLocation!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_MANAGEDLOCATION(): TerminalNode {
		return this.getToken(HiveParser.KW_MANAGEDLOCATION, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterDatabaseSuffixSetManagedLocation;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterDatabaseSuffixSetManagedLocation) {
	 		listener.enterAlterDatabaseSuffixSetManagedLocation(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterDatabaseSuffixSetManagedLocation) {
	 		listener.exitAlterDatabaseSuffixSetManagedLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDatabaseSuffixSetManagedLocation) {
			return visitor.visitAlterDatabaseSuffixSetManagedLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixRenameContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_RENAME(): TerminalNode {
		return this.getToken(HiveParser.KW_RENAME, 0);
	}
	public KW_TO(): TerminalNode {
		return this.getToken(HiveParser.KW_TO, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixRename;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixRename) {
	 		listener.enterAlterStatementSuffixRename(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixRename) {
	 		listener.exitAlterStatementSuffixRename(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixRename) {
			return visitor.visitAlterStatementSuffixRename(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixAddColContext extends ParserRuleContext {
	public _add!: Token;
	public _replace!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_COLUMNS(): TerminalNode {
		return this.getToken(HiveParser.KW_COLUMNS, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public columnNameTypeList(): ColumnNameTypeListContext {
		return this.getTypedRuleContext(ColumnNameTypeListContext, 0) as ColumnNameTypeListContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public KW_ADD(): TerminalNode {
		return this.getToken(HiveParser.KW_ADD, 0);
	}
	public KW_REPLACE(): TerminalNode {
		return this.getToken(HiveParser.KW_REPLACE, 0);
	}
	public restrictOrCascade(): RestrictOrCascadeContext {
		return this.getTypedRuleContext(RestrictOrCascadeContext, 0) as RestrictOrCascadeContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixAddCol;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixAddCol) {
	 		listener.enterAlterStatementSuffixAddCol(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixAddCol) {
	 		listener.exitAlterStatementSuffixAddCol(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixAddCol) {
			return visitor.visitAlterStatementSuffixAddCol(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixAddConstraintContext extends ParserRuleContext {
	public _fk!: AlterForeignKeyWithNameContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ADD(): TerminalNode {
		return this.getToken(HiveParser.KW_ADD, 0);
	}
	public alterConstraintWithName(): AlterConstraintWithNameContext {
		return this.getTypedRuleContext(AlterConstraintWithNameContext, 0) as AlterConstraintWithNameContext;
	}
	public alterForeignKeyWithName(): AlterForeignKeyWithNameContext {
		return this.getTypedRuleContext(AlterForeignKeyWithNameContext, 0) as AlterForeignKeyWithNameContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixAddConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixAddConstraint) {
	 		listener.enterAlterStatementSuffixAddConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixAddConstraint) {
	 		listener.exitAlterStatementSuffixAddConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixAddConstraint) {
			return visitor.visitAlterStatementSuffixAddConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixUpdateColumnsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UPDATE(): TerminalNode {
		return this.getToken(HiveParser.KW_UPDATE, 0);
	}
	public KW_COLUMNS(): TerminalNode {
		return this.getToken(HiveParser.KW_COLUMNS, 0);
	}
	public restrictOrCascade(): RestrictOrCascadeContext {
		return this.getTypedRuleContext(RestrictOrCascadeContext, 0) as RestrictOrCascadeContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixUpdateColumns;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixUpdateColumns) {
	 		listener.enterAlterStatementSuffixUpdateColumns(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixUpdateColumns) {
	 		listener.exitAlterStatementSuffixUpdateColumns(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixUpdateColumns) {
			return visitor.visitAlterStatementSuffixUpdateColumns(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixDropConstraintContext extends ParserRuleContext {
	public _cName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_CONSTRAINT(): TerminalNode {
		return this.getToken(HiveParser.KW_CONSTRAINT, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixDropConstraint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixDropConstraint) {
	 		listener.enterAlterStatementSuffixDropConstraint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixDropConstraint) {
	 		listener.exitAlterStatementSuffixDropConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixDropConstraint) {
			return visitor.visitAlterStatementSuffixDropConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixRenameColContext extends ParserRuleContext {
	public _oldName!: Id_Context;
	public _newName!: Id_Context;
	public _comment!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CHANGE(): TerminalNode {
		return this.getToken(HiveParser.KW_CHANGE, 0);
	}
	public colType(): ColTypeContext {
		return this.getTypedRuleContext(ColTypeContext, 0) as ColTypeContext;
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public KW_COLUMN(): TerminalNode {
		return this.getToken(HiveParser.KW_COLUMN, 0);
	}
	public alterColumnConstraint(): AlterColumnConstraintContext {
		return this.getTypedRuleContext(AlterColumnConstraintContext, 0) as AlterColumnConstraintContext;
	}
	public KW_COMMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMMENT, 0);
	}
	public alterStatementChangeColPosition(): AlterStatementChangeColPositionContext {
		return this.getTypedRuleContext(AlterStatementChangeColPositionContext, 0) as AlterStatementChangeColPositionContext;
	}
	public restrictOrCascade(): RestrictOrCascadeContext {
		return this.getTypedRuleContext(RestrictOrCascadeContext, 0) as RestrictOrCascadeContext;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixRenameCol;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixRenameCol) {
	 		listener.enterAlterStatementSuffixRenameCol(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixRenameCol) {
	 		listener.exitAlterStatementSuffixRenameCol(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixRenameCol) {
			return visitor.visitAlterStatementSuffixRenameCol(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixUpdateStatsColContext extends ParserRuleContext {
	public _colName!: Id_Context;
	public _comment!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UPDATE(): TerminalNode {
		return this.getToken(HiveParser.KW_UPDATE, 0);
	}
	public KW_STATISTICS(): TerminalNode {
		return this.getToken(HiveParser.KW_STATISTICS, 0);
	}
	public KW_FOR(): TerminalNode {
		return this.getToken(HiveParser.KW_FOR, 0);
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public tableProperties(): TablePropertiesContext {
		return this.getTypedRuleContext(TablePropertiesContext, 0) as TablePropertiesContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_COLUMN(): TerminalNode {
		return this.getToken(HiveParser.KW_COLUMN, 0);
	}
	public KW_COMMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMMENT, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixUpdateStatsCol;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixUpdateStatsCol) {
	 		listener.enterAlterStatementSuffixUpdateStatsCol(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixUpdateStatsCol) {
	 		listener.exitAlterStatementSuffixUpdateStatsCol(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixUpdateStatsCol) {
			return visitor.visitAlterStatementSuffixUpdateStatsCol(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixUpdateStatsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UPDATE(): TerminalNode {
		return this.getToken(HiveParser.KW_UPDATE, 0);
	}
	public KW_STATISTICS(): TerminalNode {
		return this.getToken(HiveParser.KW_STATISTICS, 0);
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public tableProperties(): TablePropertiesContext {
		return this.getTypedRuleContext(TablePropertiesContext, 0) as TablePropertiesContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixUpdateStats;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixUpdateStats) {
	 		listener.enterAlterStatementSuffixUpdateStats(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixUpdateStats) {
	 		listener.exitAlterStatementSuffixUpdateStats(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixUpdateStats) {
			return visitor.visitAlterStatementSuffixUpdateStats(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementChangeColPositionContext extends ParserRuleContext {
	public _first!: Token;
	public _afterCol!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_FIRST(): TerminalNode {
		return this.getToken(HiveParser.KW_FIRST, 0);
	}
	public KW_AFTER(): TerminalNode {
		return this.getToken(HiveParser.KW_AFTER, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementChangeColPosition;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementChangeColPosition) {
	 		listener.enterAlterStatementChangeColPosition(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementChangeColPosition) {
	 		listener.exitAlterStatementChangeColPosition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementChangeColPosition) {
			return visitor.visitAlterStatementChangeColPosition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixAddPartitionsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ADD(): TerminalNode {
		return this.getToken(HiveParser.KW_ADD, 0);
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public alterStatementSuffixAddPartitionsElement_list(): AlterStatementSuffixAddPartitionsElementContext[] {
		return this.getTypedRuleContexts(AlterStatementSuffixAddPartitionsElementContext) as AlterStatementSuffixAddPartitionsElementContext[];
	}
	public alterStatementSuffixAddPartitionsElement(i: number): AlterStatementSuffixAddPartitionsElementContext {
		return this.getTypedRuleContext(AlterStatementSuffixAddPartitionsElementContext, i) as AlterStatementSuffixAddPartitionsElementContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixAddPartitions;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixAddPartitions) {
	 		listener.enterAlterStatementSuffixAddPartitions(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixAddPartitions) {
	 		listener.exitAlterStatementSuffixAddPartitions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixAddPartitions) {
			return visitor.visitAlterStatementSuffixAddPartitions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixAddPartitionsElementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
	public partitionLocation(): PartitionLocationContext {
		return this.getTypedRuleContext(PartitionLocationContext, 0) as PartitionLocationContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixAddPartitionsElement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixAddPartitionsElement) {
	 		listener.enterAlterStatementSuffixAddPartitionsElement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixAddPartitionsElement) {
	 		listener.exitAlterStatementSuffixAddPartitionsElement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixAddPartitionsElement) {
			return visitor.visitAlterStatementSuffixAddPartitionsElement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixTouchContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TOUCH(): TerminalNode {
		return this.getToken(HiveParser.KW_TOUCH, 0);
	}
	public partitionSpec_list(): PartitionSpecContext[] {
		return this.getTypedRuleContexts(PartitionSpecContext) as PartitionSpecContext[];
	}
	public partitionSpec(i: number): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, i) as PartitionSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixTouch;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixTouch) {
	 		listener.enterAlterStatementSuffixTouch(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixTouch) {
	 		listener.exitAlterStatementSuffixTouch(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixTouch) {
			return visitor.visitAlterStatementSuffixTouch(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixArchiveContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ARCHIVE(): TerminalNode {
		return this.getToken(HiveParser.KW_ARCHIVE, 0);
	}
	public partitionSpec_list(): PartitionSpecContext[] {
		return this.getTypedRuleContexts(PartitionSpecContext) as PartitionSpecContext[];
	}
	public partitionSpec(i: number): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, i) as PartitionSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixArchive;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixArchive) {
	 		listener.enterAlterStatementSuffixArchive(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixArchive) {
	 		listener.exitAlterStatementSuffixArchive(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixArchive) {
			return visitor.visitAlterStatementSuffixArchive(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixUnArchiveContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UNARCHIVE(): TerminalNode {
		return this.getToken(HiveParser.KW_UNARCHIVE, 0);
	}
	public partitionSpec_list(): PartitionSpecContext[] {
		return this.getTypedRuleContexts(PartitionSpecContext) as PartitionSpecContext[];
	}
	public partitionSpec(i: number): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, i) as PartitionSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixUnArchive;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixUnArchive) {
	 		listener.enterAlterStatementSuffixUnArchive(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixUnArchive) {
	 		listener.exitAlterStatementSuffixUnArchive(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixUnArchive) {
			return visitor.visitAlterStatementSuffixUnArchive(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionLocationContext extends ParserRuleContext {
	public _locn!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_LOCATION(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCATION, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partitionLocation;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartitionLocation) {
	 		listener.enterPartitionLocation(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartitionLocation) {
	 		listener.exitPartitionLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionLocation) {
			return visitor.visitPartitionLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixDropPartitionsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_PARTITION_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_PARTITION);
	}
	public KW_PARTITION(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_PARTITION, i);
	}
	public partitionSelectorSpec_list(): PartitionSelectorSpecContext[] {
		return this.getTypedRuleContexts(PartitionSelectorSpecContext) as PartitionSelectorSpecContext[];
	}
	public partitionSelectorSpec(i: number): PartitionSelectorSpecContext {
		return this.getTypedRuleContext(PartitionSelectorSpecContext, i) as PartitionSelectorSpecContext;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
	public KW_PURGE(): TerminalNode {
		return this.getToken(HiveParser.KW_PURGE, 0);
	}
	public replicationClause(): ReplicationClauseContext {
		return this.getTypedRuleContext(ReplicationClauseContext, 0) as ReplicationClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixDropPartitions;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixDropPartitions) {
	 		listener.enterAlterStatementSuffixDropPartitions(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixDropPartitions) {
	 		listener.exitAlterStatementSuffixDropPartitions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixDropPartitions) {
			return visitor.visitAlterStatementSuffixDropPartitions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixPropertiesContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_TBLPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
	}
	public tableProperties(): TablePropertiesContext {
		return this.getTypedRuleContext(TablePropertiesContext, 0) as TablePropertiesContext;
	}
	public KW_UNSET(): TerminalNode {
		return this.getToken(HiveParser.KW_UNSET, 0);
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixProperties;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixProperties) {
	 		listener.enterAlterStatementSuffixProperties(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixProperties) {
	 		listener.exitAlterStatementSuffixProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixProperties) {
			return visitor.visitAlterStatementSuffixProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterViewSuffixPropertiesContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_TBLPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
	}
	public tableProperties(): TablePropertiesContext {
		return this.getTypedRuleContext(TablePropertiesContext, 0) as TablePropertiesContext;
	}
	public KW_UNSET(): TerminalNode {
		return this.getToken(HiveParser.KW_UNSET, 0);
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterViewSuffixProperties;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterViewSuffixProperties) {
	 		listener.enterAlterViewSuffixProperties(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterViewSuffixProperties) {
	 		listener.exitAlterViewSuffixProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterViewSuffixProperties) {
			return visitor.visitAlterViewSuffixProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixSerdePropertiesContext extends ParserRuleContext {
	public _serdeName!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_SERDE(): TerminalNode {
		return this.getToken(HiveParser.KW_SERDE, 0);
	}
	public KW_SERDEPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
	}
	public tableProperties(): TablePropertiesContext {
		return this.getTypedRuleContext(TablePropertiesContext, 0) as TablePropertiesContext;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_UNSET(): TerminalNode {
		return this.getToken(HiveParser.KW_UNSET, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixSerdeProperties;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixSerdeProperties) {
	 		listener.enterAlterStatementSuffixSerdeProperties(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixSerdeProperties) {
	 		listener.exitAlterStatementSuffixSerdeProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixSerdeProperties) {
			return visitor.visitAlterStatementSuffixSerdeProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablePartitionPrefixContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tablePartitionPrefix;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTablePartitionPrefix) {
	 		listener.enterTablePartitionPrefix(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTablePartitionPrefix) {
	 		listener.exitTablePartitionPrefix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTablePartitionPrefix) {
			return visitor.visitTablePartitionPrefix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixFileFormatContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_FILEFORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_FILEFORMAT, 0);
	}
	public fileFormat(): FileFormatContext {
		return this.getTypedRuleContext(FileFormatContext, 0) as FileFormatContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixFileFormat;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixFileFormat) {
	 		listener.enterAlterStatementSuffixFileFormat(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixFileFormat) {
	 		listener.exitAlterStatementSuffixFileFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixFileFormat) {
			return visitor.visitAlterStatementSuffixFileFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixClusterbySortbyContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_NOT(): TerminalNode {
		return this.getToken(HiveParser.KW_NOT, 0);
	}
	public KW_CLUSTERED(): TerminalNode {
		return this.getToken(HiveParser.KW_CLUSTERED, 0);
	}
	public KW_SORTED(): TerminalNode {
		return this.getToken(HiveParser.KW_SORTED, 0);
	}
	public tableBuckets(): TableBucketsContext {
		return this.getTypedRuleContext(TableBucketsContext, 0) as TableBucketsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixClusterbySortby;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixClusterbySortby) {
	 		listener.enterAlterStatementSuffixClusterbySortby(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixClusterbySortby) {
	 		listener.exitAlterStatementSuffixClusterbySortby(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixClusterbySortby) {
			return visitor.visitAlterStatementSuffixClusterbySortby(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterTblPartitionStatementSuffixSkewedLocationContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_SKEWED(): TerminalNode {
		return this.getToken(HiveParser.KW_SKEWED, 0);
	}
	public KW_LOCATION(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCATION, 0);
	}
	public skewedLocations(): SkewedLocationsContext {
		return this.getTypedRuleContext(SkewedLocationsContext, 0) as SkewedLocationsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterTblPartitionStatementSuffixSkewedLocation;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterTblPartitionStatementSuffixSkewedLocation) {
	 		listener.enterAlterTblPartitionStatementSuffixSkewedLocation(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterTblPartitionStatementSuffixSkewedLocation) {
	 		listener.exitAlterTblPartitionStatementSuffixSkewedLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterTblPartitionStatementSuffixSkewedLocation) {
			return visitor.visitAlterTblPartitionStatementSuffixSkewedLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedLocationsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public skewedLocationsList(): SkewedLocationsListContext {
		return this.getTypedRuleContext(SkewedLocationsListContext, 0) as SkewedLocationsListContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_skewedLocations;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSkewedLocations) {
	 		listener.enterSkewedLocations(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSkewedLocations) {
	 		listener.exitSkewedLocations(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedLocations) {
			return visitor.visitSkewedLocations(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedLocationsListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public skewedLocationMap_list(): SkewedLocationMapContext[] {
		return this.getTypedRuleContexts(SkewedLocationMapContext) as SkewedLocationMapContext[];
	}
	public skewedLocationMap(i: number): SkewedLocationMapContext {
		return this.getTypedRuleContext(SkewedLocationMapContext, i) as SkewedLocationMapContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_skewedLocationsList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSkewedLocationsList) {
	 		listener.enterSkewedLocationsList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSkewedLocationsList) {
	 		listener.exitSkewedLocationsList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedLocationsList) {
			return visitor.visitSkewedLocationsList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkewedLocationMapContext extends ParserRuleContext {
	public _key!: SkewedValueLocationElementContext;
	public _value!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUAL(): TerminalNode {
		return this.getToken(HiveParser.EQUAL, 0);
	}
	public skewedValueLocationElement(): SkewedValueLocationElementContext {
		return this.getTypedRuleContext(SkewedValueLocationElementContext, 0) as SkewedValueLocationElementContext;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_skewedLocationMap;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSkewedLocationMap) {
	 		listener.enterSkewedLocationMap(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSkewedLocationMap) {
	 		listener.exitSkewedLocationMap(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSkewedLocationMap) {
			return visitor.visitSkewedLocationMap(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixLocationContext extends ParserRuleContext {
	public _newLoc!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_LOCATION(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCATION, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixLocation;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixLocation) {
	 		listener.enterAlterStatementSuffixLocation(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixLocation) {
	 		listener.exitAlterStatementSuffixLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixLocation) {
			return visitor.visitAlterStatementSuffixLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixSkewedbyContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableSkewed(): TableSkewedContext {
		return this.getTypedRuleContext(TableSkewedContext, 0) as TableSkewedContext;
	}
	public KW_NOT(): TerminalNode {
		return this.getToken(HiveParser.KW_NOT, 0);
	}
	public KW_SKEWED(): TerminalNode {
		return this.getToken(HiveParser.KW_SKEWED, 0);
	}
	public storedAsDirs(): StoredAsDirsContext {
		return this.getTypedRuleContext(StoredAsDirsContext, 0) as StoredAsDirsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixSkewedby;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixSkewedby) {
	 		listener.enterAlterStatementSuffixSkewedby(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixSkewedby) {
	 		listener.exitAlterStatementSuffixSkewedby(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixSkewedby) {
			return visitor.visitAlterStatementSuffixSkewedby(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixExchangePartitionContext extends ParserRuleContext {
	public _exchangename!: TableNameContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_EXCHANGE(): TerminalNode {
		return this.getToken(HiveParser.KW_EXCHANGE, 0);
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixExchangePartition;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixExchangePartition) {
	 		listener.enterAlterStatementSuffixExchangePartition(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixExchangePartition) {
	 		listener.exitAlterStatementSuffixExchangePartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixExchangePartition) {
			return visitor.visitAlterStatementSuffixExchangePartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixRenamePartContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_RENAME(): TerminalNode {
		return this.getToken(HiveParser.KW_RENAME, 0);
	}
	public KW_TO(): TerminalNode {
		return this.getToken(HiveParser.KW_TO, 0);
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixRenamePart;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixRenamePart) {
	 		listener.enterAlterStatementSuffixRenamePart(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixRenamePart) {
	 		listener.exitAlterStatementSuffixRenamePart(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixRenamePart) {
			return visitor.visitAlterStatementSuffixRenamePart(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixStatsPartContext extends ParserRuleContext {
	public _colName!: Id_Context;
	public _comment!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UPDATE(): TerminalNode {
		return this.getToken(HiveParser.KW_UPDATE, 0);
	}
	public KW_STATISTICS(): TerminalNode {
		return this.getToken(HiveParser.KW_STATISTICS, 0);
	}
	public KW_FOR(): TerminalNode {
		return this.getToken(HiveParser.KW_FOR, 0);
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public tableProperties(): TablePropertiesContext {
		return this.getTypedRuleContext(TablePropertiesContext, 0) as TablePropertiesContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_COLUMN(): TerminalNode {
		return this.getToken(HiveParser.KW_COLUMN, 0);
	}
	public KW_COMMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMMENT, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixStatsPart;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixStatsPart) {
	 		listener.enterAlterStatementSuffixStatsPart(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixStatsPart) {
	 		listener.exitAlterStatementSuffixStatsPart(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixStatsPart) {
			return visitor.visitAlterStatementSuffixStatsPart(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixMergeFilesContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CONCATENATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CONCATENATE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixMergeFiles;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixMergeFiles) {
	 		listener.enterAlterStatementSuffixMergeFiles(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixMergeFiles) {
	 		listener.exitAlterStatementSuffixMergeFiles(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixMergeFiles) {
			return visitor.visitAlterStatementSuffixMergeFiles(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixBucketNumContext extends ParserRuleContext {
	public _num!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_INTO(): TerminalNode {
		return this.getToken(HiveParser.KW_INTO, 0);
	}
	public KW_BUCKETS(): TerminalNode {
		return this.getToken(HiveParser.KW_BUCKETS, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixBucketNum;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixBucketNum) {
	 		listener.enterAlterStatementSuffixBucketNum(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixBucketNum) {
	 		listener.exitAlterStatementSuffixBucketNum(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixBucketNum) {
			return visitor.visitAlterStatementSuffixBucketNum(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockingContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_AND(): TerminalNode {
		return this.getToken(HiveParser.KW_AND, 0);
	}
	public KW_WAIT(): TerminalNode {
		return this.getToken(HiveParser.KW_WAIT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_blocking;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterBlocking) {
	 		listener.enterBlocking(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitBlocking) {
	 		listener.exitBlocking(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitBlocking) {
			return visitor.visitBlocking(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CompactPoolContext extends ParserRuleContext {
	public _poolName!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_POOL(): TerminalNode {
		return this.getToken(HiveParser.KW_POOL, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_compactPool;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCompactPool) {
	 		listener.enterCompactPool(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCompactPool) {
	 		listener.exitCompactPool(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCompactPool) {
			return visitor.visitCompactPool(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixCompactContext extends ParserRuleContext {
	public _compactType!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_COMPACT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMPACT, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public tableImplBuckets(): TableImplBucketsContext {
		return this.getTypedRuleContext(TableImplBucketsContext, 0) as TableImplBucketsContext;
	}
	public blocking(): BlockingContext {
		return this.getTypedRuleContext(BlockingContext, 0) as BlockingContext;
	}
	public compactPool(): CompactPoolContext {
		return this.getTypedRuleContext(CompactPoolContext, 0) as CompactPoolContext;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_OVERWRITE(): TerminalNode {
		return this.getToken(HiveParser.KW_OVERWRITE, 0);
	}
	public KW_TBLPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
	}
	public tableProperties(): TablePropertiesContext {
		return this.getTypedRuleContext(TablePropertiesContext, 0) as TablePropertiesContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixCompact;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixCompact) {
	 		listener.enterAlterStatementSuffixCompact(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixCompact) {
	 		listener.exitAlterStatementSuffixCompact(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixCompact) {
			return visitor.visitAlterStatementSuffixCompact(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixSetOwnerContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_OWNER(): TerminalNode {
		return this.getToken(HiveParser.KW_OWNER, 0);
	}
	public principalName(): PrincipalNameContext {
		return this.getTypedRuleContext(PrincipalNameContext, 0) as PrincipalNameContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixSetOwner;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixSetOwner) {
	 		listener.enterAlterStatementSuffixSetOwner(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixSetOwner) {
	 		listener.exitAlterStatementSuffixSetOwner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixSetOwner) {
			return visitor.visitAlterStatementSuffixSetOwner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixSetPartSpecContext extends ParserRuleContext {
	public _spec!: PartitionTransformSpecContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_PARTITION(): TerminalNode {
		return this.getToken(HiveParser.KW_PARTITION, 0);
	}
	public KW_SPEC(): TerminalNode {
		return this.getToken(HiveParser.KW_SPEC, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public partitionTransformSpec(): PartitionTransformSpecContext {
		return this.getTypedRuleContext(PartitionTransformSpecContext, 0) as PartitionTransformSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixSetPartSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixSetPartSpec) {
	 		listener.enterAlterStatementSuffixSetPartSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixSetPartSpec) {
	 		listener.exitAlterStatementSuffixSetPartSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixSetPartSpec) {
			return visitor.visitAlterStatementSuffixSetPartSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterStatementSuffixExecuteContext extends ParserRuleContext {
	public _rollbackParam!: Token;
	public _expireParam!: Token;
	public _snapshotParam!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_EXECUTE(): TerminalNode {
		return this.getToken(HiveParser.KW_EXECUTE, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public KW_ROLLBACK(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLLBACK, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public KW_EXPIRE_SNAPSHOTS(): TerminalNode {
		return this.getToken(HiveParser.KW_EXPIRE_SNAPSHOTS, 0);
	}
	public KW_SET_CURRENT_SNAPSHOT(): TerminalNode {
		return this.getToken(HiveParser.KW_SET_CURRENT_SNAPSHOT, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterStatementSuffixExecute;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterStatementSuffixExecute) {
	 		listener.enterAlterStatementSuffixExecute(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterStatementSuffixExecute) {
	 		listener.exitAlterStatementSuffixExecute(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterStatementSuffixExecute) {
			return visitor.visitAlterStatementSuffixExecute(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileFormatContext extends ParserRuleContext {
	public _inFmt!: Token;
	public _outFmt!: Token;
	public _serdeCls!: Token;
	public _inDriver!: Token;
	public _outDriver!: Token;
	public _genericSpec!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_INPUTFORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
	}
	public KW_OUTPUTFORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_OUTPUTFORMAT, 0);
	}
	public KW_SERDE(): TerminalNode {
		return this.getToken(HiveParser.KW_SERDE, 0);
	}
	public StringLiteral_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.StringLiteral);
	}
	public StringLiteral(i: number): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, i);
	}
	public KW_INPUTDRIVER(): TerminalNode {
		return this.getToken(HiveParser.KW_INPUTDRIVER, 0);
	}
	public KW_OUTPUTDRIVER(): TerminalNode {
		return this.getToken(HiveParser.KW_OUTPUTDRIVER, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_fileFormat;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterFileFormat) {
	 		listener.enterFileFormat(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitFileFormat) {
	 		listener.exitFileFormat(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFileFormat) {
			return visitor.visitFileFormat(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDataConnectorStatementSuffixContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public alterDataConnectorSuffixProperties(): AlterDataConnectorSuffixPropertiesContext {
		return this.getTypedRuleContext(AlterDataConnectorSuffixPropertiesContext, 0) as AlterDataConnectorSuffixPropertiesContext;
	}
	public alterDataConnectorSuffixSetOwner(): AlterDataConnectorSuffixSetOwnerContext {
		return this.getTypedRuleContext(AlterDataConnectorSuffixSetOwnerContext, 0) as AlterDataConnectorSuffixSetOwnerContext;
	}
	public alterDataConnectorSuffixSetUrl(): AlterDataConnectorSuffixSetUrlContext {
		return this.getTypedRuleContext(AlterDataConnectorSuffixSetUrlContext, 0) as AlterDataConnectorSuffixSetUrlContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterDataConnectorStatementSuffix;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterDataConnectorStatementSuffix) {
	 		listener.enterAlterDataConnectorStatementSuffix(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterDataConnectorStatementSuffix) {
	 		listener.exitAlterDataConnectorStatementSuffix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDataConnectorStatementSuffix) {
			return visitor.visitAlterDataConnectorStatementSuffix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDataConnectorSuffixPropertiesContext extends ParserRuleContext {
	public _name!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_DCPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_DCPROPERTIES, 0);
	}
	public dcProperties(): DcPropertiesContext {
		return this.getTypedRuleContext(DcPropertiesContext, 0) as DcPropertiesContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterDataConnectorSuffixProperties;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterDataConnectorSuffixProperties) {
	 		listener.enterAlterDataConnectorSuffixProperties(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterDataConnectorSuffixProperties) {
	 		listener.exitAlterDataConnectorSuffixProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDataConnectorSuffixProperties) {
			return visitor.visitAlterDataConnectorSuffixProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDataConnectorSuffixSetOwnerContext extends ParserRuleContext {
	public _dcName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_OWNER(): TerminalNode {
		return this.getToken(HiveParser.KW_OWNER, 0);
	}
	public principalName(): PrincipalNameContext {
		return this.getTypedRuleContext(PrincipalNameContext, 0) as PrincipalNameContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterDataConnectorSuffixSetOwner;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterDataConnectorSuffixSetOwner) {
	 		listener.enterAlterDataConnectorSuffixSetOwner(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterDataConnectorSuffixSetOwner) {
	 		listener.exitAlterDataConnectorSuffixSetOwner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDataConnectorSuffixSetOwner) {
			return visitor.visitAlterDataConnectorSuffixSetOwner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDataConnectorSuffixSetUrlContext extends ParserRuleContext {
	public _dcName!: Id_Context;
	public _newUri!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public KW_URL(): TerminalNode {
		return this.getToken(HiveParser.KW_URL, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterDataConnectorSuffixSetUrl;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterDataConnectorSuffixSetUrl) {
	 		listener.enterAlterDataConnectorSuffixSetUrl(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterDataConnectorSuffixSetUrl) {
	 		listener.exitAlterDataConnectorSuffixSetUrl(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterDataConnectorSuffixSetUrl) {
			return visitor.visitAlterDataConnectorSuffixSetUrl(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LikeTableOrFileContext extends ParserRuleContext {
	public _format!: Id_Context;
	public _uri!: Token;
	public _likeName!: TableNameContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_LIKE(): TerminalNode {
		return this.getToken(HiveParser.KW_LIKE, 0);
	}
	public KW_FILE(): TerminalNode {
		return this.getToken(HiveParser.KW_FILE, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_likeTableOrFile;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterLikeTableOrFile) {
	 		listener.enterLikeTableOrFile(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitLikeTableOrFile) {
	 		listener.exitLikeTableOrFile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLikeTableOrFile) {
			return visitor.visitLikeTableOrFile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTableStatementContext extends ParserRuleContext {
	public _temp!: Token;
	public _trans!: Token;
	public _ext!: Token;
	public _name!: TableNameContext;
	public _mgd!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public likeTableOrFile(): LikeTableOrFileContext {
		return this.getTypedRuleContext(LikeTableOrFileContext, 0) as LikeTableOrFileContext;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public KW_TEMPORARY(): TerminalNode {
		return this.getToken(HiveParser.KW_TEMPORARY, 0);
	}
	public KW_TRANSACTIONAL(): TerminalNode {
		return this.getToken(HiveParser.KW_TRANSACTIONAL, 0);
	}
	public KW_EXTERNAL(): TerminalNode {
		return this.getToken(HiveParser.KW_EXTERNAL, 0);
	}
	public createTablePartitionSpec(): CreateTablePartitionSpecContext {
		return this.getTypedRuleContext(CreateTablePartitionSpecContext, 0) as CreateTablePartitionSpecContext;
	}
	public tableRowFormat(): TableRowFormatContext {
		return this.getTypedRuleContext(TableRowFormatContext, 0) as TableRowFormatContext;
	}
	public tableFileFormat(): TableFileFormatContext {
		return this.getTypedRuleContext(TableFileFormatContext, 0) as TableFileFormatContext;
	}
	public tableLocation(): TableLocationContext {
		return this.getTypedRuleContext(TableLocationContext, 0) as TableLocationContext;
	}
	public tablePropertiesPrefixed(): TablePropertiesPrefixedContext {
		return this.getTypedRuleContext(TablePropertiesPrefixedContext, 0) as TablePropertiesPrefixedContext;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public columnNameTypeOrConstraintList(): ColumnNameTypeOrConstraintListContext {
		return this.getTypedRuleContext(ColumnNameTypeOrConstraintListContext, 0) as ColumnNameTypeOrConstraintListContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public tableComment(): TableCommentContext {
		return this.getTypedRuleContext(TableCommentContext, 0) as TableCommentContext;
	}
	public tableBuckets(): TableBucketsContext {
		return this.getTypedRuleContext(TableBucketsContext, 0) as TableBucketsContext;
	}
	public tableSkewed(): TableSkewedContext {
		return this.getTypedRuleContext(TableSkewedContext, 0) as TableSkewedContext;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public selectStatementWithCTE(): SelectStatementWithCTEContext {
		return this.getTypedRuleContext(SelectStatementWithCTEContext, 0) as SelectStatementWithCTEContext;
	}
	public KW_MANAGED(): TerminalNode {
		return this.getToken(HiveParser.KW_MANAGED, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createTableStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateTableStatement) {
	 		listener.enterCreateTableStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateTableStatement) {
	 		listener.exitCreateTableStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateTableStatement) {
			return visitor.visitCreateTableStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDataConnectorStatementContext extends ParserRuleContext {
	public _name!: Id_Context;
	public _dcprops!: DcPropertiesContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_DATACONNECTOR(): TerminalNode {
		return this.getToken(HiveParser.KW_DATACONNECTOR, 0);
	}
	public dataConnectorType(): DataConnectorTypeContext {
		return this.getTypedRuleContext(DataConnectorTypeContext, 0) as DataConnectorTypeContext;
	}
	public dataConnectorUrl(): DataConnectorUrlContext {
		return this.getTypedRuleContext(DataConnectorUrlContext, 0) as DataConnectorUrlContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public dataConnectorComment(): DataConnectorCommentContext {
		return this.getTypedRuleContext(DataConnectorCommentContext, 0) as DataConnectorCommentContext;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_DCPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_DCPROPERTIES, 0);
	}
	public dcProperties(): DcPropertiesContext {
		return this.getTypedRuleContext(DcPropertiesContext, 0) as DcPropertiesContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createDataConnectorStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateDataConnectorStatement) {
	 		listener.enterCreateDataConnectorStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateDataConnectorStatement) {
	 		listener.exitCreateDataConnectorStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateDataConnectorStatement) {
			return visitor.visitCreateDataConnectorStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataConnectorCommentContext extends ParserRuleContext {
	public _comment!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_COMMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMMENT, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dataConnectorComment;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDataConnectorComment) {
	 		listener.enterDataConnectorComment(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDataConnectorComment) {
	 		listener.exitDataConnectorComment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDataConnectorComment) {
			return visitor.visitDataConnectorComment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataConnectorUrlContext extends ParserRuleContext {
	public _url!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_URL(): TerminalNode {
		return this.getToken(HiveParser.KW_URL, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dataConnectorUrl;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDataConnectorUrl) {
	 		listener.enterDataConnectorUrl(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDataConnectorUrl) {
	 		listener.exitDataConnectorUrl(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDataConnectorUrl) {
			return visitor.visitDataConnectorUrl(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataConnectorTypeContext extends ParserRuleContext {
	public _dcType!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TYPE(): TerminalNode {
		return this.getToken(HiveParser.KW_TYPE, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dataConnectorType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDataConnectorType) {
	 		listener.enterDataConnectorType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDataConnectorType) {
	 		listener.exitDataConnectorType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDataConnectorType) {
			return visitor.visitDataConnectorType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DcPropertiesContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public dbPropertiesList(): DbPropertiesListContext {
		return this.getTypedRuleContext(DbPropertiesListContext, 0) as DbPropertiesListContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dcProperties;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDcProperties) {
	 		listener.enterDcProperties(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDcProperties) {
	 		listener.exitDcProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDcProperties) {
			return visitor.visitDcProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropDataConnectorStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_DATACONNECTOR(): TerminalNode {
		return this.getToken(HiveParser.KW_DATACONNECTOR, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropDataConnectorStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropDataConnectorStatement) {
	 		listener.enterDropDataConnectorStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropDataConnectorStatement) {
	 		listener.exitDropDataConnectorStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropDataConnectorStatement) {
			return visitor.visitDropDataConnectorStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableAllColumnsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STAR(): TerminalNode {
		return this.getToken(HiveParser.STAR, 0);
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public DOT(): TerminalNode {
		return this.getToken(HiveParser.DOT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableAllColumns;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableAllColumns) {
	 		listener.enterTableAllColumns(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableAllColumns) {
	 		listener.exitTableAllColumns(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableAllColumns) {
			return visitor.visitTableAllColumns(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableOrColumnContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableOrColumn;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableOrColumn) {
	 		listener.enterTableOrColumn(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableOrColumn) {
	 		listener.exitTableOrColumn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableOrColumn) {
			return visitor.visitTableOrColumn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefaultValueContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DEFAULT(): TerminalNode {
		return this.getToken(HiveParser.KW_DEFAULT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_defaultValue;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDefaultValue) {
	 		listener.enterDefaultValue(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDefaultValue) {
	 		listener.exitDefaultValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDefaultValue) {
			return visitor.visitDefaultValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_expressionList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExpressionList) {
	 		listener.enterExpressionList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExpressionList) {
	 		listener.exitExpressionList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpressionList) {
			return visitor.visitExpressionList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AliasListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_aliasList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAliasList) {
	 		listener.enterAliasList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAliasList) {
	 		listener.exitAliasList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAliasList) {
			return visitor.visitAliasList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FromClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_FROM(): TerminalNode {
		return this.getToken(HiveParser.KW_FROM, 0);
	}
	public fromSource(): FromSourceContext {
		return this.getTypedRuleContext(FromSourceContext, 0) as FromSourceContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_fromClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterFromClause) {
	 		listener.enterFromClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitFromClause) {
	 		listener.exitFromClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFromClause) {
			return visitor.visitFromClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FromSourceContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uniqueJoinToken(): UniqueJoinTokenContext {
		return this.getTypedRuleContext(UniqueJoinTokenContext, 0) as UniqueJoinTokenContext;
	}
	public uniqueJoinSource_list(): UniqueJoinSourceContext[] {
		return this.getTypedRuleContexts(UniqueJoinSourceContext) as UniqueJoinSourceContext[];
	}
	public uniqueJoinSource(i: number): UniqueJoinSourceContext {
		return this.getTypedRuleContext(UniqueJoinSourceContext, i) as UniqueJoinSourceContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
	public joinSource(): JoinSourceContext {
		return this.getTypedRuleContext(JoinSourceContext, 0) as JoinSourceContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_fromSource;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterFromSource) {
	 		listener.enterFromSource(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitFromSource) {
	 		listener.exitFromSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFromSource) {
			return visitor.visitFromSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AtomjoinSourceContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableSource(): TableSourceContext {
		return this.getTypedRuleContext(TableSourceContext, 0) as TableSourceContext;
	}
	public lateralView_list(): LateralViewContext[] {
		return this.getTypedRuleContexts(LateralViewContext) as LateralViewContext[];
	}
	public lateralView(i: number): LateralViewContext {
		return this.getTypedRuleContext(LateralViewContext, i) as LateralViewContext;
	}
	public virtualTableSource(): VirtualTableSourceContext {
		return this.getTypedRuleContext(VirtualTableSourceContext, 0) as VirtualTableSourceContext;
	}
	public subQuerySource(): SubQuerySourceContext {
		return this.getTypedRuleContext(SubQuerySourceContext, 0) as SubQuerySourceContext;
	}
	public partitionedTableFunction(): PartitionedTableFunctionContext {
		return this.getTypedRuleContext(PartitionedTableFunctionContext, 0) as PartitionedTableFunctionContext;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public joinSource(): JoinSourceContext {
		return this.getTypedRuleContext(JoinSourceContext, 0) as JoinSourceContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_atomjoinSource;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAtomjoinSource) {
	 		listener.enterAtomjoinSource(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAtomjoinSource) {
	 		listener.exitAtomjoinSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAtomjoinSource) {
			return visitor.visitAtomjoinSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinSourceContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public atomjoinSource(): AtomjoinSourceContext {
		return this.getTypedRuleContext(AtomjoinSourceContext, 0) as AtomjoinSourceContext;
	}
	public joinToken_list(): JoinTokenContext[] {
		return this.getTypedRuleContexts(JoinTokenContext) as JoinTokenContext[];
	}
	public joinToken(i: number): JoinTokenContext {
		return this.getTypedRuleContext(JoinTokenContext, i) as JoinTokenContext;
	}
	public joinSourcePart_list(): JoinSourcePartContext[] {
		return this.getTypedRuleContexts(JoinSourcePartContext) as JoinSourcePartContext[];
	}
	public joinSourcePart(i: number): JoinSourcePartContext {
		return this.getTypedRuleContext(JoinSourcePartContext, i) as JoinSourcePartContext;
	}
	public KW_ON_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_ON);
	}
	public KW_ON(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_ON, i);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public KW_USING_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_USING);
	}
	public KW_USING(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_USING, i);
	}
	public columnParenthesesList_list(): ColumnParenthesesListContext[] {
		return this.getTypedRuleContexts(ColumnParenthesesListContext) as ColumnParenthesesListContext[];
	}
	public columnParenthesesList(i: number): ColumnParenthesesListContext {
		return this.getTypedRuleContext(ColumnParenthesesListContext, i) as ColumnParenthesesListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_joinSource;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterJoinSource) {
	 		listener.enterJoinSource(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitJoinSource) {
	 		listener.exitJoinSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitJoinSource) {
			return visitor.visitJoinSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinSourcePartContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableSource(): TableSourceContext {
		return this.getTypedRuleContext(TableSourceContext, 0) as TableSourceContext;
	}
	public virtualTableSource(): VirtualTableSourceContext {
		return this.getTypedRuleContext(VirtualTableSourceContext, 0) as VirtualTableSourceContext;
	}
	public subQuerySource(): SubQuerySourceContext {
		return this.getTypedRuleContext(SubQuerySourceContext, 0) as SubQuerySourceContext;
	}
	public partitionedTableFunction(): PartitionedTableFunctionContext {
		return this.getTypedRuleContext(PartitionedTableFunctionContext, 0) as PartitionedTableFunctionContext;
	}
	public lateralView_list(): LateralViewContext[] {
		return this.getTypedRuleContexts(LateralViewContext) as LateralViewContext[];
	}
	public lateralView(i: number): LateralViewContext {
		return this.getTypedRuleContext(LateralViewContext, i) as LateralViewContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_joinSourcePart;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterJoinSourcePart) {
	 		listener.enterJoinSourcePart(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitJoinSourcePart) {
	 		listener.exitJoinSourcePart(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitJoinSourcePart) {
			return visitor.visitJoinSourcePart(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UniqueJoinSourceContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public uniqueJoinTableSource(): UniqueJoinTableSourceContext {
		return this.getTypedRuleContext(UniqueJoinTableSourceContext, 0) as UniqueJoinTableSourceContext;
	}
	public uniqueJoinExpr(): UniqueJoinExprContext {
		return this.getTypedRuleContext(UniqueJoinExprContext, 0) as UniqueJoinExprContext;
	}
	public KW_PRESERVE(): TerminalNode {
		return this.getToken(HiveParser.KW_PRESERVE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_uniqueJoinSource;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterUniqueJoinSource) {
	 		listener.enterUniqueJoinSource(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitUniqueJoinSource) {
	 		listener.exitUniqueJoinSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUniqueJoinSource) {
			return visitor.visitUniqueJoinSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UniqueJoinExprContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public expressionList(): ExpressionListContext {
		return this.getTypedRuleContext(ExpressionListContext, 0) as ExpressionListContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_uniqueJoinExpr;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterUniqueJoinExpr) {
	 		listener.enterUniqueJoinExpr(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitUniqueJoinExpr) {
	 		listener.exitUniqueJoinExpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUniqueJoinExpr) {
			return visitor.visitUniqueJoinExpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UniqueJoinTokenContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UNIQUEJOIN(): TerminalNode {
		return this.getToken(HiveParser.KW_UNIQUEJOIN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_uniqueJoinToken;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterUniqueJoinToken) {
	 		listener.enterUniqueJoinToken(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitUniqueJoinToken) {
	 		listener.exitUniqueJoinToken(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUniqueJoinToken) {
			return visitor.visitUniqueJoinToken(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JoinTokenContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COMMA(): TerminalNode {
		return this.getToken(HiveParser.COMMA, 0);
	}
	public KW_JOIN(): TerminalNode {
		return this.getToken(HiveParser.KW_JOIN, 0);
	}
	public KW_INNER(): TerminalNode {
		return this.getToken(HiveParser.KW_INNER, 0);
	}
	public KW_CROSS(): TerminalNode {
		return this.getToken(HiveParser.KW_CROSS, 0);
	}
	public KW_LEFT(): TerminalNode {
		return this.getToken(HiveParser.KW_LEFT, 0);
	}
	public KW_RIGHT(): TerminalNode {
		return this.getToken(HiveParser.KW_RIGHT, 0);
	}
	public KW_FULL(): TerminalNode {
		return this.getToken(HiveParser.KW_FULL, 0);
	}
	public KW_OUTER(): TerminalNode {
		return this.getToken(HiveParser.KW_OUTER, 0);
	}
	public KW_SEMI(): TerminalNode {
		return this.getToken(HiveParser.KW_SEMI, 0);
	}
	public KW_ANTI(): TerminalNode {
		return this.getToken(HiveParser.KW_ANTI, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_joinToken;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterJoinToken) {
	 		listener.enterJoinToken(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitJoinToken) {
	 		listener.exitJoinToken(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitJoinToken) {
			return visitor.visitJoinToken(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LateralViewContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_LATERAL(): TerminalNode {
		return this.getToken(HiveParser.KW_LATERAL, 0);
	}
	public KW_VIEW(): TerminalNode {
		return this.getToken(HiveParser.KW_VIEW, 0);
	}
	public KW_OUTER(): TerminalNode {
		return this.getToken(HiveParser.KW_OUTER, 0);
	}
	public function_(): Function_Context {
		return this.getTypedRuleContext(Function_Context, 0) as Function_Context;
	}
	public tableAlias(): TableAliasContext {
		return this.getTypedRuleContext(TableAliasContext, 0) as TableAliasContext;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public LPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.LPAREN);
	}
	public LPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.LPAREN, i);
	}
	public valuesClause(): ValuesClauseContext {
		return this.getTypedRuleContext(ValuesClauseContext, 0) as ValuesClauseContext;
	}
	public RPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.RPAREN);
	}
	public RPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.RPAREN, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_lateralView;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterLateralView) {
	 		listener.enterLateralView(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitLateralView) {
	 		listener.exitLateralView(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitLateralView) {
			return visitor.visitLateralView(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableAliasContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableAlias;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableAlias) {
	 		listener.enterTableAlias(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableAlias) {
	 		listener.exitTableAlias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableAlias) {
			return visitor.visitTableAlias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableBucketSampleContext extends ParserRuleContext {
	public _numerator!: Token;
	public _denominator!: Token;
	public _expression!: ExpressionContext;
	public _expr: ExpressionContext[] = [];
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TABLESAMPLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLESAMPLE, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public KW_BUCKET(): TerminalNode {
		return this.getToken(HiveParser.KW_BUCKET, 0);
	}
	public KW_OUT(): TerminalNode {
		return this.getToken(HiveParser.KW_OUT, 0);
	}
	public KW_OF(): TerminalNode {
		return this.getToken(HiveParser.KW_OF, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public Number_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.Number);
	}
	public Number(i: number): TerminalNode {
		return this.getToken(HiveParser.Number, i);
	}
	public KW_ON(): TerminalNode {
		return this.getToken(HiveParser.KW_ON, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableBucketSample;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableBucketSample) {
	 		listener.enterTableBucketSample(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableBucketSample) {
	 		listener.exitTableBucketSample(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableBucketSample) {
			return visitor.visitTableBucketSample(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SplitSampleContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TABLESAMPLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLESAMPLE, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
	public ByteLengthLiteral(): TerminalNode {
		return this.getToken(HiveParser.ByteLengthLiteral, 0);
	}
	public KW_PERCENT(): TerminalNode {
		return this.getToken(HiveParser.KW_PERCENT, 0);
	}
	public KW_ROWS(): TerminalNode {
		return this.getToken(HiveParser.KW_ROWS, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_splitSample;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSplitSample) {
	 		listener.enterSplitSample(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSplitSample) {
	 		listener.exitSplitSample(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSplitSample) {
			return visitor.visitSplitSample(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableSampleContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableBucketSample(): TableBucketSampleContext {
		return this.getTypedRuleContext(TableBucketSampleContext, 0) as TableBucketSampleContext;
	}
	public splitSample(): SplitSampleContext {
		return this.getTypedRuleContext(SplitSampleContext, 0) as SplitSampleContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableSample;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableSample) {
	 		listener.enterTableSample(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableSample) {
	 		listener.exitTableSample(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableSample) {
			return visitor.visitTableSample(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableSourceContext extends ParserRuleContext {
	public _tabname!: TableNameContext;
	public _props!: TablePropertiesContext;
	public _ts!: TableSampleContext;
	public _asOf!: AsOfClauseContext;
	public _alias!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public tableProperties(): TablePropertiesContext {
		return this.getTypedRuleContext(TablePropertiesContext, 0) as TablePropertiesContext;
	}
	public tableSample(): TableSampleContext {
		return this.getTypedRuleContext(TableSampleContext, 0) as TableSampleContext;
	}
	public asOfClause(): AsOfClauseContext {
		return this.getTypedRuleContext(AsOfClauseContext, 0) as AsOfClauseContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableSource;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableSource) {
	 		listener.enterTableSource(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableSource) {
	 		listener.exitTableSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableSource) {
			return visitor.visitTableSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AsOfClauseContext extends ParserRuleContext {
	public _asOfTime!: ExpressionContext;
	public _asOfVersion!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_FOR_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_FOR);
	}
	public KW_FOR(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_FOR, i);
	}
	public KW_SYSTEM_TIME(): TerminalNode {
		return this.getToken(HiveParser.KW_SYSTEM_TIME, 0);
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public KW_OF(): TerminalNode {
		return this.getToken(HiveParser.KW_OF, 0);
	}
	public KW_SYSTEM_VERSION(): TerminalNode {
		return this.getToken(HiveParser.KW_SYSTEM_VERSION, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_asOfClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAsOfClause) {
	 		listener.enterAsOfClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAsOfClause) {
	 		listener.exitAsOfClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAsOfClause) {
			return visitor.visitAsOfClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UniqueJoinTableSourceContext extends ParserRuleContext {
	public _tabname!: TableNameContext;
	public _ts!: TableSampleContext;
	public _alias!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public tableSample(): TableSampleContext {
		return this.getTypedRuleContext(TableSampleContext, 0) as TableSampleContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_uniqueJoinTableSource;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterUniqueJoinTableSource) {
	 		listener.enterUniqueJoinTableSource(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitUniqueJoinTableSource) {
	 		listener.exitUniqueJoinTableSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUniqueJoinTableSource) {
			return visitor.visitUniqueJoinTableSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableNameContext extends ParserRuleContext {
	public _db!: Id_Context;
	public _tab!: Id_Context;
	public _meta!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public DOT_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.DOT);
	}
	public DOT(i: number): TerminalNode {
		return this.getToken(HiveParser.DOT, i);
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableName;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableName) {
	 		listener.enterTableName(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableName) {
	 		listener.exitTableName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableName) {
			return visitor.visitTableName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ViewNameContext extends ParserRuleContext {
	public _db!: Id_Context;
	public _view!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public DOT(): TerminalNode {
		return this.getToken(HiveParser.DOT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_viewName;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterViewName) {
	 		listener.enterViewName(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitViewName) {
	 		listener.exitViewName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitViewName) {
			return visitor.visitViewName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubQuerySourceContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public queryStatementExpression(): QueryStatementExpressionContext {
		return this.getTypedRuleContext(QueryStatementExpressionContext, 0) as QueryStatementExpressionContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_subQuerySource;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSubQuerySource) {
	 		listener.enterSubQuerySource(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSubQuerySource) {
	 		listener.exitSubQuerySource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSubQuerySource) {
			return visitor.visitSubQuerySource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitioningSpecContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public partitionByClause(): PartitionByClauseContext {
		return this.getTypedRuleContext(PartitionByClauseContext, 0) as PartitionByClauseContext;
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public distributeByClause(): DistributeByClauseContext {
		return this.getTypedRuleContext(DistributeByClauseContext, 0) as DistributeByClauseContext;
	}
	public sortByClause(): SortByClauseContext {
		return this.getTypedRuleContext(SortByClauseContext, 0) as SortByClauseContext;
	}
	public clusterByClause(): ClusterByClauseContext {
		return this.getTypedRuleContext(ClusterByClauseContext, 0) as ClusterByClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partitioningSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartitioningSpec) {
	 		listener.enterPartitioningSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartitioningSpec) {
	 		listener.exitPartitioningSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitioningSpec) {
			return visitor.visitPartitioningSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionTableFunctionSourceContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public subQuerySource(): SubQuerySourceContext {
		return this.getTypedRuleContext(SubQuerySourceContext, 0) as SubQuerySourceContext;
	}
	public tableSource(): TableSourceContext {
		return this.getTypedRuleContext(TableSourceContext, 0) as TableSourceContext;
	}
	public partitionedTableFunction(): PartitionedTableFunctionContext {
		return this.getTypedRuleContext(PartitionedTableFunctionContext, 0) as PartitionedTableFunctionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partitionTableFunctionSource;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartitionTableFunctionSource) {
	 		listener.enterPartitionTableFunctionSource(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartitionTableFunctionSource) {
	 		listener.exitPartitionTableFunctionSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionTableFunctionSource) {
			return visitor.visitPartitionTableFunctionSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionedTableFunctionContext extends ParserRuleContext {
	public _n!: Id_Context;
	public _ptfsrc!: PartitionTableFunctionSourceContext;
	public _spec!: PartitioningSpecContext;
	public _alias!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.LPAREN);
	}
	public LPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.LPAREN, i);
	}
	public KW_ON(): TerminalNode {
		return this.getToken(HiveParser.KW_ON, 0);
	}
	public RPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.RPAREN);
	}
	public RPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.RPAREN, i);
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public partitionTableFunctionSource(): PartitionTableFunctionSourceContext {
		return this.getTypedRuleContext(PartitionTableFunctionSourceContext, 0) as PartitionTableFunctionSourceContext;
	}
	public Identifier_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.Identifier);
	}
	public Identifier(i: number): TerminalNode {
		return this.getToken(HiveParser.Identifier, i);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public partitioningSpec(): PartitioningSpecContext {
		return this.getTypedRuleContext(PartitioningSpecContext, 0) as PartitioningSpecContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partitionedTableFunction;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartitionedTableFunction) {
	 		listener.enterPartitionedTableFunction(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartitionedTableFunction) {
	 		listener.exitPartitionedTableFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionedTableFunction) {
			return visitor.visitPartitionedTableFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhereClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_WHERE(): TerminalNode {
		return this.getToken(HiveParser.KW_WHERE, 0);
	}
	public searchCondition(): SearchConditionContext {
		return this.getTypedRuleContext(SearchConditionContext, 0) as SearchConditionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_whereClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWhereClause) {
	 		listener.enterWhereClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWhereClause) {
	 		listener.exitWhereClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWhereClause) {
			return visitor.visitWhereClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SearchConditionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_searchCondition;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSearchCondition) {
	 		listener.enterSearchCondition(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSearchCondition) {
	 		listener.exitSearchCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSearchCondition) {
			return visitor.visitSearchCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValuesSourceContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valuesClause(): ValuesClauseContext {
		return this.getTypedRuleContext(ValuesClauseContext, 0) as ValuesClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_valuesSource;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterValuesSource) {
	 		listener.enterValuesSource(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitValuesSource) {
	 		listener.exitValuesSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitValuesSource) {
			return visitor.visitValuesSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValuesClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_VALUES(): TerminalNode {
		return this.getToken(HiveParser.KW_VALUES, 0);
	}
	public valuesTableConstructor(): ValuesTableConstructorContext {
		return this.getTypedRuleContext(ValuesTableConstructorContext, 0) as ValuesTableConstructorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_valuesClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterValuesClause) {
	 		listener.enterValuesClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitValuesClause) {
	 		listener.exitValuesClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitValuesClause) {
			return visitor.visitValuesClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValuesTableConstructorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public valueRowConstructor_list(): ValueRowConstructorContext[] {
		return this.getTypedRuleContexts(ValueRowConstructorContext) as ValueRowConstructorContext[];
	}
	public valueRowConstructor(i: number): ValueRowConstructorContext {
		return this.getTypedRuleContext(ValueRowConstructorContext, i) as ValueRowConstructorContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
	public firstValueRowConstructor(): FirstValueRowConstructorContext {
		return this.getTypedRuleContext(FirstValueRowConstructorContext, 0) as FirstValueRowConstructorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_valuesTableConstructor;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterValuesTableConstructor) {
	 		listener.enterValuesTableConstructor(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitValuesTableConstructor) {
	 		listener.exitValuesTableConstructor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitValuesTableConstructor) {
			return visitor.visitValuesTableConstructor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ValueRowConstructorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expressionsInParenthesis(): ExpressionsInParenthesisContext {
		return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0) as ExpressionsInParenthesisContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_valueRowConstructor;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterValueRowConstructor) {
	 		listener.enterValueRowConstructor(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitValueRowConstructor) {
	 		listener.exitValueRowConstructor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitValueRowConstructor) {
			return visitor.visitValueRowConstructor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FirstValueRowConstructorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public firstExpressionsWithAlias(): FirstExpressionsWithAliasContext {
		return this.getTypedRuleContext(FirstExpressionsWithAliasContext, 0) as FirstExpressionsWithAliasContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_firstValueRowConstructor;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterFirstValueRowConstructor) {
	 		listener.enterFirstValueRowConstructor(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitFirstValueRowConstructor) {
	 		listener.exitFirstValueRowConstructor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFirstValueRowConstructor) {
			return visitor.visitFirstValueRowConstructor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VirtualTableSourceContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLE, 0);
	}
	public LPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.LPAREN);
	}
	public LPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.LPAREN, i);
	}
	public valuesClause(): ValuesClauseContext {
		return this.getTypedRuleContext(ValuesClauseContext, 0) as ValuesClauseContext;
	}
	public RPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.RPAREN);
	}
	public RPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.RPAREN, i);
	}
	public tableAlias(): TableAliasContext {
		return this.getTypedRuleContext(TableAliasContext, 0) as TableAliasContext;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_virtualTableSource;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterVirtualTableSource) {
	 		listener.enterVirtualTableSource(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitVirtualTableSource) {
	 		listener.exitVirtualTableSource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitVirtualTableSource) {
			return visitor.visitVirtualTableSource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SELECT(): TerminalNode {
		return this.getToken(HiveParser.KW_SELECT, 0);
	}
	public selectList(): SelectListContext {
		return this.getTypedRuleContext(SelectListContext, 0) as SelectListContext;
	}
	public KW_TRANSFORM(): TerminalNode {
		return this.getToken(HiveParser.KW_TRANSFORM, 0);
	}
	public selectTrfmClause(): SelectTrfmClauseContext {
		return this.getTypedRuleContext(SelectTrfmClauseContext, 0) as SelectTrfmClauseContext;
	}
	public QUERY_HINT(): TerminalNode {
		return this.getToken(HiveParser.QUERY_HINT, 0);
	}
	public all_distinct(): All_distinctContext {
		return this.getTypedRuleContext(All_distinctContext, 0) as All_distinctContext;
	}
	public trfmClause(): TrfmClauseContext {
		return this.getTypedRuleContext(TrfmClauseContext, 0) as TrfmClauseContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_selectClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSelectClause) {
	 		listener.enterSelectClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSelectClause) {
	 		listener.exitSelectClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectClause) {
			return visitor.visitSelectClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class All_distinctContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ALL(): TerminalNode {
		return this.getToken(HiveParser.KW_ALL, 0);
	}
	public KW_DISTINCT(): TerminalNode {
		return this.getToken(HiveParser.KW_DISTINCT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_all_distinct;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAll_distinct) {
	 		listener.enterAll_distinct(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAll_distinct) {
	 		listener.exitAll_distinct(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAll_distinct) {
			return visitor.visitAll_distinct(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectItem_list(): SelectItemContext[] {
		return this.getTypedRuleContexts(SelectItemContext) as SelectItemContext[];
	}
	public selectItem(i: number): SelectItemContext {
		return this.getTypedRuleContext(SelectItemContext, i) as SelectItemContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_selectList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSelectList) {
	 		listener.enterSelectList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSelectList) {
	 		listener.exitSelectList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectList) {
			return visitor.visitSelectList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectTrfmClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.LPAREN);
	}
	public LPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.LPAREN, i);
	}
	public selectExpressionList(): SelectExpressionListContext {
		return this.getTypedRuleContext(SelectExpressionListContext, 0) as SelectExpressionListContext;
	}
	public RPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.RPAREN);
	}
	public RPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.RPAREN, i);
	}
	public rowFormat_list(): RowFormatContext[] {
		return this.getTypedRuleContexts(RowFormatContext) as RowFormatContext[];
	}
	public rowFormat(i: number): RowFormatContext {
		return this.getTypedRuleContext(RowFormatContext, i) as RowFormatContext;
	}
	public recordWriter(): RecordWriterContext {
		return this.getTypedRuleContext(RecordWriterContext, 0) as RecordWriterContext;
	}
	public KW_USING(): TerminalNode {
		return this.getToken(HiveParser.KW_USING, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public recordReader(): RecordReaderContext {
		return this.getTypedRuleContext(RecordReaderContext, 0) as RecordReaderContext;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public aliasList(): AliasListContext {
		return this.getTypedRuleContext(AliasListContext, 0) as AliasListContext;
	}
	public columnNameTypeList(): ColumnNameTypeListContext {
		return this.getTypedRuleContext(ColumnNameTypeListContext, 0) as ColumnNameTypeListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_selectTrfmClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSelectTrfmClause) {
	 		listener.enterSelectTrfmClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSelectTrfmClause) {
	 		listener.exitSelectTrfmClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectTrfmClause) {
			return visitor.visitSelectTrfmClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectItemContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableAllColumns(): TableAllColumnsContext {
		return this.getTypedRuleContext(TableAllColumnsContext, 0) as TableAllColumnsContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_selectItem;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSelectItem) {
	 		listener.enterSelectItem(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSelectItem) {
	 		listener.exitSelectItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectItem) {
			return visitor.visitSelectItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TrfmClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectExpressionList(): SelectExpressionListContext {
		return this.getTypedRuleContext(SelectExpressionListContext, 0) as SelectExpressionListContext;
	}
	public rowFormat_list(): RowFormatContext[] {
		return this.getTypedRuleContexts(RowFormatContext) as RowFormatContext[];
	}
	public rowFormat(i: number): RowFormatContext {
		return this.getTypedRuleContext(RowFormatContext, i) as RowFormatContext;
	}
	public recordWriter(): RecordWriterContext {
		return this.getTypedRuleContext(RecordWriterContext, 0) as RecordWriterContext;
	}
	public KW_USING(): TerminalNode {
		return this.getToken(HiveParser.KW_USING, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public recordReader(): RecordReaderContext {
		return this.getTypedRuleContext(RecordReaderContext, 0) as RecordReaderContext;
	}
	public KW_MAP(): TerminalNode {
		return this.getToken(HiveParser.KW_MAP, 0);
	}
	public KW_REDUCE(): TerminalNode {
		return this.getToken(HiveParser.KW_REDUCE, 0);
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public aliasList(): AliasListContext {
		return this.getTypedRuleContext(AliasListContext, 0) as AliasListContext;
	}
	public columnNameTypeList(): ColumnNameTypeListContext {
		return this.getTypedRuleContext(ColumnNameTypeListContext, 0) as ColumnNameTypeListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_trfmClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTrfmClause) {
	 		listener.enterTrfmClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTrfmClause) {
	 		listener.exitTrfmClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTrfmClause) {
			return visitor.visitTrfmClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableAllColumns(): TableAllColumnsContext {
		return this.getTypedRuleContext(TableAllColumnsContext, 0) as TableAllColumnsContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_selectExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSelectExpression) {
	 		listener.enterSelectExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSelectExpression) {
	 		listener.exitSelectExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectExpression) {
			return visitor.visitSelectExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectExpressionListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public selectExpression_list(): SelectExpressionContext[] {
		return this.getTypedRuleContexts(SelectExpressionContext) as SelectExpressionContext[];
	}
	public selectExpression(i: number): SelectExpressionContext {
		return this.getTypedRuleContext(SelectExpressionContext, i) as SelectExpressionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_selectExpressionList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSelectExpressionList) {
	 		listener.enterSelectExpressionList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSelectExpressionList) {
	 		listener.exitSelectExpressionList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSelectExpressionList) {
			return visitor.visitSelectExpressionList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_clauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_WINDOW(): TerminalNode {
		return this.getToken(HiveParser.KW_WINDOW, 0);
	}
	public window_defn_list(): Window_defnContext[] {
		return this.getTypedRuleContexts(Window_defnContext) as Window_defnContext[];
	}
	public window_defn(i: number): Window_defnContext {
		return this.getTypedRuleContext(Window_defnContext, i) as Window_defnContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_window_clause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWindow_clause) {
	 		listener.enterWindow_clause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWindow_clause) {
	 		listener.exitWindow_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_clause) {
			return visitor.visitWindow_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_defnContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public window_specification(): Window_specificationContext {
		return this.getTypedRuleContext(Window_specificationContext, 0) as Window_specificationContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_window_defn;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWindow_defn) {
	 		listener.enterWindow_defn(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWindow_defn) {
	 		listener.exitWindow_defn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_defn) {
			return visitor.visitWindow_defn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_specificationContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public partitioningSpec(): PartitioningSpecContext {
		return this.getTypedRuleContext(PartitioningSpecContext, 0) as PartitioningSpecContext;
	}
	public window_frame(): Window_frameContext {
		return this.getTypedRuleContext(Window_frameContext, 0) as Window_frameContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_window_specification;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWindow_specification) {
	 		listener.enterWindow_specification(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWindow_specification) {
	 		listener.exitWindow_specification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_specification) {
			return visitor.visitWindow_specification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_frameContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public window_range_expression(): Window_range_expressionContext {
		return this.getTypedRuleContext(Window_range_expressionContext, 0) as Window_range_expressionContext;
	}
	public window_value_expression(): Window_value_expressionContext {
		return this.getTypedRuleContext(Window_value_expressionContext, 0) as Window_value_expressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_window_frame;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWindow_frame) {
	 		listener.enterWindow_frame(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWindow_frame) {
	 		listener.exitWindow_frame(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_frame) {
			return visitor.visitWindow_frame(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_range_expressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ROWS(): TerminalNode {
		return this.getToken(HiveParser.KW_ROWS, 0);
	}
	public window_frame_start_boundary(): Window_frame_start_boundaryContext {
		return this.getTypedRuleContext(Window_frame_start_boundaryContext, 0) as Window_frame_start_boundaryContext;
	}
	public KW_BETWEEN(): TerminalNode {
		return this.getToken(HiveParser.KW_BETWEEN, 0);
	}
	public window_frame_boundary_list(): Window_frame_boundaryContext[] {
		return this.getTypedRuleContexts(Window_frame_boundaryContext) as Window_frame_boundaryContext[];
	}
	public window_frame_boundary(i: number): Window_frame_boundaryContext {
		return this.getTypedRuleContext(Window_frame_boundaryContext, i) as Window_frame_boundaryContext;
	}
	public KW_AND(): TerminalNode {
		return this.getToken(HiveParser.KW_AND, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_window_range_expression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWindow_range_expression) {
	 		listener.enterWindow_range_expression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWindow_range_expression) {
	 		listener.exitWindow_range_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_range_expression) {
			return visitor.visitWindow_range_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_value_expressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_RANGE(): TerminalNode {
		return this.getToken(HiveParser.KW_RANGE, 0);
	}
	public window_frame_start_boundary(): Window_frame_start_boundaryContext {
		return this.getTypedRuleContext(Window_frame_start_boundaryContext, 0) as Window_frame_start_boundaryContext;
	}
	public KW_BETWEEN(): TerminalNode {
		return this.getToken(HiveParser.KW_BETWEEN, 0);
	}
	public window_frame_boundary_list(): Window_frame_boundaryContext[] {
		return this.getTypedRuleContexts(Window_frame_boundaryContext) as Window_frame_boundaryContext[];
	}
	public window_frame_boundary(i: number): Window_frame_boundaryContext {
		return this.getTypedRuleContext(Window_frame_boundaryContext, i) as Window_frame_boundaryContext;
	}
	public KW_AND(): TerminalNode {
		return this.getToken(HiveParser.KW_AND, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_window_value_expression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWindow_value_expression) {
	 		listener.enterWindow_value_expression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWindow_value_expression) {
	 		listener.exitWindow_value_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_value_expression) {
			return visitor.visitWindow_value_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_frame_start_boundaryContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UNBOUNDED(): TerminalNode {
		return this.getToken(HiveParser.KW_UNBOUNDED, 0);
	}
	public KW_PRECEDING(): TerminalNode {
		return this.getToken(HiveParser.KW_PRECEDING, 0);
	}
	public KW_CURRENT(): TerminalNode {
		return this.getToken(HiveParser.KW_CURRENT, 0);
	}
	public KW_ROW(): TerminalNode {
		return this.getToken(HiveParser.KW_ROW, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_window_frame_start_boundary;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWindow_frame_start_boundary) {
	 		listener.enterWindow_frame_start_boundary(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWindow_frame_start_boundary) {
	 		listener.exitWindow_frame_start_boundary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_frame_start_boundary) {
			return visitor.visitWindow_frame_start_boundary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_frame_boundaryContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UNBOUNDED(): TerminalNode {
		return this.getToken(HiveParser.KW_UNBOUNDED, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
	public KW_PRECEDING(): TerminalNode {
		return this.getToken(HiveParser.KW_PRECEDING, 0);
	}
	public KW_FOLLOWING(): TerminalNode {
		return this.getToken(HiveParser.KW_FOLLOWING, 0);
	}
	public KW_CURRENT(): TerminalNode {
		return this.getToken(HiveParser.KW_CURRENT, 0);
	}
	public KW_ROW(): TerminalNode {
		return this.getToken(HiveParser.KW_ROW, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_window_frame_boundary;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWindow_frame_boundary) {
	 		listener.enterWindow_frame_boundary(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWindow_frame_boundary) {
	 		listener.exitWindow_frame_boundary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWindow_frame_boundary) {
			return visitor.visitWindow_frame_boundary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupByClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_GROUP(): TerminalNode {
		return this.getToken(HiveParser.KW_GROUP, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
	public groupby_expression(): Groupby_expressionContext {
		return this.getTypedRuleContext(Groupby_expressionContext, 0) as Groupby_expressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_groupByClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterGroupByClause) {
	 		listener.enterGroupByClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitGroupByClause) {
	 		listener.exitGroupByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGroupByClause) {
			return visitor.visitGroupByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Groupby_expressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public rollupStandard(): RollupStandardContext {
		return this.getTypedRuleContext(RollupStandardContext, 0) as RollupStandardContext;
	}
	public rollupOldSyntax(): RollupOldSyntaxContext {
		return this.getTypedRuleContext(RollupOldSyntaxContext, 0) as RollupOldSyntaxContext;
	}
	public groupByEmpty(): GroupByEmptyContext {
		return this.getTypedRuleContext(GroupByEmptyContext, 0) as GroupByEmptyContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_groupby_expression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterGroupby_expression) {
	 		listener.enterGroupby_expression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitGroupby_expression) {
	 		listener.exitGroupby_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGroupby_expression) {
			return visitor.visitGroupby_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupByEmptyContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_groupByEmpty;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterGroupByEmpty) {
	 		listener.enterGroupByEmpty(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitGroupByEmpty) {
	 		listener.exitGroupByEmpty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGroupByEmpty) {
			return visitor.visitGroupByEmpty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollupStandardContext extends ParserRuleContext {
	public _rollup!: Token;
	public _cube!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public KW_ROLLUP(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLLUP, 0);
	}
	public KW_CUBE(): TerminalNode {
		return this.getToken(HiveParser.KW_CUBE, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_rollupStandard;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRollupStandard) {
	 		listener.enterRollupStandard(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRollupStandard) {
	 		listener.exitRollupStandard(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRollupStandard) {
			return visitor.visitRollupStandard(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RollupOldSyntaxContext extends ParserRuleContext {
	public _expr!: ExpressionsNotInParenthesisContext;
	public _rollup!: Token;
	public _cube!: Token;
	public _sets!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
		return this.getTypedRuleContext(ExpressionsNotInParenthesisContext, 0) as ExpressionsNotInParenthesisContext;
	}
	public KW_ROLLUP(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLLUP, 0);
	}
	public KW_CUBE(): TerminalNode {
		return this.getToken(HiveParser.KW_CUBE, 0);
	}
	public KW_SETS(): TerminalNode {
		return this.getToken(HiveParser.KW_SETS, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public groupingSetExpression_list(): GroupingSetExpressionContext[] {
		return this.getTypedRuleContexts(GroupingSetExpressionContext) as GroupingSetExpressionContext[];
	}
	public groupingSetExpression(i: number): GroupingSetExpressionContext {
		return this.getTypedRuleContext(GroupingSetExpressionContext, i) as GroupingSetExpressionContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_GROUPING(): TerminalNode {
		return this.getToken(HiveParser.KW_GROUPING, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_rollupOldSyntax;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRollupOldSyntax) {
	 		listener.enterRollupOldSyntax(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRollupOldSyntax) {
	 		listener.exitRollupOldSyntax(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRollupOldSyntax) {
			return visitor.visitRollupOldSyntax(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupingSetExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public groupingSetExpressionMultiple(): GroupingSetExpressionMultipleContext {
		return this.getTypedRuleContext(GroupingSetExpressionMultipleContext, 0) as GroupingSetExpressionMultipleContext;
	}
	public groupingExpressionSingle(): GroupingExpressionSingleContext {
		return this.getTypedRuleContext(GroupingExpressionSingleContext, 0) as GroupingExpressionSingleContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_groupingSetExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterGroupingSetExpression) {
	 		listener.enterGroupingSetExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitGroupingSetExpression) {
	 		listener.exitGroupingSetExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGroupingSetExpression) {
			return visitor.visitGroupingSetExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupingSetExpressionMultipleContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_groupingSetExpressionMultiple;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterGroupingSetExpressionMultiple) {
	 		listener.enterGroupingSetExpressionMultiple(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitGroupingSetExpressionMultiple) {
	 		listener.exitGroupingSetExpressionMultiple(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGroupingSetExpressionMultiple) {
			return visitor.visitGroupingSetExpressionMultiple(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupingExpressionSingleContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_groupingExpressionSingle;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterGroupingExpressionSingle) {
	 		listener.enterGroupingExpressionSingle(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitGroupingExpressionSingle) {
	 		listener.exitGroupingExpressionSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGroupingExpressionSingle) {
			return visitor.visitGroupingExpressionSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HavingClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_HAVING(): TerminalNode {
		return this.getToken(HiveParser.KW_HAVING, 0);
	}
	public havingCondition(): HavingConditionContext {
		return this.getTypedRuleContext(HavingConditionContext, 0) as HavingConditionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_havingClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterHavingClause) {
	 		listener.enterHavingClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitHavingClause) {
	 		listener.exitHavingClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitHavingClause) {
			return visitor.visitHavingClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QualifyClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_QUALIFY(): TerminalNode {
		return this.getToken(HiveParser.KW_QUALIFY, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_qualifyClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterQualifyClause) {
	 		listener.enterQualifyClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitQualifyClause) {
	 		listener.exitQualifyClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitQualifyClause) {
			return visitor.visitQualifyClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HavingConditionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_havingCondition;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterHavingCondition) {
	 		listener.enterHavingCondition(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitHavingCondition) {
	 		listener.exitHavingCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitHavingCondition) {
			return visitor.visitHavingCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionsInParenthesisContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
		return this.getTypedRuleContext(ExpressionsNotInParenthesisContext, 0) as ExpressionsNotInParenthesisContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_expressionsInParenthesis;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExpressionsInParenthesis) {
	 		listener.enterExpressionsInParenthesis(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExpressionsInParenthesis) {
	 		listener.exitExpressionsInParenthesis(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpressionsInParenthesis) {
			return visitor.visitExpressionsInParenthesis(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionsNotInParenthesisContext extends ParserRuleContext {
	public _first!: ExpressionOrDefaultContext;
	public _more!: ExpressionPartContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expressionOrDefault(): ExpressionOrDefaultContext {
		return this.getTypedRuleContext(ExpressionOrDefaultContext, 0) as ExpressionOrDefaultContext;
	}
	public expressionPart(): ExpressionPartContext {
		return this.getTypedRuleContext(ExpressionPartContext, 0) as ExpressionPartContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_expressionsNotInParenthesis;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExpressionsNotInParenthesis) {
	 		listener.enterExpressionsNotInParenthesis(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExpressionsNotInParenthesis) {
	 		listener.exitExpressionsNotInParenthesis(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpressionsNotInParenthesis) {
			return visitor.visitExpressionsNotInParenthesis(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionPartContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
	public expressionOrDefault_list(): ExpressionOrDefaultContext[] {
		return this.getTypedRuleContexts(ExpressionOrDefaultContext) as ExpressionOrDefaultContext[];
	}
	public expressionOrDefault(i: number): ExpressionOrDefaultContext {
		return this.getTypedRuleContext(ExpressionOrDefaultContext, i) as ExpressionOrDefaultContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_expressionPart;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExpressionPart) {
	 		listener.enterExpressionPart(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExpressionPart) {
	 		listener.exitExpressionPart(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpressionPart) {
			return visitor.visitExpressionPart(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionOrDefaultContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public defaultValue(): DefaultValueContext {
		return this.getTypedRuleContext(DefaultValueContext, 0) as DefaultValueContext;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_expressionOrDefault;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExpressionOrDefault) {
	 		listener.enterExpressionOrDefault(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExpressionOrDefault) {
	 		listener.exitExpressionOrDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpressionOrDefault) {
			return visitor.visitExpressionOrDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FirstExpressionsWithAliasContext extends ParserRuleContext {
	public _first!: ExpressionContext;
	public _colAlias!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
	public expressionWithAlias_list(): ExpressionWithAliasContext[] {
		return this.getTypedRuleContexts(ExpressionWithAliasContext) as ExpressionWithAliasContext[];
	}
	public expressionWithAlias(i: number): ExpressionWithAliasContext {
		return this.getTypedRuleContext(ExpressionWithAliasContext, i) as ExpressionWithAliasContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_firstExpressionsWithAlias;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterFirstExpressionsWithAlias) {
	 		listener.enterFirstExpressionsWithAlias(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitFirstExpressionsWithAlias) {
	 		listener.exitFirstExpressionsWithAlias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFirstExpressionsWithAlias) {
			return visitor.visitFirstExpressionsWithAlias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionWithAliasContext extends ParserRuleContext {
	public _alias!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_expressionWithAlias;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExpressionWithAlias) {
	 		listener.enterExpressionWithAlias(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExpressionWithAlias) {
	 		listener.exitExpressionWithAlias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpressionWithAlias) {
			return visitor.visitExpressionWithAlias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public expressionsInParenthesis(): ExpressionsInParenthesisContext {
		return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0) as ExpressionsInParenthesisContext;
	}
	public expressionsNotInParenthesis(): ExpressionsNotInParenthesisContext {
		return this.getTypedRuleContext(ExpressionsNotInParenthesisContext, 0) as ExpressionsNotInParenthesisContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_expressions;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExpressions) {
	 		listener.enterExpressions(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExpressions) {
	 		listener.exitExpressions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpressions) {
			return visitor.visitExpressions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnRefOrderInParenthesisContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public columnRefOrder_list(): ColumnRefOrderContext[] {
		return this.getTypedRuleContexts(ColumnRefOrderContext) as ColumnRefOrderContext[];
	}
	public columnRefOrder(i: number): ColumnRefOrderContext {
		return this.getTypedRuleContext(ColumnRefOrderContext, i) as ColumnRefOrderContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnRefOrderInParenthesis;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnRefOrderInParenthesis) {
	 		listener.enterColumnRefOrderInParenthesis(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnRefOrderInParenthesis) {
	 		listener.exitColumnRefOrderInParenthesis(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnRefOrderInParenthesis) {
			return visitor.visitColumnRefOrderInParenthesis(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnRefOrderNotInParenthesisContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public columnRefOrder_list(): ColumnRefOrderContext[] {
		return this.getTypedRuleContexts(ColumnRefOrderContext) as ColumnRefOrderContext[];
	}
	public columnRefOrder(i: number): ColumnRefOrderContext {
		return this.getTypedRuleContext(ColumnRefOrderContext, i) as ColumnRefOrderContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_columnRefOrderNotInParenthesis;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterColumnRefOrderNotInParenthesis) {
	 		listener.enterColumnRefOrderNotInParenthesis(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitColumnRefOrderNotInParenthesis) {
	 		listener.exitColumnRefOrderNotInParenthesis(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitColumnRefOrderNotInParenthesis) {
			return visitor.visitColumnRefOrderNotInParenthesis(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrderByClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ORDER(): TerminalNode {
		return this.getToken(HiveParser.KW_ORDER, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
	public columnRefOrder_list(): ColumnRefOrderContext[] {
		return this.getTypedRuleContexts(ColumnRefOrderContext) as ColumnRefOrderContext[];
	}
	public columnRefOrder(i: number): ColumnRefOrderContext {
		return this.getTypedRuleContext(ColumnRefOrderContext, i) as ColumnRefOrderContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_orderByClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterOrderByClause) {
	 		listener.enterOrderByClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitOrderByClause) {
	 		listener.exitOrderByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitOrderByClause) {
			return visitor.visitOrderByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClusterByClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CLUSTER(): TerminalNode {
		return this.getToken(HiveParser.KW_CLUSTER, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
	public expressions(): ExpressionsContext {
		return this.getTypedRuleContext(ExpressionsContext, 0) as ExpressionsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_clusterByClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterClusterByClause) {
	 		listener.enterClusterByClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitClusterByClause) {
	 		listener.exitClusterByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitClusterByClause) {
			return visitor.visitClusterByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionByClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_PARTITION(): TerminalNode {
		return this.getToken(HiveParser.KW_PARTITION, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
	public expressions(): ExpressionsContext {
		return this.getTypedRuleContext(ExpressionsContext, 0) as ExpressionsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partitionByClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartitionByClause) {
	 		listener.enterPartitionByClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartitionByClause) {
	 		listener.exitPartitionByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionByClause) {
			return visitor.visitPartitionByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DistributeByClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DISTRIBUTE(): TerminalNode {
		return this.getToken(HiveParser.KW_DISTRIBUTE, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
	public expressions(): ExpressionsContext {
		return this.getTypedRuleContext(ExpressionsContext, 0) as ExpressionsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_distributeByClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDistributeByClause) {
	 		listener.enterDistributeByClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDistributeByClause) {
	 		listener.exitDistributeByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDistributeByClause) {
			return visitor.visitDistributeByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortByClauseContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_SORT(): TerminalNode {
		return this.getToken(HiveParser.KW_SORT, 0);
	}
	public KW_BY(): TerminalNode {
		return this.getToken(HiveParser.KW_BY, 0);
	}
	public columnRefOrderInParenthesis(): ColumnRefOrderInParenthesisContext {
		return this.getTypedRuleContext(ColumnRefOrderInParenthesisContext, 0) as ColumnRefOrderInParenthesisContext;
	}
	public columnRefOrderNotInParenthesis(): ColumnRefOrderNotInParenthesisContext {
		return this.getTypedRuleContext(ColumnRefOrderNotInParenthesisContext, 0) as ColumnRefOrderNotInParenthesisContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_sortByClause;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSortByClause) {
	 		listener.enterSortByClause(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSortByClause) {
	 		listener.exitSortByClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSortByClause) {
			return visitor.visitSortByClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TrimFunctionContext extends ParserRuleContext {
	public _leading!: Token;
	public _trailing!: Token;
	public _trim_characters!: SelectExpressionContext;
	public _str!: SelectExpressionContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TRIM(): TerminalNode {
		return this.getToken(HiveParser.KW_TRIM, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public KW_FROM(): TerminalNode {
		return this.getToken(HiveParser.KW_FROM, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public selectExpression_list(): SelectExpressionContext[] {
		return this.getTypedRuleContexts(SelectExpressionContext) as SelectExpressionContext[];
	}
	public selectExpression(i: number): SelectExpressionContext {
		return this.getTypedRuleContext(SelectExpressionContext, i) as SelectExpressionContext;
	}
	public KW_BOTH(): TerminalNode {
		return this.getToken(HiveParser.KW_BOTH, 0);
	}
	public KW_LEADING(): TerminalNode {
		return this.getToken(HiveParser.KW_LEADING, 0);
	}
	public KW_TRAILING(): TerminalNode {
		return this.getToken(HiveParser.KW_TRAILING, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_trimFunction;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTrimFunction) {
	 		listener.enterTrimFunction(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTrimFunction) {
	 		listener.exitTrimFunction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTrimFunction) {
			return visitor.visitTrimFunction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_Context extends ParserRuleContext {
	public _star!: Token;
	public _dist!: All_distinctContext;
	public _within!: Token;
	public _ordBy!: OrderByClauseContext;
	public _nt!: Null_treatmentContext;
	public _ws!: Window_specificationContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public trimFunction(): TrimFunctionContext {
		return this.getTypedRuleContext(TrimFunctionContext, 0) as TrimFunctionContext;
	}
	public functionName(): FunctionNameContext {
		return this.getTypedRuleContext(FunctionNameContext, 0) as FunctionNameContext;
	}
	public LPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.LPAREN);
	}
	public LPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.LPAREN, i);
	}
	public RPAREN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.RPAREN);
	}
	public RPAREN(i: number): TerminalNode {
		return this.getToken(HiveParser.RPAREN, i);
	}
	public KW_GROUP(): TerminalNode {
		return this.getToken(HiveParser.KW_GROUP, 0);
	}
	public KW_OVER(): TerminalNode {
		return this.getToken(HiveParser.KW_OVER, 0);
	}
	public STAR(): TerminalNode {
		return this.getToken(HiveParser.STAR, 0);
	}
	public KW_WITHIN(): TerminalNode {
		return this.getToken(HiveParser.KW_WITHIN, 0);
	}
	public orderByClause(): OrderByClauseContext {
		return this.getTypedRuleContext(OrderByClauseContext, 0) as OrderByClauseContext;
	}
	public window_specification(): Window_specificationContext {
		return this.getTypedRuleContext(Window_specificationContext, 0) as Window_specificationContext;
	}
	public null_treatment(): Null_treatmentContext {
		return this.getTypedRuleContext(Null_treatmentContext, 0) as Null_treatmentContext;
	}
	public selectExpression_list(): SelectExpressionContext[] {
		return this.getTypedRuleContexts(SelectExpressionContext) as SelectExpressionContext[];
	}
	public selectExpression(i: number): SelectExpressionContext {
		return this.getTypedRuleContext(SelectExpressionContext, i) as SelectExpressionContext;
	}
	public all_distinct(): All_distinctContext {
		return this.getTypedRuleContext(All_distinctContext, 0) as All_distinctContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_function_;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterFunction_) {
	 		listener.enterFunction_(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitFunction_) {
	 		listener.exitFunction_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFunction_) {
			return visitor.visitFunction_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Null_treatmentContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_RESPECT(): TerminalNode {
		return this.getToken(HiveParser.KW_RESPECT, 0);
	}
	public KW_NULLS(): TerminalNode {
		return this.getToken(HiveParser.KW_NULLS, 0);
	}
	public KW_IGNORE(): TerminalNode {
		return this.getToken(HiveParser.KW_IGNORE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_null_treatment;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterNull_treatment) {
	 		listener.enterNull_treatment(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitNull_treatment) {
	 		listener.exitNull_treatment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitNull_treatment) {
			return visitor.visitNull_treatment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionNameContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public functionIdentifier(): FunctionIdentifierContext {
		return this.getTypedRuleContext(FunctionIdentifierContext, 0) as FunctionIdentifierContext;
	}
	public sql11ReservedKeywordsUsedAsFunctionName(): Sql11ReservedKeywordsUsedAsFunctionNameContext {
		return this.getTypedRuleContext(Sql11ReservedKeywordsUsedAsFunctionNameContext, 0) as Sql11ReservedKeywordsUsedAsFunctionNameContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_functionName;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterFunctionName) {
	 		listener.enterFunctionName(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitFunctionName) {
	 		listener.exitFunctionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFunctionName) {
			return visitor.visitFunctionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CastExpressionContext extends ParserRuleContext {
	public _toType!: PrimitiveTypeContext;
	public _fmt!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CAST(): TerminalNode {
		return this.getToken(HiveParser.KW_CAST, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public KW_AS(): TerminalNode {
		return this.getToken(HiveParser.KW_AS, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public primitiveType(): PrimitiveTypeContext {
		return this.getTypedRuleContext(PrimitiveTypeContext, 0) as PrimitiveTypeContext;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_FORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_FORMAT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_castExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCastExpression) {
	 		listener.enterCastExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCastExpression) {
	 		listener.exitCastExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCastExpression) {
			return visitor.visitCastExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CaseExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CASE(): TerminalNode {
		return this.getToken(HiveParser.KW_CASE, 0);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public KW_END(): TerminalNode {
		return this.getToken(HiveParser.KW_END, 0);
	}
	public KW_WHEN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_WHEN);
	}
	public KW_WHEN(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_WHEN, i);
	}
	public KW_THEN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_THEN);
	}
	public KW_THEN(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_THEN, i);
	}
	public KW_ELSE(): TerminalNode {
		return this.getToken(HiveParser.KW_ELSE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_caseExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCaseExpression) {
	 		listener.enterCaseExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCaseExpression) {
	 		listener.exitCaseExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCaseExpression) {
			return visitor.visitCaseExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhenExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CASE(): TerminalNode {
		return this.getToken(HiveParser.KW_CASE, 0);
	}
	public KW_END(): TerminalNode {
		return this.getToken(HiveParser.KW_END, 0);
	}
	public KW_WHEN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_WHEN);
	}
	public KW_WHEN(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_WHEN, i);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public KW_THEN_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_THEN);
	}
	public KW_THEN(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_THEN, i);
	}
	public KW_ELSE(): TerminalNode {
		return this.getToken(HiveParser.KW_ELSE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_whenExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWhenExpression) {
	 		listener.enterWhenExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWhenExpression) {
	 		listener.exitWhenExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWhenExpression) {
			return visitor.visitWhenExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FloorExpressionContext extends ParserRuleContext {
	public _floorUnit!: FloorDateQualifiersContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_FLOOR(): TerminalNode {
		return this.getToken(HiveParser.KW_FLOOR, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public KW_TO(): TerminalNode {
		return this.getToken(HiveParser.KW_TO, 0);
	}
	public floorDateQualifiers(): FloorDateQualifiersContext {
		return this.getTypedRuleContext(FloorDateQualifiersContext, 0) as FloorDateQualifiersContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_floorExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterFloorExpression) {
	 		listener.enterFloorExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitFloorExpression) {
	 		listener.exitFloorExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFloorExpression) {
			return visitor.visitFloorExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FloorDateQualifiersContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_YEAR(): TerminalNode {
		return this.getToken(HiveParser.KW_YEAR, 0);
	}
	public KW_QUARTER(): TerminalNode {
		return this.getToken(HiveParser.KW_QUARTER, 0);
	}
	public KW_MONTH(): TerminalNode {
		return this.getToken(HiveParser.KW_MONTH, 0);
	}
	public KW_WEEK(): TerminalNode {
		return this.getToken(HiveParser.KW_WEEK, 0);
	}
	public KW_DAY(): TerminalNode {
		return this.getToken(HiveParser.KW_DAY, 0);
	}
	public KW_HOUR(): TerminalNode {
		return this.getToken(HiveParser.KW_HOUR, 0);
	}
	public KW_MINUTE(): TerminalNode {
		return this.getToken(HiveParser.KW_MINUTE, 0);
	}
	public KW_SECOND(): TerminalNode {
		return this.getToken(HiveParser.KW_SECOND, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_floorDateQualifiers;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterFloorDateQualifiers) {
	 		listener.enterFloorDateQualifiers(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitFloorDateQualifiers) {
	 		listener.exitFloorDateQualifiers(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFloorDateQualifiers) {
			return visitor.visitFloorDateQualifiers(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExtractExpressionContext extends ParserRuleContext {
	public _timeUnit!: TimeQualifiersContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_EXTRACT(): TerminalNode {
		return this.getToken(HiveParser.KW_EXTRACT, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public KW_FROM(): TerminalNode {
		return this.getToken(HiveParser.KW_FROM, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public timeQualifiers(): TimeQualifiersContext {
		return this.getTypedRuleContext(TimeQualifiersContext, 0) as TimeQualifiersContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_extractExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExtractExpression) {
	 		listener.enterExtractExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExtractExpression) {
	 		listener.exitExtractExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExtractExpression) {
			return visitor.visitExtractExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TimeQualifiersContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_YEAR(): TerminalNode {
		return this.getToken(HiveParser.KW_YEAR, 0);
	}
	public KW_QUARTER(): TerminalNode {
		return this.getToken(HiveParser.KW_QUARTER, 0);
	}
	public KW_MONTH(): TerminalNode {
		return this.getToken(HiveParser.KW_MONTH, 0);
	}
	public KW_WEEK(): TerminalNode {
		return this.getToken(HiveParser.KW_WEEK, 0);
	}
	public KW_DAY(): TerminalNode {
		return this.getToken(HiveParser.KW_DAY, 0);
	}
	public KW_DOW(): TerminalNode {
		return this.getToken(HiveParser.KW_DOW, 0);
	}
	public KW_HOUR(): TerminalNode {
		return this.getToken(HiveParser.KW_HOUR, 0);
	}
	public KW_MINUTE(): TerminalNode {
		return this.getToken(HiveParser.KW_MINUTE, 0);
	}
	public KW_SECOND(): TerminalNode {
		return this.getToken(HiveParser.KW_SECOND, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_timeQualifiers;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTimeQualifiers) {
	 		listener.enterTimeQualifiers(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTimeQualifiers) {
	 		listener.exitTimeQualifiers(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTimeQualifiers) {
			return visitor.visitTimeQualifiers(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstantContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public intervalLiteral(): IntervalLiteralContext {
		return this.getTypedRuleContext(IntervalLiteralContext, 0) as IntervalLiteralContext;
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
	public dateLiteral(): DateLiteralContext {
		return this.getTypedRuleContext(DateLiteralContext, 0) as DateLiteralContext;
	}
	public timestampLiteral(): TimestampLiteralContext {
		return this.getTypedRuleContext(TimestampLiteralContext, 0) as TimestampLiteralContext;
	}
	public timestampLocalTZLiteral(): TimestampLocalTZLiteralContext {
		return this.getTypedRuleContext(TimestampLocalTZLiteralContext, 0) as TimestampLocalTZLiteralContext;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public stringLiteralSequence(): StringLiteralSequenceContext {
		return this.getTypedRuleContext(StringLiteralSequenceContext, 0) as StringLiteralSequenceContext;
	}
	public IntegralLiteral(): TerminalNode {
		return this.getToken(HiveParser.IntegralLiteral, 0);
	}
	public NumberLiteral(): TerminalNode {
		return this.getToken(HiveParser.NumberLiteral, 0);
	}
	public charSetStringLiteral(): CharSetStringLiteralContext {
		return this.getTypedRuleContext(CharSetStringLiteralContext, 0) as CharSetStringLiteralContext;
	}
	public booleanValue(): BooleanValueContext {
		return this.getTypedRuleContext(BooleanValueContext, 0) as BooleanValueContext;
	}
	public KW_NULL(): TerminalNode {
		return this.getToken(HiveParser.KW_NULL, 0);
	}
	public prepareStmtParam(): PrepareStmtParamContext {
		return this.getTypedRuleContext(PrepareStmtParamContext, 0) as PrepareStmtParamContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_constant;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterConstant) {
	 		listener.enterConstant(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitConstant) {
	 		listener.exitConstant(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitConstant) {
			return visitor.visitConstant(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrepareStmtParamContext extends ParserRuleContext {
	public _p!: ParameterIdxContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public parameterIdx(): ParameterIdxContext {
		return this.getTypedRuleContext(ParameterIdxContext, 0) as ParameterIdxContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_prepareStmtParam;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrepareStmtParam) {
	 		listener.enterPrepareStmtParam(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrepareStmtParam) {
	 		listener.exitPrepareStmtParam(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrepareStmtParam) {
			return visitor.visitPrepareStmtParam(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ParameterIdxContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public QUESTION(): TerminalNode {
		return this.getToken(HiveParser.QUESTION, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_parameterIdx;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterParameterIdx) {
	 		listener.enterParameterIdx(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitParameterIdx) {
	 		listener.exitParameterIdx(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitParameterIdx) {
			return visitor.visitParameterIdx(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringLiteralSequenceContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public StringLiteral_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.StringLiteral);
	}
	public StringLiteral(i: number): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_stringLiteralSequence;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterStringLiteralSequence) {
	 		listener.enterStringLiteralSequence(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitStringLiteralSequence) {
	 		listener.exitStringLiteralSequence(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitStringLiteralSequence) {
			return visitor.visitStringLiteralSequence(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CharSetStringLiteralContext extends ParserRuleContext {
	public _csName!: Token;
	public _csLiteral!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CharSetName(): TerminalNode {
		return this.getToken(HiveParser.CharSetName, 0);
	}
	public CharSetLiteral(): TerminalNode {
		return this.getToken(HiveParser.CharSetLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_charSetStringLiteral;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCharSetStringLiteral) {
	 		listener.enterCharSetStringLiteral(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCharSetStringLiteral) {
	 		listener.exitCharSetStringLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCharSetStringLiteral) {
			return visitor.visitCharSetStringLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DateLiteralContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DATE(): TerminalNode {
		return this.getToken(HiveParser.KW_DATE, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_CURRENT_DATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CURRENT_DATE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dateLiteral;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDateLiteral) {
	 		listener.enterDateLiteral(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDateLiteral) {
	 		listener.exitDateLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDateLiteral) {
			return visitor.visitDateLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TimestampLiteralContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TIMESTAMP(): TerminalNode {
		return this.getToken(HiveParser.KW_TIMESTAMP, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public KW_CURRENT_TIMESTAMP(): TerminalNode {
		return this.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_timestampLiteral;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTimestampLiteral) {
	 		listener.enterTimestampLiteral(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTimestampLiteral) {
	 		listener.exitTimestampLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTimestampLiteral) {
			return visitor.visitTimestampLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TimestampLocalTZLiteralContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TIMESTAMPLOCALTZ(): TerminalNode {
		return this.getToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_timestampLocalTZLiteral;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTimestampLocalTZLiteral) {
	 		listener.enterTimestampLocalTZLiteral(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTimestampLocalTZLiteral) {
	 		listener.exitTimestampLocalTZLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTimestampLocalTZLiteral) {
			return visitor.visitTimestampLocalTZLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalValueContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_intervalValue;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterIntervalValue) {
	 		listener.enterIntervalValue(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitIntervalValue) {
	 		listener.exitIntervalValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIntervalValue) {
			return visitor.visitIntervalValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalLiteralContext extends ParserRuleContext {
	public _value!: IntervalValueContext;
	public _qualifiers!: IntervalQualifiersContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public intervalValue(): IntervalValueContext {
		return this.getTypedRuleContext(IntervalValueContext, 0) as IntervalValueContext;
	}
	public intervalQualifiers(): IntervalQualifiersContext {
		return this.getTypedRuleContext(IntervalQualifiersContext, 0) as IntervalQualifiersContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_intervalLiteral;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterIntervalLiteral) {
	 		listener.enterIntervalLiteral(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitIntervalLiteral) {
	 		listener.exitIntervalLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIntervalLiteral) {
			return visitor.visitIntervalLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalExpressionContext extends ParserRuleContext {
	public _value!: IntervalValueContext;
	public _qualifiers!: IntervalQualifiersContext;
	public _expr!: ExpressionContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public intervalValue(): IntervalValueContext {
		return this.getTypedRuleContext(IntervalValueContext, 0) as IntervalValueContext;
	}
	public intervalQualifiers(): IntervalQualifiersContext {
		return this.getTypedRuleContext(IntervalQualifiersContext, 0) as IntervalQualifiersContext;
	}
	public KW_INTERVAL(): TerminalNode {
		return this.getToken(HiveParser.KW_INTERVAL, 0);
	}
	public expression(): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, 0) as ExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_intervalExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterIntervalExpression) {
	 		listener.enterIntervalExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitIntervalExpression) {
	 		listener.exitIntervalExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIntervalExpression) {
			return visitor.visitIntervalExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntervalQualifiersContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_YEAR(): TerminalNode {
		return this.getToken(HiveParser.KW_YEAR, 0);
	}
	public KW_TO(): TerminalNode {
		return this.getToken(HiveParser.KW_TO, 0);
	}
	public KW_MONTH(): TerminalNode {
		return this.getToken(HiveParser.KW_MONTH, 0);
	}
	public KW_DAY(): TerminalNode {
		return this.getToken(HiveParser.KW_DAY, 0);
	}
	public KW_SECOND(): TerminalNode {
		return this.getToken(HiveParser.KW_SECOND, 0);
	}
	public KW_HOUR(): TerminalNode {
		return this.getToken(HiveParser.KW_HOUR, 0);
	}
	public KW_MINUTE(): TerminalNode {
		return this.getToken(HiveParser.KW_MINUTE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_intervalQualifiers;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterIntervalQualifiers) {
	 		listener.enterIntervalQualifiers(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitIntervalQualifiers) {
	 		listener.exitIntervalQualifiers(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIntervalQualifiers) {
			return visitor.visitIntervalQualifiers(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceOrExpression(): PrecedenceOrExpressionContext {
		return this.getTypedRuleContext(PrecedenceOrExpressionContext, 0) as PrecedenceOrExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_expression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExpression) {
	 		listener.enterExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExpression) {
	 		listener.exitExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExpression) {
			return visitor.visitExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AtomExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public constant(): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, 0) as ConstantContext;
	}
	public intervalExpression(): IntervalExpressionContext {
		return this.getTypedRuleContext(IntervalExpressionContext, 0) as IntervalExpressionContext;
	}
	public castExpression(): CastExpressionContext {
		return this.getTypedRuleContext(CastExpressionContext, 0) as CastExpressionContext;
	}
	public extractExpression(): ExtractExpressionContext {
		return this.getTypedRuleContext(ExtractExpressionContext, 0) as ExtractExpressionContext;
	}
	public floorExpression(): FloorExpressionContext {
		return this.getTypedRuleContext(FloorExpressionContext, 0) as FloorExpressionContext;
	}
	public caseExpression(): CaseExpressionContext {
		return this.getTypedRuleContext(CaseExpressionContext, 0) as CaseExpressionContext;
	}
	public whenExpression(): WhenExpressionContext {
		return this.getTypedRuleContext(WhenExpressionContext, 0) as WhenExpressionContext;
	}
	public subQueryExpression(): SubQueryExpressionContext {
		return this.getTypedRuleContext(SubQueryExpressionContext, 0) as SubQueryExpressionContext;
	}
	public function_(): Function_Context {
		return this.getTypedRuleContext(Function_Context, 0) as Function_Context;
	}
	public tableOrColumn(): TableOrColumnContext {
		return this.getTypedRuleContext(TableOrColumnContext, 0) as TableOrColumnContext;
	}
	public expressionsInParenthesis(): ExpressionsInParenthesisContext {
		return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0) as ExpressionsInParenthesisContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_atomExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAtomExpression) {
	 		listener.enterAtomExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAtomExpression) {
	 		listener.exitAtomExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAtomExpression) {
			return visitor.visitAtomExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceFieldExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public atomExpression(): AtomExpressionContext {
		return this.getTypedRuleContext(AtomExpressionContext, 0) as AtomExpressionContext;
	}
	public LSQUARE_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.LSQUARE);
	}
	public LSQUARE(i: number): TerminalNode {
		return this.getToken(HiveParser.LSQUARE, i);
	}
	public expression_list(): ExpressionContext[] {
		return this.getTypedRuleContexts(ExpressionContext) as ExpressionContext[];
	}
	public expression(i: number): ExpressionContext {
		return this.getTypedRuleContext(ExpressionContext, i) as ExpressionContext;
	}
	public RSQUARE_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.RSQUARE);
	}
	public RSQUARE(i: number): TerminalNode {
		return this.getToken(HiveParser.RSQUARE, i);
	}
	public DOT_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.DOT);
	}
	public DOT(i: number): TerminalNode {
		return this.getToken(HiveParser.DOT, i);
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceFieldExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceFieldExpression) {
	 		listener.enterPrecedenceFieldExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceFieldExpression) {
	 		listener.exitPrecedenceFieldExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceFieldExpression) {
			return visitor.visitPrecedenceFieldExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceUnaryOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PLUS(): TerminalNode {
		return this.getToken(HiveParser.PLUS, 0);
	}
	public MINUS(): TerminalNode {
		return this.getToken(HiveParser.MINUS, 0);
	}
	public TILDE(): TerminalNode {
		return this.getToken(HiveParser.TILDE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceUnaryOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceUnaryOperator) {
	 		listener.enterPrecedenceUnaryOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceUnaryOperator) {
	 		listener.exitPrecedenceUnaryOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceUnaryOperator) {
			return visitor.visitPrecedenceUnaryOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceUnaryPrefixExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceFieldExpression(): PrecedenceFieldExpressionContext {
		return this.getTypedRuleContext(PrecedenceFieldExpressionContext, 0) as PrecedenceFieldExpressionContext;
	}
	public precedenceUnaryOperator_list(): PrecedenceUnaryOperatorContext[] {
		return this.getTypedRuleContexts(PrecedenceUnaryOperatorContext) as PrecedenceUnaryOperatorContext[];
	}
	public precedenceUnaryOperator(i: number): PrecedenceUnaryOperatorContext {
		return this.getTypedRuleContext(PrecedenceUnaryOperatorContext, i) as PrecedenceUnaryOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceUnaryPrefixExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceUnaryPrefixExpression) {
	 		listener.enterPrecedenceUnaryPrefixExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceUnaryPrefixExpression) {
	 		listener.exitPrecedenceUnaryPrefixExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceUnaryPrefixExpression) {
			return visitor.visitPrecedenceUnaryPrefixExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceBitwiseXorOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BITWISEXOR(): TerminalNode {
		return this.getToken(HiveParser.BITWISEXOR, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceBitwiseXorOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceBitwiseXorOperator) {
	 		listener.enterPrecedenceBitwiseXorOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceBitwiseXorOperator) {
	 		listener.exitPrecedenceBitwiseXorOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceBitwiseXorOperator) {
			return visitor.visitPrecedenceBitwiseXorOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceBitwiseXorExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceUnaryPrefixExpression_list(): PrecedenceUnaryPrefixExpressionContext[] {
		return this.getTypedRuleContexts(PrecedenceUnaryPrefixExpressionContext) as PrecedenceUnaryPrefixExpressionContext[];
	}
	public precedenceUnaryPrefixExpression(i: number): PrecedenceUnaryPrefixExpressionContext {
		return this.getTypedRuleContext(PrecedenceUnaryPrefixExpressionContext, i) as PrecedenceUnaryPrefixExpressionContext;
	}
	public precedenceBitwiseXorOperator_list(): PrecedenceBitwiseXorOperatorContext[] {
		return this.getTypedRuleContexts(PrecedenceBitwiseXorOperatorContext) as PrecedenceBitwiseXorOperatorContext[];
	}
	public precedenceBitwiseXorOperator(i: number): PrecedenceBitwiseXorOperatorContext {
		return this.getTypedRuleContext(PrecedenceBitwiseXorOperatorContext, i) as PrecedenceBitwiseXorOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceBitwiseXorExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceBitwiseXorExpression) {
	 		listener.enterPrecedenceBitwiseXorExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceBitwiseXorExpression) {
	 		listener.exitPrecedenceBitwiseXorExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceBitwiseXorExpression) {
			return visitor.visitPrecedenceBitwiseXorExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceStarOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public STAR(): TerminalNode {
		return this.getToken(HiveParser.STAR, 0);
	}
	public DIVIDE(): TerminalNode {
		return this.getToken(HiveParser.DIVIDE, 0);
	}
	public MOD(): TerminalNode {
		return this.getToken(HiveParser.MOD, 0);
	}
	public DIV(): TerminalNode {
		return this.getToken(HiveParser.DIV, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceStarOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceStarOperator) {
	 		listener.enterPrecedenceStarOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceStarOperator) {
	 		listener.exitPrecedenceStarOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceStarOperator) {
			return visitor.visitPrecedenceStarOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceStarExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceBitwiseXorExpression_list(): PrecedenceBitwiseXorExpressionContext[] {
		return this.getTypedRuleContexts(PrecedenceBitwiseXorExpressionContext) as PrecedenceBitwiseXorExpressionContext[];
	}
	public precedenceBitwiseXorExpression(i: number): PrecedenceBitwiseXorExpressionContext {
		return this.getTypedRuleContext(PrecedenceBitwiseXorExpressionContext, i) as PrecedenceBitwiseXorExpressionContext;
	}
	public precedenceStarOperator_list(): PrecedenceStarOperatorContext[] {
		return this.getTypedRuleContexts(PrecedenceStarOperatorContext) as PrecedenceStarOperatorContext[];
	}
	public precedenceStarOperator(i: number): PrecedenceStarOperatorContext {
		return this.getTypedRuleContext(PrecedenceStarOperatorContext, i) as PrecedenceStarOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceStarExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceStarExpression) {
	 		listener.enterPrecedenceStarExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceStarExpression) {
	 		listener.exitPrecedenceStarExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceStarExpression) {
			return visitor.visitPrecedenceStarExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedencePlusOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public PLUS(): TerminalNode {
		return this.getToken(HiveParser.PLUS, 0);
	}
	public MINUS(): TerminalNode {
		return this.getToken(HiveParser.MINUS, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedencePlusOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedencePlusOperator) {
	 		listener.enterPrecedencePlusOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedencePlusOperator) {
	 		listener.exitPrecedencePlusOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedencePlusOperator) {
			return visitor.visitPrecedencePlusOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedencePlusExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceStarExpression_list(): PrecedenceStarExpressionContext[] {
		return this.getTypedRuleContexts(PrecedenceStarExpressionContext) as PrecedenceStarExpressionContext[];
	}
	public precedenceStarExpression(i: number): PrecedenceStarExpressionContext {
		return this.getTypedRuleContext(PrecedenceStarExpressionContext, i) as PrecedenceStarExpressionContext;
	}
	public precedencePlusOperator_list(): PrecedencePlusOperatorContext[] {
		return this.getTypedRuleContexts(PrecedencePlusOperatorContext) as PrecedencePlusOperatorContext[];
	}
	public precedencePlusOperator(i: number): PrecedencePlusOperatorContext {
		return this.getTypedRuleContext(PrecedencePlusOperatorContext, i) as PrecedencePlusOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedencePlusExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedencePlusExpression) {
	 		listener.enterPrecedencePlusExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedencePlusExpression) {
	 		listener.exitPrecedencePlusExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedencePlusExpression) {
			return visitor.visitPrecedencePlusExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceConcatenateOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public CONCATENATE(): TerminalNode {
		return this.getToken(HiveParser.CONCATENATE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceConcatenateOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceConcatenateOperator) {
	 		listener.enterPrecedenceConcatenateOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceConcatenateOperator) {
	 		listener.exitPrecedenceConcatenateOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceConcatenateOperator) {
			return visitor.visitPrecedenceConcatenateOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceConcatenateExpressionContext extends ParserRuleContext {
	public _plus!: PrecedencePlusExpressionContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedencePlusExpression_list(): PrecedencePlusExpressionContext[] {
		return this.getTypedRuleContexts(PrecedencePlusExpressionContext) as PrecedencePlusExpressionContext[];
	}
	public precedencePlusExpression(i: number): PrecedencePlusExpressionContext {
		return this.getTypedRuleContext(PrecedencePlusExpressionContext, i) as PrecedencePlusExpressionContext;
	}
	public precedenceConcatenateOperator_list(): PrecedenceConcatenateOperatorContext[] {
		return this.getTypedRuleContexts(PrecedenceConcatenateOperatorContext) as PrecedenceConcatenateOperatorContext[];
	}
	public precedenceConcatenateOperator(i: number): PrecedenceConcatenateOperatorContext {
		return this.getTypedRuleContext(PrecedenceConcatenateOperatorContext, i) as PrecedenceConcatenateOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceConcatenateExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceConcatenateExpression) {
	 		listener.enterPrecedenceConcatenateExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceConcatenateExpression) {
	 		listener.exitPrecedenceConcatenateExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceConcatenateExpression) {
			return visitor.visitPrecedenceConcatenateExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceAmpersandOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public AMPERSAND(): TerminalNode {
		return this.getToken(HiveParser.AMPERSAND, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceAmpersandOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceAmpersandOperator) {
	 		listener.enterPrecedenceAmpersandOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceAmpersandOperator) {
	 		listener.exitPrecedenceAmpersandOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceAmpersandOperator) {
			return visitor.visitPrecedenceAmpersandOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceAmpersandExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceConcatenateExpression_list(): PrecedenceConcatenateExpressionContext[] {
		return this.getTypedRuleContexts(PrecedenceConcatenateExpressionContext) as PrecedenceConcatenateExpressionContext[];
	}
	public precedenceConcatenateExpression(i: number): PrecedenceConcatenateExpressionContext {
		return this.getTypedRuleContext(PrecedenceConcatenateExpressionContext, i) as PrecedenceConcatenateExpressionContext;
	}
	public precedenceAmpersandOperator_list(): PrecedenceAmpersandOperatorContext[] {
		return this.getTypedRuleContexts(PrecedenceAmpersandOperatorContext) as PrecedenceAmpersandOperatorContext[];
	}
	public precedenceAmpersandOperator(i: number): PrecedenceAmpersandOperatorContext {
		return this.getTypedRuleContext(PrecedenceAmpersandOperatorContext, i) as PrecedenceAmpersandOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceAmpersandExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceAmpersandExpression) {
	 		listener.enterPrecedenceAmpersandExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceAmpersandExpression) {
	 		listener.exitPrecedenceAmpersandExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceAmpersandExpression) {
			return visitor.visitPrecedenceAmpersandExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceBitwiseOrOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public BITWISEOR(): TerminalNode {
		return this.getToken(HiveParser.BITWISEOR, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceBitwiseOrOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceBitwiseOrOperator) {
	 		listener.enterPrecedenceBitwiseOrOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceBitwiseOrOperator) {
	 		listener.exitPrecedenceBitwiseOrOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceBitwiseOrOperator) {
			return visitor.visitPrecedenceBitwiseOrOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceBitwiseOrExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceAmpersandExpression_list(): PrecedenceAmpersandExpressionContext[] {
		return this.getTypedRuleContexts(PrecedenceAmpersandExpressionContext) as PrecedenceAmpersandExpressionContext[];
	}
	public precedenceAmpersandExpression(i: number): PrecedenceAmpersandExpressionContext {
		return this.getTypedRuleContext(PrecedenceAmpersandExpressionContext, i) as PrecedenceAmpersandExpressionContext;
	}
	public precedenceBitwiseOrOperator_list(): PrecedenceBitwiseOrOperatorContext[] {
		return this.getTypedRuleContexts(PrecedenceBitwiseOrOperatorContext) as PrecedenceBitwiseOrOperatorContext[];
	}
	public precedenceBitwiseOrOperator(i: number): PrecedenceBitwiseOrOperatorContext {
		return this.getTypedRuleContext(PrecedenceBitwiseOrOperatorContext, i) as PrecedenceBitwiseOrOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceBitwiseOrExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceBitwiseOrExpression) {
	 		listener.enterPrecedenceBitwiseOrExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceBitwiseOrExpression) {
	 		listener.exitPrecedenceBitwiseOrExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceBitwiseOrExpression) {
			return visitor.visitPrecedenceBitwiseOrExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceRegexpOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_LIKE(): TerminalNode {
		return this.getToken(HiveParser.KW_LIKE, 0);
	}
	public KW_RLIKE(): TerminalNode {
		return this.getToken(HiveParser.KW_RLIKE, 0);
	}
	public KW_REGEXP(): TerminalNode {
		return this.getToken(HiveParser.KW_REGEXP, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceRegexpOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceRegexpOperator) {
	 		listener.enterPrecedenceRegexpOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceRegexpOperator) {
	 		listener.exitPrecedenceRegexpOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceRegexpOperator) {
			return visitor.visitPrecedenceRegexpOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceSimilarOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceRegexpOperator(): PrecedenceRegexpOperatorContext {
		return this.getTypedRuleContext(PrecedenceRegexpOperatorContext, 0) as PrecedenceRegexpOperatorContext;
	}
	public LESSTHANOREQUALTO(): TerminalNode {
		return this.getToken(HiveParser.LESSTHANOREQUALTO, 0);
	}
	public LESSTHAN(): TerminalNode {
		return this.getToken(HiveParser.LESSTHAN, 0);
	}
	public GREATERTHANOREQUALTO(): TerminalNode {
		return this.getToken(HiveParser.GREATERTHANOREQUALTO, 0);
	}
	public GREATERTHAN(): TerminalNode {
		return this.getToken(HiveParser.GREATERTHAN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceSimilarOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceSimilarOperator) {
	 		listener.enterPrecedenceSimilarOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceSimilarOperator) {
	 		listener.exitPrecedenceSimilarOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceSimilarOperator) {
			return visitor.visitPrecedenceSimilarOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubQueryExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public selectStatement(): SelectStatementContext {
		return this.getTypedRuleContext(SelectStatementContext, 0) as SelectStatementContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_subQueryExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSubQueryExpression) {
	 		listener.enterSubQueryExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSubQueryExpression) {
	 		listener.exitSubQueryExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSubQueryExpression) {
			return visitor.visitSubQueryExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceSimilarExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceSimilarExpressionMain(): PrecedenceSimilarExpressionMainContext {
		return this.getTypedRuleContext(PrecedenceSimilarExpressionMainContext, 0) as PrecedenceSimilarExpressionMainContext;
	}
	public KW_EXISTS(): TerminalNode {
		return this.getToken(HiveParser.KW_EXISTS, 0);
	}
	public subQueryExpression(): SubQueryExpressionContext {
		return this.getTypedRuleContext(SubQueryExpressionContext, 0) as SubQueryExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceSimilarExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceSimilarExpression) {
	 		listener.enterPrecedenceSimilarExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceSimilarExpression) {
	 		listener.exitPrecedenceSimilarExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceSimilarExpression) {
			return visitor.visitPrecedenceSimilarExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceSimilarExpressionMainContext extends ParserRuleContext {
	public _a!: PrecedenceBitwiseOrExpressionContext;
	public _part!: PrecedenceSimilarExpressionPartContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext {
		return this.getTypedRuleContext(PrecedenceBitwiseOrExpressionContext, 0) as PrecedenceBitwiseOrExpressionContext;
	}
	public precedenceSimilarExpressionPart(): PrecedenceSimilarExpressionPartContext {
		return this.getTypedRuleContext(PrecedenceSimilarExpressionPartContext, 0) as PrecedenceSimilarExpressionPartContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceSimilarExpressionMain;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceSimilarExpressionMain) {
	 		listener.enterPrecedenceSimilarExpressionMain(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceSimilarExpressionMain) {
	 		listener.exitPrecedenceSimilarExpressionMain(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceSimilarExpressionMain) {
			return visitor.visitPrecedenceSimilarExpressionMain(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceSimilarExpressionPartContext extends ParserRuleContext {
	public _equalExpr!: PrecedenceBitwiseOrExpressionContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceSimilarOperator(): PrecedenceSimilarOperatorContext {
		return this.getTypedRuleContext(PrecedenceSimilarOperatorContext, 0) as PrecedenceSimilarOperatorContext;
	}
	public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext {
		return this.getTypedRuleContext(PrecedenceBitwiseOrExpressionContext, 0) as PrecedenceBitwiseOrExpressionContext;
	}
	public precedenceSimilarExpressionAtom(): PrecedenceSimilarExpressionAtomContext {
		return this.getTypedRuleContext(PrecedenceSimilarExpressionAtomContext, 0) as PrecedenceSimilarExpressionAtomContext;
	}
	public KW_NOT(): TerminalNode {
		return this.getToken(HiveParser.KW_NOT, 0);
	}
	public precedenceSimilarExpressionPartNot(): PrecedenceSimilarExpressionPartNotContext {
		return this.getTypedRuleContext(PrecedenceSimilarExpressionPartNotContext, 0) as PrecedenceSimilarExpressionPartNotContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceSimilarExpressionPart;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceSimilarExpressionPart) {
	 		listener.enterPrecedenceSimilarExpressionPart(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceSimilarExpressionPart) {
	 		listener.exitPrecedenceSimilarExpressionPart(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceSimilarExpressionPart) {
			return visitor.visitPrecedenceSimilarExpressionPart(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceSimilarExpressionAtomContext extends ParserRuleContext {
	public _min!: PrecedenceBitwiseOrExpressionContext;
	public _max!: PrecedenceBitwiseOrExpressionContext;
	public _expr!: ExpressionsInParenthesisContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_IN(): TerminalNode {
		return this.getToken(HiveParser.KW_IN, 0);
	}
	public precedenceSimilarExpressionIn(): PrecedenceSimilarExpressionInContext {
		return this.getTypedRuleContext(PrecedenceSimilarExpressionInContext, 0) as PrecedenceSimilarExpressionInContext;
	}
	public KW_BETWEEN(): TerminalNode {
		return this.getToken(HiveParser.KW_BETWEEN, 0);
	}
	public KW_AND(): TerminalNode {
		return this.getToken(HiveParser.KW_AND, 0);
	}
	public precedenceBitwiseOrExpression_list(): PrecedenceBitwiseOrExpressionContext[] {
		return this.getTypedRuleContexts(PrecedenceBitwiseOrExpressionContext) as PrecedenceBitwiseOrExpressionContext[];
	}
	public precedenceBitwiseOrExpression(i: number): PrecedenceBitwiseOrExpressionContext {
		return this.getTypedRuleContext(PrecedenceBitwiseOrExpressionContext, i) as PrecedenceBitwiseOrExpressionContext;
	}
	public KW_LIKE(): TerminalNode {
		return this.getToken(HiveParser.KW_LIKE, 0);
	}
	public KW_ANY(): TerminalNode {
		return this.getToken(HiveParser.KW_ANY, 0);
	}
	public KW_ALL(): TerminalNode {
		return this.getToken(HiveParser.KW_ALL, 0);
	}
	public expressionsInParenthesis(): ExpressionsInParenthesisContext {
		return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0) as ExpressionsInParenthesisContext;
	}
	public precedenceSimilarExpressionQuantifierPredicate(): PrecedenceSimilarExpressionQuantifierPredicateContext {
		return this.getTypedRuleContext(PrecedenceSimilarExpressionQuantifierPredicateContext, 0) as PrecedenceSimilarExpressionQuantifierPredicateContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceSimilarExpressionAtom;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceSimilarExpressionAtom) {
	 		listener.enterPrecedenceSimilarExpressionAtom(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceSimilarExpressionAtom) {
	 		listener.exitPrecedenceSimilarExpressionAtom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceSimilarExpressionAtom) {
			return visitor.visitPrecedenceSimilarExpressionAtom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceSimilarExpressionQuantifierPredicateContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public subQuerySelectorOperator(): SubQuerySelectorOperatorContext {
		return this.getTypedRuleContext(SubQuerySelectorOperatorContext, 0) as SubQuerySelectorOperatorContext;
	}
	public quantifierType(): QuantifierTypeContext {
		return this.getTypedRuleContext(QuantifierTypeContext, 0) as QuantifierTypeContext;
	}
	public subQueryExpression(): SubQueryExpressionContext {
		return this.getTypedRuleContext(SubQueryExpressionContext, 0) as SubQueryExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceSimilarExpressionQuantifierPredicate;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceSimilarExpressionQuantifierPredicate) {
	 		listener.enterPrecedenceSimilarExpressionQuantifierPredicate(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceSimilarExpressionQuantifierPredicate) {
	 		listener.exitPrecedenceSimilarExpressionQuantifierPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceSimilarExpressionQuantifierPredicate) {
			return visitor.visitPrecedenceSimilarExpressionQuantifierPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QuantifierTypeContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ANY(): TerminalNode {
		return this.getToken(HiveParser.KW_ANY, 0);
	}
	public KW_SOME(): TerminalNode {
		return this.getToken(HiveParser.KW_SOME, 0);
	}
	public KW_ALL(): TerminalNode {
		return this.getToken(HiveParser.KW_ALL, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_quantifierType;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterQuantifierType) {
	 		listener.enterQuantifierType(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitQuantifierType) {
	 		listener.exitQuantifierType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitQuantifierType) {
			return visitor.visitQuantifierType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceSimilarExpressionInContext extends ParserRuleContext {
	public _expr!: ExpressionsInParenthesisContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public subQueryExpression(): SubQueryExpressionContext {
		return this.getTypedRuleContext(SubQueryExpressionContext, 0) as SubQueryExpressionContext;
	}
	public expressionsInParenthesis(): ExpressionsInParenthesisContext {
		return this.getTypedRuleContext(ExpressionsInParenthesisContext, 0) as ExpressionsInParenthesisContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceSimilarExpressionIn;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceSimilarExpressionIn) {
	 		listener.enterPrecedenceSimilarExpressionIn(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceSimilarExpressionIn) {
	 		listener.exitPrecedenceSimilarExpressionIn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceSimilarExpressionIn) {
			return visitor.visitPrecedenceSimilarExpressionIn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceSimilarExpressionPartNotContext extends ParserRuleContext {
	public _notExpr!: PrecedenceBitwiseOrExpressionContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceRegexpOperator(): PrecedenceRegexpOperatorContext {
		return this.getTypedRuleContext(PrecedenceRegexpOperatorContext, 0) as PrecedenceRegexpOperatorContext;
	}
	public precedenceBitwiseOrExpression(): PrecedenceBitwiseOrExpressionContext {
		return this.getTypedRuleContext(PrecedenceBitwiseOrExpressionContext, 0) as PrecedenceBitwiseOrExpressionContext;
	}
	public precedenceSimilarExpressionAtom(): PrecedenceSimilarExpressionAtomContext {
		return this.getTypedRuleContext(PrecedenceSimilarExpressionAtomContext, 0) as PrecedenceSimilarExpressionAtomContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceSimilarExpressionPartNot;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceSimilarExpressionPartNot) {
	 		listener.enterPrecedenceSimilarExpressionPartNot(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceSimilarExpressionPartNot) {
	 		listener.exitPrecedenceSimilarExpressionPartNot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceSimilarExpressionPartNot) {
			return visitor.visitPrecedenceSimilarExpressionPartNot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceDistinctOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_IS(): TerminalNode {
		return this.getToken(HiveParser.KW_IS, 0);
	}
	public KW_DISTINCT(): TerminalNode {
		return this.getToken(HiveParser.KW_DISTINCT, 0);
	}
	public KW_FROM(): TerminalNode {
		return this.getToken(HiveParser.KW_FROM, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceDistinctOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceDistinctOperator) {
	 		listener.enterPrecedenceDistinctOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceDistinctOperator) {
	 		listener.exitPrecedenceDistinctOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceDistinctOperator) {
			return visitor.visitPrecedenceDistinctOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceEqualOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUAL(): TerminalNode {
		return this.getToken(HiveParser.EQUAL, 0);
	}
	public EQUAL_NS(): TerminalNode {
		return this.getToken(HiveParser.EQUAL_NS, 0);
	}
	public NOTEQUAL(): TerminalNode {
		return this.getToken(HiveParser.NOTEQUAL, 0);
	}
	public KW_IS(): TerminalNode {
		return this.getToken(HiveParser.KW_IS, 0);
	}
	public KW_NOT(): TerminalNode {
		return this.getToken(HiveParser.KW_NOT, 0);
	}
	public KW_DISTINCT(): TerminalNode {
		return this.getToken(HiveParser.KW_DISTINCT, 0);
	}
	public KW_FROM(): TerminalNode {
		return this.getToken(HiveParser.KW_FROM, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceEqualOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceEqualOperator) {
	 		listener.enterPrecedenceEqualOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceEqualOperator) {
	 		listener.exitPrecedenceEqualOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceEqualOperator) {
			return visitor.visitPrecedenceEqualOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceEqualExpressionContext extends ParserRuleContext {
	public _precedenceEqualOperator!: PrecedenceEqualOperatorContext;
	public _equal: PrecedenceEqualOperatorContext[] = [];
	public _precedenceSimilarExpression!: PrecedenceSimilarExpressionContext;
	public _p: PrecedenceSimilarExpressionContext[] = [];
	public _precedenceDistinctOperator!: PrecedenceDistinctOperatorContext;
	public _dist: PrecedenceDistinctOperatorContext[] = [];
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceSimilarExpression_list(): PrecedenceSimilarExpressionContext[] {
		return this.getTypedRuleContexts(PrecedenceSimilarExpressionContext) as PrecedenceSimilarExpressionContext[];
	}
	public precedenceSimilarExpression(i: number): PrecedenceSimilarExpressionContext {
		return this.getTypedRuleContext(PrecedenceSimilarExpressionContext, i) as PrecedenceSimilarExpressionContext;
	}
	public precedenceEqualOperator_list(): PrecedenceEqualOperatorContext[] {
		return this.getTypedRuleContexts(PrecedenceEqualOperatorContext) as PrecedenceEqualOperatorContext[];
	}
	public precedenceEqualOperator(i: number): PrecedenceEqualOperatorContext {
		return this.getTypedRuleContext(PrecedenceEqualOperatorContext, i) as PrecedenceEqualOperatorContext;
	}
	public precedenceDistinctOperator_list(): PrecedenceDistinctOperatorContext[] {
		return this.getTypedRuleContexts(PrecedenceDistinctOperatorContext) as PrecedenceDistinctOperatorContext[];
	}
	public precedenceDistinctOperator(i: number): PrecedenceDistinctOperatorContext {
		return this.getTypedRuleContext(PrecedenceDistinctOperatorContext, i) as PrecedenceDistinctOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceEqualExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceEqualExpression) {
	 		listener.enterPrecedenceEqualExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceEqualExpression) {
	 		listener.exitPrecedenceEqualExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceEqualExpression) {
			return visitor.visitPrecedenceEqualExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IsConditionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_NULL(): TerminalNode {
		return this.getToken(HiveParser.KW_NULL, 0);
	}
	public KW_TRUE(): TerminalNode {
		return this.getToken(HiveParser.KW_TRUE, 0);
	}
	public KW_FALSE(): TerminalNode {
		return this.getToken(HiveParser.KW_FALSE, 0);
	}
	public KW_UNKNOWN(): TerminalNode {
		return this.getToken(HiveParser.KW_UNKNOWN, 0);
	}
	public KW_NOT(): TerminalNode {
		return this.getToken(HiveParser.KW_NOT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_isCondition;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterIsCondition) {
	 		listener.enterIsCondition(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitIsCondition) {
	 		listener.exitIsCondition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitIsCondition) {
			return visitor.visitIsCondition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceUnarySuffixExpressionContext extends ParserRuleContext {
	public _a!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceEqualExpression(): PrecedenceEqualExpressionContext {
		return this.getTypedRuleContext(PrecedenceEqualExpressionContext, 0) as PrecedenceEqualExpressionContext;
	}
	public isCondition(): IsConditionContext {
		return this.getTypedRuleContext(IsConditionContext, 0) as IsConditionContext;
	}
	public KW_IS(): TerminalNode {
		return this.getToken(HiveParser.KW_IS, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceUnarySuffixExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceUnarySuffixExpression) {
	 		listener.enterPrecedenceUnarySuffixExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceUnarySuffixExpression) {
	 		listener.exitPrecedenceUnarySuffixExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceUnarySuffixExpression) {
			return visitor.visitPrecedenceUnarySuffixExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceNotOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_NOT(): TerminalNode {
		return this.getToken(HiveParser.KW_NOT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceNotOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceNotOperator) {
	 		listener.enterPrecedenceNotOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceNotOperator) {
	 		listener.exitPrecedenceNotOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceNotOperator) {
			return visitor.visitPrecedenceNotOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceNotExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceUnarySuffixExpression(): PrecedenceUnarySuffixExpressionContext {
		return this.getTypedRuleContext(PrecedenceUnarySuffixExpressionContext, 0) as PrecedenceUnarySuffixExpressionContext;
	}
	public precedenceNotOperator_list(): PrecedenceNotOperatorContext[] {
		return this.getTypedRuleContexts(PrecedenceNotOperatorContext) as PrecedenceNotOperatorContext[];
	}
	public precedenceNotOperator(i: number): PrecedenceNotOperatorContext {
		return this.getTypedRuleContext(PrecedenceNotOperatorContext, i) as PrecedenceNotOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceNotExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceNotExpression) {
	 		listener.enterPrecedenceNotExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceNotExpression) {
	 		listener.exitPrecedenceNotExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceNotExpression) {
			return visitor.visitPrecedenceNotExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceAndOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_AND(): TerminalNode {
		return this.getToken(HiveParser.KW_AND, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceAndOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceAndOperator) {
	 		listener.enterPrecedenceAndOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceAndOperator) {
	 		listener.exitPrecedenceAndOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceAndOperator) {
			return visitor.visitPrecedenceAndOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceAndExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceNotExpression_list(): PrecedenceNotExpressionContext[] {
		return this.getTypedRuleContexts(PrecedenceNotExpressionContext) as PrecedenceNotExpressionContext[];
	}
	public precedenceNotExpression(i: number): PrecedenceNotExpressionContext {
		return this.getTypedRuleContext(PrecedenceNotExpressionContext, i) as PrecedenceNotExpressionContext;
	}
	public precedenceAndOperator_list(): PrecedenceAndOperatorContext[] {
		return this.getTypedRuleContexts(PrecedenceAndOperatorContext) as PrecedenceAndOperatorContext[];
	}
	public precedenceAndOperator(i: number): PrecedenceAndOperatorContext {
		return this.getTypedRuleContext(PrecedenceAndOperatorContext, i) as PrecedenceAndOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceAndExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceAndExpression) {
	 		listener.enterPrecedenceAndExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceAndExpression) {
	 		listener.exitPrecedenceAndExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceAndExpression) {
			return visitor.visitPrecedenceAndExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceOrOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_OR(): TerminalNode {
		return this.getToken(HiveParser.KW_OR, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceOrOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceOrOperator) {
	 		listener.enterPrecedenceOrOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceOrOperator) {
	 		listener.exitPrecedenceOrOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceOrOperator) {
			return visitor.visitPrecedenceOrOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrecedenceOrExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public precedenceAndExpression_list(): PrecedenceAndExpressionContext[] {
		return this.getTypedRuleContexts(PrecedenceAndExpressionContext) as PrecedenceAndExpressionContext[];
	}
	public precedenceAndExpression(i: number): PrecedenceAndExpressionContext {
		return this.getTypedRuleContext(PrecedenceAndExpressionContext, i) as PrecedenceAndExpressionContext;
	}
	public precedenceOrOperator_list(): PrecedenceOrOperatorContext[] {
		return this.getTypedRuleContexts(PrecedenceOrOperatorContext) as PrecedenceOrOperatorContext[];
	}
	public precedenceOrOperator(i: number): PrecedenceOrOperatorContext {
		return this.getTypedRuleContext(PrecedenceOrOperatorContext, i) as PrecedenceOrOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_precedenceOrExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrecedenceOrExpression) {
	 		listener.enterPrecedenceOrExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrecedenceOrExpression) {
	 		listener.exitPrecedenceOrExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrecedenceOrExpression) {
			return visitor.visitPrecedenceOrExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BooleanValueContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TRUE(): TerminalNode {
		return this.getToken(HiveParser.KW_TRUE, 0);
	}
	public KW_FALSE(): TerminalNode {
		return this.getToken(HiveParser.KW_FALSE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_booleanValue;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterBooleanValue) {
	 		listener.enterBooleanValue(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitBooleanValue) {
	 		listener.exitBooleanValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitBooleanValue) {
			return visitor.visitBooleanValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BooleanValueTokContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_TRUE(): TerminalNode {
		return this.getToken(HiveParser.KW_TRUE, 0);
	}
	public KW_FALSE(): TerminalNode {
		return this.getToken(HiveParser.KW_FALSE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_booleanValueTok;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterBooleanValueTok) {
	 		listener.enterBooleanValueTok(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitBooleanValueTok) {
	 		listener.exitBooleanValueTok(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitBooleanValueTok) {
			return visitor.visitBooleanValueTok(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableOrPartitionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public tableName(): TableNameContext {
		return this.getTypedRuleContext(TableNameContext, 0) as TableNameContext;
	}
	public partitionSpec(): PartitionSpecContext {
		return this.getTypedRuleContext(PartitionSpecContext, 0) as PartitionSpecContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_tableOrPartition;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTableOrPartition) {
	 		listener.enterTableOrPartition(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTableOrPartition) {
	 		listener.exitTableOrPartition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTableOrPartition) {
			return visitor.visitTableOrPartition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionSpecContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_PARTITION(): TerminalNode {
		return this.getToken(HiveParser.KW_PARTITION, 0);
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public partitionVal_list(): PartitionValContext[] {
		return this.getTypedRuleContexts(PartitionValContext) as PartitionValContext[];
	}
	public partitionVal(i: number): PartitionValContext {
		return this.getTypedRuleContext(PartitionValContext, i) as PartitionValContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partitionSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartitionSpec) {
	 		listener.enterPartitionSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartitionSpec) {
	 		listener.exitPartitionSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionSpec) {
			return visitor.visitPartitionSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionValContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public EQUAL(): TerminalNode {
		return this.getToken(HiveParser.EQUAL, 0);
	}
	public constant(): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, 0) as ConstantContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partitionVal;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartitionVal) {
	 		listener.enterPartitionVal(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartitionVal) {
	 		listener.exitPartitionVal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionVal) {
			return visitor.visitPartitionVal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionSelectorSpecContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public partitionSelectorVal_list(): PartitionSelectorValContext[] {
		return this.getTypedRuleContexts(PartitionSelectorValContext) as PartitionSelectorValContext[];
	}
	public partitionSelectorVal(i: number): PartitionSelectorValContext {
		return this.getTypedRuleContext(PartitionSelectorValContext, i) as PartitionSelectorValContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partitionSelectorSpec;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartitionSelectorSpec) {
	 		listener.enterPartitionSelectorSpec(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartitionSelectorSpec) {
	 		listener.exitPartitionSelectorSpec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionSelectorSpec) {
			return visitor.visitPartitionSelectorSpec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionSelectorValContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public partitionSelectorOperator(): PartitionSelectorOperatorContext {
		return this.getTypedRuleContext(PartitionSelectorOperatorContext, 0) as PartitionSelectorOperatorContext;
	}
	public constant(): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, 0) as ConstantContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partitionSelectorVal;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartitionSelectorVal) {
	 		listener.enterPartitionSelectorVal(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartitionSelectorVal) {
	 		listener.exitPartitionSelectorVal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionSelectorVal) {
			return visitor.visitPartitionSelectorVal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionSelectorOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_LIKE(): TerminalNode {
		return this.getToken(HiveParser.KW_LIKE, 0);
	}
	public subQuerySelectorOperator(): SubQuerySelectorOperatorContext {
		return this.getTypedRuleContext(SubQuerySelectorOperatorContext, 0) as SubQuerySelectorOperatorContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_partitionSelectorOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPartitionSelectorOperator) {
	 		listener.enterPartitionSelectorOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPartitionSelectorOperator) {
	 		listener.exitPartitionSelectorOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPartitionSelectorOperator) {
			return visitor.visitPartitionSelectorOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubQuerySelectorOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public EQUAL(): TerminalNode {
		return this.getToken(HiveParser.EQUAL, 0);
	}
	public NOTEQUAL(): TerminalNode {
		return this.getToken(HiveParser.NOTEQUAL, 0);
	}
	public LESSTHANOREQUALTO(): TerminalNode {
		return this.getToken(HiveParser.LESSTHANOREQUALTO, 0);
	}
	public LESSTHAN(): TerminalNode {
		return this.getToken(HiveParser.LESSTHAN, 0);
	}
	public GREATERTHANOREQUALTO(): TerminalNode {
		return this.getToken(HiveParser.GREATERTHANOREQUALTO, 0);
	}
	public GREATERTHAN(): TerminalNode {
		return this.getToken(HiveParser.GREATERTHAN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_subQuerySelectorOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSubQuerySelectorOperator) {
	 		listener.enterSubQuerySelectorOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSubQuerySelectorOperator) {
	 		listener.exitSubQuerySelectorOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSubQuerySelectorOperator) {
			return visitor.visitSubQuerySelectorOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SysFuncNamesContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_AND(): TerminalNode {
		return this.getToken(HiveParser.KW_AND, 0);
	}
	public KW_OR(): TerminalNode {
		return this.getToken(HiveParser.KW_OR, 0);
	}
	public KW_NOT(): TerminalNode {
		return this.getToken(HiveParser.KW_NOT, 0);
	}
	public KW_LIKE(): TerminalNode {
		return this.getToken(HiveParser.KW_LIKE, 0);
	}
	public KW_IF(): TerminalNode {
		return this.getToken(HiveParser.KW_IF, 0);
	}
	public KW_CASE(): TerminalNode {
		return this.getToken(HiveParser.KW_CASE, 0);
	}
	public KW_WHEN(): TerminalNode {
		return this.getToken(HiveParser.KW_WHEN, 0);
	}
	public KW_FLOOR(): TerminalNode {
		return this.getToken(HiveParser.KW_FLOOR, 0);
	}
	public KW_TINYINT(): TerminalNode {
		return this.getToken(HiveParser.KW_TINYINT, 0);
	}
	public KW_SMALLINT(): TerminalNode {
		return this.getToken(HiveParser.KW_SMALLINT, 0);
	}
	public KW_INT(): TerminalNode {
		return this.getToken(HiveParser.KW_INT, 0);
	}
	public KW_BIGINT(): TerminalNode {
		return this.getToken(HiveParser.KW_BIGINT, 0);
	}
	public KW_FLOAT(): TerminalNode {
		return this.getToken(HiveParser.KW_FLOAT, 0);
	}
	public KW_REAL(): TerminalNode {
		return this.getToken(HiveParser.KW_REAL, 0);
	}
	public KW_DOUBLE(): TerminalNode {
		return this.getToken(HiveParser.KW_DOUBLE, 0);
	}
	public KW_BOOLEAN(): TerminalNode {
		return this.getToken(HiveParser.KW_BOOLEAN, 0);
	}
	public KW_STRING(): TerminalNode {
		return this.getToken(HiveParser.KW_STRING, 0);
	}
	public KW_BINARY(): TerminalNode {
		return this.getToken(HiveParser.KW_BINARY, 0);
	}
	public KW_ARRAY(): TerminalNode {
		return this.getToken(HiveParser.KW_ARRAY, 0);
	}
	public KW_MAP(): TerminalNode {
		return this.getToken(HiveParser.KW_MAP, 0);
	}
	public KW_STRUCT(): TerminalNode {
		return this.getToken(HiveParser.KW_STRUCT, 0);
	}
	public KW_UNIONTYPE(): TerminalNode {
		return this.getToken(HiveParser.KW_UNIONTYPE, 0);
	}
	public EQUAL(): TerminalNode {
		return this.getToken(HiveParser.EQUAL, 0);
	}
	public EQUAL_NS(): TerminalNode {
		return this.getToken(HiveParser.EQUAL_NS, 0);
	}
	public NOTEQUAL(): TerminalNode {
		return this.getToken(HiveParser.NOTEQUAL, 0);
	}
	public LESSTHANOREQUALTO(): TerminalNode {
		return this.getToken(HiveParser.LESSTHANOREQUALTO, 0);
	}
	public LESSTHAN(): TerminalNode {
		return this.getToken(HiveParser.LESSTHAN, 0);
	}
	public GREATERTHANOREQUALTO(): TerminalNode {
		return this.getToken(HiveParser.GREATERTHANOREQUALTO, 0);
	}
	public GREATERTHAN(): TerminalNode {
		return this.getToken(HiveParser.GREATERTHAN, 0);
	}
	public DIVIDE(): TerminalNode {
		return this.getToken(HiveParser.DIVIDE, 0);
	}
	public PLUS(): TerminalNode {
		return this.getToken(HiveParser.PLUS, 0);
	}
	public MINUS(): TerminalNode {
		return this.getToken(HiveParser.MINUS, 0);
	}
	public STAR(): TerminalNode {
		return this.getToken(HiveParser.STAR, 0);
	}
	public MOD(): TerminalNode {
		return this.getToken(HiveParser.MOD, 0);
	}
	public DIV(): TerminalNode {
		return this.getToken(HiveParser.DIV, 0);
	}
	public AMPERSAND(): TerminalNode {
		return this.getToken(HiveParser.AMPERSAND, 0);
	}
	public TILDE(): TerminalNode {
		return this.getToken(HiveParser.TILDE, 0);
	}
	public BITWISEOR(): TerminalNode {
		return this.getToken(HiveParser.BITWISEOR, 0);
	}
	public BITWISEXOR(): TerminalNode {
		return this.getToken(HiveParser.BITWISEXOR, 0);
	}
	public KW_RLIKE(): TerminalNode {
		return this.getToken(HiveParser.KW_RLIKE, 0);
	}
	public KW_REGEXP(): TerminalNode {
		return this.getToken(HiveParser.KW_REGEXP, 0);
	}
	public KW_IN(): TerminalNode {
		return this.getToken(HiveParser.KW_IN, 0);
	}
	public KW_BETWEEN(): TerminalNode {
		return this.getToken(HiveParser.KW_BETWEEN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_sysFuncNames;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSysFuncNames) {
	 		listener.enterSysFuncNames(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSysFuncNames) {
	 		listener.exitSysFuncNames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSysFuncNames) {
			return visitor.visitSysFuncNames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DescFuncNamesContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public sysFuncNames(): SysFuncNamesContext {
		return this.getTypedRuleContext(SysFuncNamesContext, 0) as SysFuncNamesContext;
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public functionIdentifier(): FunctionIdentifierContext {
		return this.getTypedRuleContext(FunctionIdentifierContext, 0) as FunctionIdentifierContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_descFuncNames;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDescFuncNames) {
	 		listener.enterDescFuncNames(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDescFuncNames) {
	 		listener.exitDescFuncNames(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDescFuncNames) {
			return visitor.visitDescFuncNames(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Id_Context extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public Identifier(): TerminalNode {
		return this.getToken(HiveParser.Identifier, 0);
	}
	public nonReserved(): NonReservedContext {
		return this.getTypedRuleContext(NonReservedContext, 0) as NonReservedContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_id_;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterId_) {
	 		listener.enterId_(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitId_) {
	 		listener.exitId_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitId_) {
			return visitor.visitId_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionIdentifierContext extends ParserRuleContext {
	public _fn!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public DOT(): TerminalNode {
		return this.getToken(HiveParser.DOT, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_functionIdentifier;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterFunctionIdentifier) {
	 		listener.enterFunctionIdentifier(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitFunctionIdentifier) {
	 		listener.exitFunctionIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitFunctionIdentifier) {
			return visitor.visitFunctionIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrincipalIdentifierContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_principalIdentifier;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrincipalIdentifier) {
	 		listener.enterPrincipalIdentifier(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrincipalIdentifier) {
	 		listener.exitPrincipalIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrincipalIdentifier) {
			return visitor.visitPrincipalIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NonReservedContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ABORT(): TerminalNode {
		return this.getToken(HiveParser.KW_ABORT, 0);
	}
	public KW_ACTIVATE(): TerminalNode {
		return this.getToken(HiveParser.KW_ACTIVATE, 0);
	}
	public KW_ACTIVE(): TerminalNode {
		return this.getToken(HiveParser.KW_ACTIVE, 0);
	}
	public KW_ADD(): TerminalNode {
		return this.getToken(HiveParser.KW_ADD, 0);
	}
	public KW_ADMIN(): TerminalNode {
		return this.getToken(HiveParser.KW_ADMIN, 0);
	}
	public KW_AFTER(): TerminalNode {
		return this.getToken(HiveParser.KW_AFTER, 0);
	}
	public KW_ALLOC_FRACTION(): TerminalNode {
		return this.getToken(HiveParser.KW_ALLOC_FRACTION, 0);
	}
	public KW_ANALYZE(): TerminalNode {
		return this.getToken(HiveParser.KW_ANALYZE, 0);
	}
	public KW_ARCHIVE(): TerminalNode {
		return this.getToken(HiveParser.KW_ARCHIVE, 0);
	}
	public KW_ASC(): TerminalNode {
		return this.getToken(HiveParser.KW_ASC, 0);
	}
	public KW_AST(): TerminalNode {
		return this.getToken(HiveParser.KW_AST, 0);
	}
	public KW_AT(): TerminalNode {
		return this.getToken(HiveParser.KW_AT, 0);
	}
	public KW_AUTOCOMMIT(): TerminalNode {
		return this.getToken(HiveParser.KW_AUTOCOMMIT, 0);
	}
	public KW_BATCH(): TerminalNode {
		return this.getToken(HiveParser.KW_BATCH, 0);
	}
	public KW_BEFORE(): TerminalNode {
		return this.getToken(HiveParser.KW_BEFORE, 0);
	}
	public KW_BUCKET(): TerminalNode {
		return this.getToken(HiveParser.KW_BUCKET, 0);
	}
	public KW_BUCKETS(): TerminalNode {
		return this.getToken(HiveParser.KW_BUCKETS, 0);
	}
	public KW_CACHE(): TerminalNode {
		return this.getToken(HiveParser.KW_CACHE, 0);
	}
	public KW_CASCADE(): TerminalNode {
		return this.getToken(HiveParser.KW_CASCADE, 0);
	}
	public KW_CBO(): TerminalNode {
		return this.getToken(HiveParser.KW_CBO, 0);
	}
	public KW_CHANGE(): TerminalNode {
		return this.getToken(HiveParser.KW_CHANGE, 0);
	}
	public KW_CHECK(): TerminalNode {
		return this.getToken(HiveParser.KW_CHECK, 0);
	}
	public KW_CLUSTER(): TerminalNode {
		return this.getToken(HiveParser.KW_CLUSTER, 0);
	}
	public KW_CLUSTERED(): TerminalNode {
		return this.getToken(HiveParser.KW_CLUSTERED, 0);
	}
	public KW_CLUSTERSTATUS(): TerminalNode {
		return this.getToken(HiveParser.KW_CLUSTERSTATUS, 0);
	}
	public KW_COLLECTION(): TerminalNode {
		return this.getToken(HiveParser.KW_COLLECTION, 0);
	}
	public KW_COLUMNS(): TerminalNode {
		return this.getToken(HiveParser.KW_COLUMNS, 0);
	}
	public KW_COMMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMMENT, 0);
	}
	public KW_COMPACT(): TerminalNode {
		return this.getToken(HiveParser.KW_COMPACT, 0);
	}
	public KW_COMPACTIONS(): TerminalNode {
		return this.getToken(HiveParser.KW_COMPACTIONS, 0);
	}
	public KW_COMPUTE(): TerminalNode {
		return this.getToken(HiveParser.KW_COMPUTE, 0);
	}
	public KW_CONCATENATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CONCATENATE, 0);
	}
	public KW_CONTINUE(): TerminalNode {
		return this.getToken(HiveParser.KW_CONTINUE, 0);
	}
	public KW_COST(): TerminalNode {
		return this.getToken(HiveParser.KW_COST, 0);
	}
	public KW_CRON(): TerminalNode {
		return this.getToken(HiveParser.KW_CRON, 0);
	}
	public KW_DATA(): TerminalNode {
		return this.getToken(HiveParser.KW_DATA, 0);
	}
	public KW_DATABASES(): TerminalNode {
		return this.getToken(HiveParser.KW_DATABASES, 0);
	}
	public KW_DATETIME(): TerminalNode {
		return this.getToken(HiveParser.KW_DATETIME, 0);
	}
	public KW_DAY(): TerminalNode {
		return this.getToken(HiveParser.KW_DAY, 0);
	}
	public KW_DAYOFWEEK(): TerminalNode {
		return this.getToken(HiveParser.KW_DAYOFWEEK, 0);
	}
	public KW_DBPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_DBPROPERTIES, 0);
	}
	public KW_DCPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_DCPROPERTIES, 0);
	}
	public KW_DEBUG(): TerminalNode {
		return this.getToken(HiveParser.KW_DEBUG, 0);
	}
	public KW_DEFAULT(): TerminalNode {
		return this.getToken(HiveParser.KW_DEFAULT, 0);
	}
	public KW_DEFERRED(): TerminalNode {
		return this.getToken(HiveParser.KW_DEFERRED, 0);
	}
	public KW_DEFINED(): TerminalNode {
		return this.getToken(HiveParser.KW_DEFINED, 0);
	}
	public KW_DELIMITED(): TerminalNode {
		return this.getToken(HiveParser.KW_DELIMITED, 0);
	}
	public KW_DEPENDENCY(): TerminalNode {
		return this.getToken(HiveParser.KW_DEPENDENCY, 0);
	}
	public KW_DESC(): TerminalNode {
		return this.getToken(HiveParser.KW_DESC, 0);
	}
	public KW_DETAIL(): TerminalNode {
		return this.getToken(HiveParser.KW_DETAIL, 0);
	}
	public KW_DIRECTORIES(): TerminalNode {
		return this.getToken(HiveParser.KW_DIRECTORIES, 0);
	}
	public KW_DIRECTORY(): TerminalNode {
		return this.getToken(HiveParser.KW_DIRECTORY, 0);
	}
	public KW_DISABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_DISABLE, 0);
	}
	public KW_DISTRIBUTE(): TerminalNode {
		return this.getToken(HiveParser.KW_DISTRIBUTE, 0);
	}
	public KW_DISTRIBUTED(): TerminalNode {
		return this.getToken(HiveParser.KW_DISTRIBUTED, 0);
	}
	public KW_DO(): TerminalNode {
		return this.getToken(HiveParser.KW_DO, 0);
	}
	public KW_DOW(): TerminalNode {
		return this.getToken(HiveParser.KW_DOW, 0);
	}
	public KW_DUMP(): TerminalNode {
		return this.getToken(HiveParser.KW_DUMP, 0);
	}
	public KW_ELEM_TYPE(): TerminalNode {
		return this.getToken(HiveParser.KW_ELEM_TYPE, 0);
	}
	public KW_ENABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ENABLE, 0);
	}
	public KW_ENFORCED(): TerminalNode {
		return this.getToken(HiveParser.KW_ENFORCED, 0);
	}
	public KW_ESCAPED(): TerminalNode {
		return this.getToken(HiveParser.KW_ESCAPED, 0);
	}
	public KW_EVERY(): TerminalNode {
		return this.getToken(HiveParser.KW_EVERY, 0);
	}
	public KW_EXCLUSIVE(): TerminalNode {
		return this.getToken(HiveParser.KW_EXCLUSIVE, 0);
	}
	public KW_EXECUTE(): TerminalNode {
		return this.getToken(HiveParser.KW_EXECUTE, 0);
	}
	public KW_EXECUTED(): TerminalNode {
		return this.getToken(HiveParser.KW_EXECUTED, 0);
	}
	public KW_EXPIRE_SNAPSHOTS(): TerminalNode {
		return this.getToken(HiveParser.KW_EXPIRE_SNAPSHOTS, 0);
	}
	public KW_EXPLAIN(): TerminalNode {
		return this.getToken(HiveParser.KW_EXPLAIN, 0);
	}
	public KW_EXPORT(): TerminalNode {
		return this.getToken(HiveParser.KW_EXPORT, 0);
	}
	public KW_EXPRESSION(): TerminalNode {
		return this.getToken(HiveParser.KW_EXPRESSION, 0);
	}
	public KW_FIELDS(): TerminalNode {
		return this.getToken(HiveParser.KW_FIELDS, 0);
	}
	public KW_FILE(): TerminalNode {
		return this.getToken(HiveParser.KW_FILE, 0);
	}
	public KW_FILEFORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_FILEFORMAT, 0);
	}
	public KW_FIRST(): TerminalNode {
		return this.getToken(HiveParser.KW_FIRST, 0);
	}
	public KW_FORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_FORMAT, 0);
	}
	public KW_FORMATTED(): TerminalNode {
		return this.getToken(HiveParser.KW_FORMATTED, 0);
	}
	public KW_FUNCTIONS(): TerminalNode {
		return this.getToken(HiveParser.KW_FUNCTIONS, 0);
	}
	public KW_HOLD_DDLTIME(): TerminalNode {
		return this.getToken(HiveParser.KW_HOLD_DDLTIME, 0);
	}
	public KW_HOUR(): TerminalNode {
		return this.getToken(HiveParser.KW_HOUR, 0);
	}
	public KW_IDXPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_IDXPROPERTIES, 0);
	}
	public KW_IGNORE(): TerminalNode {
		return this.getToken(HiveParser.KW_IGNORE, 0);
	}
	public KW_INDEX(): TerminalNode {
		return this.getToken(HiveParser.KW_INDEX, 0);
	}
	public KW_INDEXES(): TerminalNode {
		return this.getToken(HiveParser.KW_INDEXES, 0);
	}
	public KW_INPATH(): TerminalNode {
		return this.getToken(HiveParser.KW_INPATH, 0);
	}
	public KW_INPUTDRIVER(): TerminalNode {
		return this.getToken(HiveParser.KW_INPUTDRIVER, 0);
	}
	public KW_INPUTFORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_INPUTFORMAT, 0);
	}
	public KW_ISOLATION(): TerminalNode {
		return this.getToken(HiveParser.KW_ISOLATION, 0);
	}
	public KW_ITEMS(): TerminalNode {
		return this.getToken(HiveParser.KW_ITEMS, 0);
	}
	public KW_JAR(): TerminalNode {
		return this.getToken(HiveParser.KW_JAR, 0);
	}
	public KW_JOINCOST(): TerminalNode {
		return this.getToken(HiveParser.KW_JOINCOST, 0);
	}
	public KW_KEY(): TerminalNode {
		return this.getToken(HiveParser.KW_KEY, 0);
	}
	public KW_KEYS(): TerminalNode {
		return this.getToken(HiveParser.KW_KEYS, 0);
	}
	public KW_KEY_TYPE(): TerminalNode {
		return this.getToken(HiveParser.KW_KEY_TYPE, 0);
	}
	public KW_KILL(): TerminalNode {
		return this.getToken(HiveParser.KW_KILL, 0);
	}
	public KW_LAST(): TerminalNode {
		return this.getToken(HiveParser.KW_LAST, 0);
	}
	public KW_LEVEL(): TerminalNode {
		return this.getToken(HiveParser.KW_LEVEL, 0);
	}
	public KW_LIMIT(): TerminalNode {
		return this.getToken(HiveParser.KW_LIMIT, 0);
	}
	public KW_LINES(): TerminalNode {
		return this.getToken(HiveParser.KW_LINES, 0);
	}
	public KW_LOAD(): TerminalNode {
		return this.getToken(HiveParser.KW_LOAD, 0);
	}
	public KW_LOCATION(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCATION, 0);
	}
	public KW_LOCK(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCK, 0);
	}
	public KW_LOCKS(): TerminalNode {
		return this.getToken(HiveParser.KW_LOCKS, 0);
	}
	public KW_LOGICAL(): TerminalNode {
		return this.getToken(HiveParser.KW_LOGICAL, 0);
	}
	public KW_LONG(): TerminalNode {
		return this.getToken(HiveParser.KW_LONG, 0);
	}
	public KW_MANAGED(): TerminalNode {
		return this.getToken(HiveParser.KW_MANAGED, 0);
	}
	public KW_MANAGEDLOCATION(): TerminalNode {
		return this.getToken(HiveParser.KW_MANAGEDLOCATION, 0);
	}
	public KW_MANAGEMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_MANAGEMENT, 0);
	}
	public KW_MAPJOIN(): TerminalNode {
		return this.getToken(HiveParser.KW_MAPJOIN, 0);
	}
	public KW_MAPPING(): TerminalNode {
		return this.getToken(HiveParser.KW_MAPPING, 0);
	}
	public KW_MATCHED(): TerminalNode {
		return this.getToken(HiveParser.KW_MATCHED, 0);
	}
	public KW_MATERIALIZED(): TerminalNode {
		return this.getToken(HiveParser.KW_MATERIALIZED, 0);
	}
	public KW_METADATA(): TerminalNode {
		return this.getToken(HiveParser.KW_METADATA, 0);
	}
	public KW_MINUTE(): TerminalNode {
		return this.getToken(HiveParser.KW_MINUTE, 0);
	}
	public KW_MONTH(): TerminalNode {
		return this.getToken(HiveParser.KW_MONTH, 0);
	}
	public KW_MOVE(): TerminalNode {
		return this.getToken(HiveParser.KW_MOVE, 0);
	}
	public KW_MSCK(): TerminalNode {
		return this.getToken(HiveParser.KW_MSCK, 0);
	}
	public KW_NORELY(): TerminalNode {
		return this.getToken(HiveParser.KW_NORELY, 0);
	}
	public KW_NOSCAN(): TerminalNode {
		return this.getToken(HiveParser.KW_NOSCAN, 0);
	}
	public KW_NOVALIDATE(): TerminalNode {
		return this.getToken(HiveParser.KW_NOVALIDATE, 0);
	}
	public KW_NO_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_NO_DROP, 0);
	}
	public KW_NULLS(): TerminalNode {
		return this.getToken(HiveParser.KW_NULLS, 0);
	}
	public KW_OFFLINE(): TerminalNode {
		return this.getToken(HiveParser.KW_OFFLINE, 0);
	}
	public KW_OFFSET(): TerminalNode {
		return this.getToken(HiveParser.KW_OFFSET, 0);
	}
	public KW_OPERATOR(): TerminalNode {
		return this.getToken(HiveParser.KW_OPERATOR, 0);
	}
	public KW_OPTION(): TerminalNode {
		return this.getToken(HiveParser.KW_OPTION, 0);
	}
	public KW_OUTPUTDRIVER(): TerminalNode {
		return this.getToken(HiveParser.KW_OUTPUTDRIVER, 0);
	}
	public KW_OUTPUTFORMAT(): TerminalNode {
		return this.getToken(HiveParser.KW_OUTPUTFORMAT, 0);
	}
	public KW_OVERWRITE(): TerminalNode {
		return this.getToken(HiveParser.KW_OVERWRITE, 0);
	}
	public KW_OWNER(): TerminalNode {
		return this.getToken(HiveParser.KW_OWNER, 0);
	}
	public KW_PARTITIONED(): TerminalNode {
		return this.getToken(HiveParser.KW_PARTITIONED, 0);
	}
	public KW_PARTITIONS(): TerminalNode {
		return this.getToken(HiveParser.KW_PARTITIONS, 0);
	}
	public KW_PATH(): TerminalNode {
		return this.getToken(HiveParser.KW_PATH, 0);
	}
	public KW_PLAN(): TerminalNode {
		return this.getToken(HiveParser.KW_PLAN, 0);
	}
	public KW_PLANS(): TerminalNode {
		return this.getToken(HiveParser.KW_PLANS, 0);
	}
	public KW_PLUS(): TerminalNode {
		return this.getToken(HiveParser.KW_PLUS, 0);
	}
	public KW_POOL(): TerminalNode {
		return this.getToken(HiveParser.KW_POOL, 0);
	}
	public KW_PRINCIPALS(): TerminalNode {
		return this.getToken(HiveParser.KW_PRINCIPALS, 0);
	}
	public KW_PROTECTION(): TerminalNode {
		return this.getToken(HiveParser.KW_PROTECTION, 0);
	}
	public KW_PURGE(): TerminalNode {
		return this.getToken(HiveParser.KW_PURGE, 0);
	}
	public KW_QUARTER(): TerminalNode {
		return this.getToken(HiveParser.KW_QUARTER, 0);
	}
	public KW_QUERY(): TerminalNode {
		return this.getToken(HiveParser.KW_QUERY, 0);
	}
	public KW_QUERY_PARALLELISM(): TerminalNode {
		return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
	}
	public KW_READ(): TerminalNode {
		return this.getToken(HiveParser.KW_READ, 0);
	}
	public KW_READONLY(): TerminalNode {
		return this.getToken(HiveParser.KW_READONLY, 0);
	}
	public KW_REBUILD(): TerminalNode {
		return this.getToken(HiveParser.KW_REBUILD, 0);
	}
	public KW_RECORDREADER(): TerminalNode {
		return this.getToken(HiveParser.KW_RECORDREADER, 0);
	}
	public KW_RECORDWRITER(): TerminalNode {
		return this.getToken(HiveParser.KW_RECORDWRITER, 0);
	}
	public KW_RELOAD(): TerminalNode {
		return this.getToken(HiveParser.KW_RELOAD, 0);
	}
	public KW_RELY(): TerminalNode {
		return this.getToken(HiveParser.KW_RELY, 0);
	}
	public KW_REMOTE(): TerminalNode {
		return this.getToken(HiveParser.KW_REMOTE, 0);
	}
	public KW_RENAME(): TerminalNode {
		return this.getToken(HiveParser.KW_RENAME, 0);
	}
	public KW_REOPTIMIZATION(): TerminalNode {
		return this.getToken(HiveParser.KW_REOPTIMIZATION, 0);
	}
	public KW_REPAIR(): TerminalNode {
		return this.getToken(HiveParser.KW_REPAIR, 0);
	}
	public KW_REPL(): TerminalNode {
		return this.getToken(HiveParser.KW_REPL, 0);
	}
	public KW_REPLACE(): TerminalNode {
		return this.getToken(HiveParser.KW_REPLACE, 0);
	}
	public KW_REPLICATION(): TerminalNode {
		return this.getToken(HiveParser.KW_REPLICATION, 0);
	}
	public KW_RESOURCE(): TerminalNode {
		return this.getToken(HiveParser.KW_RESOURCE, 0);
	}
	public KW_RESPECT(): TerminalNode {
		return this.getToken(HiveParser.KW_RESPECT, 0);
	}
	public KW_RESTRICT(): TerminalNode {
		return this.getToken(HiveParser.KW_RESTRICT, 0);
	}
	public KW_REWRITE(): TerminalNode {
		return this.getToken(HiveParser.KW_REWRITE, 0);
	}
	public KW_ROLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLE, 0);
	}
	public KW_ROLES(): TerminalNode {
		return this.getToken(HiveParser.KW_ROLES, 0);
	}
	public KW_SCHEDULED(): TerminalNode {
		return this.getToken(HiveParser.KW_SCHEDULED, 0);
	}
	public KW_SCHEDULING_POLICY(): TerminalNode {
		return this.getToken(HiveParser.KW_SCHEDULING_POLICY, 0);
	}
	public KW_SCHEMA(): TerminalNode {
		return this.getToken(HiveParser.KW_SCHEMA, 0);
	}
	public KW_SCHEMAS(): TerminalNode {
		return this.getToken(HiveParser.KW_SCHEMAS, 0);
	}
	public KW_SECOND(): TerminalNode {
		return this.getToken(HiveParser.KW_SECOND, 0);
	}
	public KW_SEMI(): TerminalNode {
		return this.getToken(HiveParser.KW_SEMI, 0);
	}
	public KW_SERDE(): TerminalNode {
		return this.getToken(HiveParser.KW_SERDE, 0);
	}
	public KW_SERDEPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_SERDEPROPERTIES, 0);
	}
	public KW_SERVER(): TerminalNode {
		return this.getToken(HiveParser.KW_SERVER, 0);
	}
	public KW_SETS(): TerminalNode {
		return this.getToken(HiveParser.KW_SETS, 0);
	}
	public KW_SET_CURRENT_SNAPSHOT(): TerminalNode {
		return this.getToken(HiveParser.KW_SET_CURRENT_SNAPSHOT, 0);
	}
	public KW_SHARED(): TerminalNode {
		return this.getToken(HiveParser.KW_SHARED, 0);
	}
	public KW_SHOW(): TerminalNode {
		return this.getToken(HiveParser.KW_SHOW, 0);
	}
	public KW_SHOW_DATABASE(): TerminalNode {
		return this.getToken(HiveParser.KW_SHOW_DATABASE, 0);
	}
	public KW_SKEWED(): TerminalNode {
		return this.getToken(HiveParser.KW_SKEWED, 0);
	}
	public KW_SNAPSHOT(): TerminalNode {
		return this.getToken(HiveParser.KW_SNAPSHOT, 0);
	}
	public KW_SORT(): TerminalNode {
		return this.getToken(HiveParser.KW_SORT, 0);
	}
	public KW_SORTED(): TerminalNode {
		return this.getToken(HiveParser.KW_SORTED, 0);
	}
	public KW_SPEC(): TerminalNode {
		return this.getToken(HiveParser.KW_SPEC, 0);
	}
	public KW_SSL(): TerminalNode {
		return this.getToken(HiveParser.KW_SSL, 0);
	}
	public KW_STATISTICS(): TerminalNode {
		return this.getToken(HiveParser.KW_STATISTICS, 0);
	}
	public KW_STATUS(): TerminalNode {
		return this.getToken(HiveParser.KW_STATUS, 0);
	}
	public KW_STORED(): TerminalNode {
		return this.getToken(HiveParser.KW_STORED, 0);
	}
	public KW_STREAMTABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_STREAMTABLE, 0);
	}
	public KW_STRING(): TerminalNode {
		return this.getToken(HiveParser.KW_STRING, 0);
	}
	public KW_STRUCT(): TerminalNode {
		return this.getToken(HiveParser.KW_STRUCT, 0);
	}
	public KW_SUMMARY(): TerminalNode {
		return this.getToken(HiveParser.KW_SUMMARY, 0);
	}
	public KW_SYSTEM_TIME(): TerminalNode {
		return this.getToken(HiveParser.KW_SYSTEM_TIME, 0);
	}
	public KW_SYSTEM_VERSION(): TerminalNode {
		return this.getToken(HiveParser.KW_SYSTEM_VERSION, 0);
	}
	public KW_TABLES(): TerminalNode {
		return this.getToken(HiveParser.KW_TABLES, 0);
	}
	public KW_TBLPROPERTIES(): TerminalNode {
		return this.getToken(HiveParser.KW_TBLPROPERTIES, 0);
	}
	public KW_TEMPORARY(): TerminalNode {
		return this.getToken(HiveParser.KW_TEMPORARY, 0);
	}
	public KW_TERMINATED(): TerminalNode {
		return this.getToken(HiveParser.KW_TERMINATED, 0);
	}
	public KW_TIMESTAMPTZ(): TerminalNode {
		return this.getToken(HiveParser.KW_TIMESTAMPTZ, 0);
	}
	public KW_TINYINT(): TerminalNode {
		return this.getToken(HiveParser.KW_TINYINT, 0);
	}
	public KW_TOUCH(): TerminalNode {
		return this.getToken(HiveParser.KW_TOUCH, 0);
	}
	public KW_TRANSACTION(): TerminalNode {
		return this.getToken(HiveParser.KW_TRANSACTION, 0);
	}
	public KW_TRANSACTIONAL(): TerminalNode {
		return this.getToken(HiveParser.KW_TRANSACTIONAL, 0);
	}
	public KW_TRANSACTIONS(): TerminalNode {
		return this.getToken(HiveParser.KW_TRANSACTIONS, 0);
	}
	public KW_TRIM(): TerminalNode {
		return this.getToken(HiveParser.KW_TRIM, 0);
	}
	public KW_TYPE(): TerminalNode {
		return this.getToken(HiveParser.KW_TYPE, 0);
	}
	public KW_UNARCHIVE(): TerminalNode {
		return this.getToken(HiveParser.KW_UNARCHIVE, 0);
	}
	public KW_UNDO(): TerminalNode {
		return this.getToken(HiveParser.KW_UNDO, 0);
	}
	public KW_UNIONTYPE(): TerminalNode {
		return this.getToken(HiveParser.KW_UNIONTYPE, 0);
	}
	public KW_UNKNOWN(): TerminalNode {
		return this.getToken(HiveParser.KW_UNKNOWN, 0);
	}
	public KW_UNLOCK(): TerminalNode {
		return this.getToken(HiveParser.KW_UNLOCK, 0);
	}
	public KW_UNMANAGED(): TerminalNode {
		return this.getToken(HiveParser.KW_UNMANAGED, 0);
	}
	public KW_UNSET(): TerminalNode {
		return this.getToken(HiveParser.KW_UNSET, 0);
	}
	public KW_UNSIGNED(): TerminalNode {
		return this.getToken(HiveParser.KW_UNSIGNED, 0);
	}
	public KW_URI(): TerminalNode {
		return this.getToken(HiveParser.KW_URI, 0);
	}
	public KW_URL(): TerminalNode {
		return this.getToken(HiveParser.KW_URL, 0);
	}
	public KW_USE(): TerminalNode {
		return this.getToken(HiveParser.KW_USE, 0);
	}
	public KW_UTC(): TerminalNode {
		return this.getToken(HiveParser.KW_UTC, 0);
	}
	public KW_UTCTIMESTAMP(): TerminalNode {
		return this.getToken(HiveParser.KW_UTCTIMESTAMP, 0);
	}
	public KW_VALIDATE(): TerminalNode {
		return this.getToken(HiveParser.KW_VALIDATE, 0);
	}
	public KW_VALUE_TYPE(): TerminalNode {
		return this.getToken(HiveParser.KW_VALUE_TYPE, 0);
	}
	public KW_VECTORIZATION(): TerminalNode {
		return this.getToken(HiveParser.KW_VECTORIZATION, 0);
	}
	public KW_VIEW(): TerminalNode {
		return this.getToken(HiveParser.KW_VIEW, 0);
	}
	public KW_VIEWS(): TerminalNode {
		return this.getToken(HiveParser.KW_VIEWS, 0);
	}
	public KW_WAIT(): TerminalNode {
		return this.getToken(HiveParser.KW_WAIT, 0);
	}
	public KW_WEEK(): TerminalNode {
		return this.getToken(HiveParser.KW_WEEK, 0);
	}
	public KW_WHILE(): TerminalNode {
		return this.getToken(HiveParser.KW_WHILE, 0);
	}
	public KW_WITHIN(): TerminalNode {
		return this.getToken(HiveParser.KW_WITHIN, 0);
	}
	public KW_WORK(): TerminalNode {
		return this.getToken(HiveParser.KW_WORK, 0);
	}
	public KW_WORKLOAD(): TerminalNode {
		return this.getToken(HiveParser.KW_WORKLOAD, 0);
	}
	public KW_WRITE(): TerminalNode {
		return this.getToken(HiveParser.KW_WRITE, 0);
	}
	public KW_YEAR(): TerminalNode {
		return this.getToken(HiveParser.KW_YEAR, 0);
	}
	public KW_ZONE(): TerminalNode {
		return this.getToken(HiveParser.KW_ZONE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_nonReserved;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterNonReserved) {
	 		listener.enterNonReserved(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitNonReserved) {
	 		listener.exitNonReserved(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitNonReserved) {
			return visitor.visitNonReserved(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sql11ReservedKeywordsUsedAsFunctionNameContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ARRAY(): TerminalNode {
		return this.getToken(HiveParser.KW_ARRAY, 0);
	}
	public KW_BIGINT(): TerminalNode {
		return this.getToken(HiveParser.KW_BIGINT, 0);
	}
	public KW_BINARY(): TerminalNode {
		return this.getToken(HiveParser.KW_BINARY, 0);
	}
	public KW_BOOLEAN(): TerminalNode {
		return this.getToken(HiveParser.KW_BOOLEAN, 0);
	}
	public KW_CURRENT_DATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CURRENT_DATE, 0);
	}
	public KW_CURRENT_TIMESTAMP(): TerminalNode {
		return this.getToken(HiveParser.KW_CURRENT_TIMESTAMP, 0);
	}
	public KW_DATE(): TerminalNode {
		return this.getToken(HiveParser.KW_DATE, 0);
	}
	public KW_DOUBLE(): TerminalNode {
		return this.getToken(HiveParser.KW_DOUBLE, 0);
	}
	public KW_FLOAT(): TerminalNode {
		return this.getToken(HiveParser.KW_FLOAT, 0);
	}
	public KW_GROUPING(): TerminalNode {
		return this.getToken(HiveParser.KW_GROUPING, 0);
	}
	public KW_IF(): TerminalNode {
		return this.getToken(HiveParser.KW_IF, 0);
	}
	public KW_INT(): TerminalNode {
		return this.getToken(HiveParser.KW_INT, 0);
	}
	public KW_MAP(): TerminalNode {
		return this.getToken(HiveParser.KW_MAP, 0);
	}
	public KW_REAL(): TerminalNode {
		return this.getToken(HiveParser.KW_REAL, 0);
	}
	public KW_SMALLINT(): TerminalNode {
		return this.getToken(HiveParser.KW_SMALLINT, 0);
	}
	public KW_TIMESTAMP(): TerminalNode {
		return this.getToken(HiveParser.KW_TIMESTAMP, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_sql11ReservedKeywordsUsedAsFunctionName;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterSql11ReservedKeywordsUsedAsFunctionName) {
	 		listener.enterSql11ReservedKeywordsUsedAsFunctionName(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitSql11ReservedKeywordsUsedAsFunctionName) {
	 		listener.exitSql11ReservedKeywordsUsedAsFunctionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitSql11ReservedKeywordsUsedAsFunctionName) {
			return visitor.visitSql11ReservedKeywordsUsedAsFunctionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HintContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public hintList(): HintListContext {
		return this.getTypedRuleContext(HintListContext, 0) as HintListContext;
	}
	public EOF(): TerminalNode {
		return this.getToken(HiveParser.EOF, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_hint;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterHint) {
	 		listener.enterHint(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitHint) {
	 		listener.exitHint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitHint) {
			return visitor.visitHint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HintListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public hintItem_list(): HintItemContext[] {
		return this.getTypedRuleContexts(HintItemContext) as HintItemContext[];
	}
	public hintItem(i: number): HintItemContext {
		return this.getTypedRuleContext(HintItemContext, i) as HintItemContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_hintList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterHintList) {
	 		listener.enterHintList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitHintList) {
	 		listener.exitHintList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitHintList) {
			return visitor.visitHintList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HintItemContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public hintName(): HintNameContext {
		return this.getTypedRuleContext(HintNameContext, 0) as HintNameContext;
	}
	public LPAREN(): TerminalNode {
		return this.getToken(HiveParser.LPAREN, 0);
	}
	public hintArgs(): HintArgsContext {
		return this.getTypedRuleContext(HintArgsContext, 0) as HintArgsContext;
	}
	public RPAREN(): TerminalNode {
		return this.getToken(HiveParser.RPAREN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_hintItem;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterHintItem) {
	 		listener.enterHintItem(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitHintItem) {
	 		listener.exitHintItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitHintItem) {
			return visitor.visitHintItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HintNameContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_MAPJOIN(): TerminalNode {
		return this.getToken(HiveParser.KW_MAPJOIN, 0);
	}
	public KW_SEMI(): TerminalNode {
		return this.getToken(HiveParser.KW_SEMI, 0);
	}
	public KW_STREAMTABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_STREAMTABLE, 0);
	}
	public KW_PKFK_JOIN(): TerminalNode {
		return this.getToken(HiveParser.KW_PKFK_JOIN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_hintName;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterHintName) {
	 		listener.enterHintName(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitHintName) {
	 		listener.exitHintName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitHintName) {
			return visitor.visitHintName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HintArgsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public hintArgName_list(): HintArgNameContext[] {
		return this.getTypedRuleContexts(HintArgNameContext) as HintArgNameContext[];
	}
	public hintArgName(i: number): HintArgNameContext {
		return this.getTypedRuleContext(HintArgNameContext, i) as HintArgNameContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_hintArgs;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterHintArgs) {
	 		listener.enterHintArgs(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitHintArgs) {
	 		listener.exitHintArgs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitHintArgs) {
			return visitor.visitHintArgs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HintArgNameContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public Identifier(): TerminalNode {
		return this.getToken(HiveParser.Identifier, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
	public KW_NONE(): TerminalNode {
		return this.getToken(HiveParser.KW_NONE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_hintArgName;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterHintArgName) {
	 		listener.enterHintArgName(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitHintArgName) {
	 		listener.exitHintArgName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitHintArgName) {
			return visitor.visitHintArgName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrepareStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_PREPARE(): TerminalNode {
		return this.getToken(HiveParser.KW_PREPARE, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_FROM(): TerminalNode {
		return this.getToken(HiveParser.KW_FROM, 0);
	}
	public queryStatementExpression(): QueryStatementExpressionContext {
		return this.getTypedRuleContext(QueryStatementExpressionContext, 0) as QueryStatementExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_prepareStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPrepareStatement) {
	 		listener.enterPrepareStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPrepareStatement) {
	 		listener.exitPrepareStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPrepareStatement) {
			return visitor.visitPrepareStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecuteStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_EXECUTE(): TerminalNode {
		return this.getToken(HiveParser.KW_EXECUTE, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_USING(): TerminalNode {
		return this.getToken(HiveParser.KW_USING, 0);
	}
	public executeParamList(): ExecuteParamListContext {
		return this.getTypedRuleContext(ExecuteParamListContext, 0) as ExecuteParamListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_executeStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExecuteStatement) {
	 		listener.enterExecuteStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExecuteStatement) {
	 		listener.exitExecuteStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExecuteStatement) {
			return visitor.visitExecuteStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecuteParamListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public constant_list(): ConstantContext[] {
		return this.getTypedRuleContexts(ConstantContext) as ConstantContext[];
	}
	public constant(i: number): ConstantContext {
		return this.getTypedRuleContext(ConstantContext, i) as ConstantContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_executeParamList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterExecuteParamList) {
	 		listener.enterExecuteParamList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitExecuteParamList) {
	 		listener.exitExecuteParamList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitExecuteParamList) {
			return visitor.visitExecuteParamList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResourcePlanDdlStatementsContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public createResourcePlanStatement(): CreateResourcePlanStatementContext {
		return this.getTypedRuleContext(CreateResourcePlanStatementContext, 0) as CreateResourcePlanStatementContext;
	}
	public alterResourcePlanStatement(): AlterResourcePlanStatementContext {
		return this.getTypedRuleContext(AlterResourcePlanStatementContext, 0) as AlterResourcePlanStatementContext;
	}
	public dropResourcePlanStatement(): DropResourcePlanStatementContext {
		return this.getTypedRuleContext(DropResourcePlanStatementContext, 0) as DropResourcePlanStatementContext;
	}
	public globalWmStatement(): GlobalWmStatementContext {
		return this.getTypedRuleContext(GlobalWmStatementContext, 0) as GlobalWmStatementContext;
	}
	public replaceResourcePlanStatement(): ReplaceResourcePlanStatementContext {
		return this.getTypedRuleContext(ReplaceResourcePlanStatementContext, 0) as ReplaceResourcePlanStatementContext;
	}
	public createTriggerStatement(): CreateTriggerStatementContext {
		return this.getTypedRuleContext(CreateTriggerStatementContext, 0) as CreateTriggerStatementContext;
	}
	public alterTriggerStatement(): AlterTriggerStatementContext {
		return this.getTypedRuleContext(AlterTriggerStatementContext, 0) as AlterTriggerStatementContext;
	}
	public dropTriggerStatement(): DropTriggerStatementContext {
		return this.getTypedRuleContext(DropTriggerStatementContext, 0) as DropTriggerStatementContext;
	}
	public createPoolStatement(): CreatePoolStatementContext {
		return this.getTypedRuleContext(CreatePoolStatementContext, 0) as CreatePoolStatementContext;
	}
	public alterPoolStatement(): AlterPoolStatementContext {
		return this.getTypedRuleContext(AlterPoolStatementContext, 0) as AlterPoolStatementContext;
	}
	public dropPoolStatement(): DropPoolStatementContext {
		return this.getTypedRuleContext(DropPoolStatementContext, 0) as DropPoolStatementContext;
	}
	public createMappingStatement(): CreateMappingStatementContext {
		return this.getTypedRuleContext(CreateMappingStatementContext, 0) as CreateMappingStatementContext;
	}
	public alterMappingStatement(): AlterMappingStatementContext {
		return this.getTypedRuleContext(AlterMappingStatementContext, 0) as AlterMappingStatementContext;
	}
	public dropMappingStatement(): DropMappingStatementContext {
		return this.getTypedRuleContext(DropMappingStatementContext, 0) as DropMappingStatementContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_resourcePlanDdlStatements;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterResourcePlanDdlStatements) {
	 		listener.enterResourcePlanDdlStatements(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitResourcePlanDdlStatements) {
	 		listener.exitResourcePlanDdlStatements(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitResourcePlanDdlStatements) {
			return visitor.visitResourcePlanDdlStatements(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RpAssignContext extends ParserRuleContext {
	public _parallelism!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_QUERY_PARALLELISM(): TerminalNode {
		return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
	}
	public EQUAL(): TerminalNode {
		return this.getToken(HiveParser.EQUAL, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
	public KW_DEFAULT(): TerminalNode {
		return this.getToken(HiveParser.KW_DEFAULT, 0);
	}
	public KW_POOL(): TerminalNode {
		return this.getToken(HiveParser.KW_POOL, 0);
	}
	public poolPath(): PoolPathContext {
		return this.getTypedRuleContext(PoolPathContext, 0) as PoolPathContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_rpAssign;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRpAssign) {
	 		listener.enterRpAssign(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRpAssign) {
	 		listener.exitRpAssign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRpAssign) {
			return visitor.visitRpAssign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RpAssignListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public rpAssign_list(): RpAssignContext[] {
		return this.getTypedRuleContexts(RpAssignContext) as RpAssignContext[];
	}
	public rpAssign(i: number): RpAssignContext {
		return this.getTypedRuleContext(RpAssignContext, i) as RpAssignContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_rpAssignList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRpAssignList) {
	 		listener.enterRpAssignList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRpAssignList) {
	 		listener.exitRpAssignList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRpAssignList) {
			return visitor.visitRpAssignList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RpUnassignContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_QUERY_PARALLELISM(): TerminalNode {
		return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
	}
	public KW_DEFAULT(): TerminalNode {
		return this.getToken(HiveParser.KW_DEFAULT, 0);
	}
	public KW_POOL(): TerminalNode {
		return this.getToken(HiveParser.KW_POOL, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_rpUnassign;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRpUnassign) {
	 		listener.enterRpUnassign(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRpUnassign) {
	 		listener.exitRpUnassign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRpUnassign) {
			return visitor.visitRpUnassign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RpUnassignListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public rpUnassign_list(): RpUnassignContext[] {
		return this.getTypedRuleContexts(RpUnassignContext) as RpUnassignContext[];
	}
	public rpUnassign(i: number): RpUnassignContext {
		return this.getTypedRuleContext(RpUnassignContext, i) as RpUnassignContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_rpUnassignList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterRpUnassignList) {
	 		listener.enterRpUnassignList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitRpUnassignList) {
	 		listener.exitRpUnassignList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitRpUnassignList) {
			return visitor.visitRpUnassignList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateResourcePlanStatementContext extends ParserRuleContext {
	public _name!: Id_Context;
	public _likeName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_RESOURCE(): TerminalNode {
		return this.getToken(HiveParser.KW_RESOURCE, 0);
	}
	public KW_PLAN(): TerminalNode {
		return this.getToken(HiveParser.KW_PLAN, 0);
	}
	public KW_LIKE(): TerminalNode {
		return this.getToken(HiveParser.KW_LIKE, 0);
	}
	public ifNotExists(): IfNotExistsContext {
		return this.getTypedRuleContext(IfNotExistsContext, 0) as IfNotExistsContext;
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public rpAssignList(): RpAssignListContext {
		return this.getTypedRuleContext(RpAssignListContext, 0) as RpAssignListContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createResourcePlanStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateResourcePlanStatement) {
	 		listener.enterCreateResourcePlanStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateResourcePlanStatement) {
	 		listener.exitCreateResourcePlanStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateResourcePlanStatement) {
			return visitor.visitCreateResourcePlanStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithReplaceContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_REPLACE(): TerminalNode {
		return this.getToken(HiveParser.KW_REPLACE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_withReplace;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterWithReplace) {
	 		listener.enterWithReplace(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitWithReplace) {
	 		listener.exitWithReplace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitWithReplace) {
			return visitor.visitWithReplace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ActivateContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ACTIVATE(): TerminalNode {
		return this.getToken(HiveParser.KW_ACTIVATE, 0);
	}
	public withReplace(): WithReplaceContext {
		return this.getTypedRuleContext(WithReplaceContext, 0) as WithReplaceContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_activate;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterActivate) {
	 		listener.enterActivate(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitActivate) {
	 		listener.exitActivate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitActivate) {
			return visitor.visitActivate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnableContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ENABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ENABLE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_enable;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterEnable) {
	 		listener.enterEnable(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitEnable) {
	 		listener.exitEnable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitEnable) {
			return visitor.visitEnable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DisableContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DISABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_DISABLE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_disable;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDisable) {
	 		listener.enterDisable(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDisable) {
	 		listener.exitDisable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDisable) {
			return visitor.visitDisable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnmanagedContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_UNMANAGED(): TerminalNode {
		return this.getToken(HiveParser.KW_UNMANAGED, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_unmanaged;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterUnmanaged) {
	 		listener.enterUnmanaged(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitUnmanaged) {
	 		listener.exitUnmanaged(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitUnmanaged) {
			return visitor.visitUnmanaged(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterResourcePlanStatementContext extends ParserRuleContext {
	public _name!: Id_Context;
	public _newName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ALTER(): TerminalNode {
		return this.getToken(HiveParser.KW_ALTER, 0);
	}
	public KW_RESOURCE(): TerminalNode {
		return this.getToken(HiveParser.KW_RESOURCE, 0);
	}
	public KW_PLAN(): TerminalNode {
		return this.getToken(HiveParser.KW_PLAN, 0);
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public KW_VALIDATE(): TerminalNode {
		return this.getToken(HiveParser.KW_VALIDATE, 0);
	}
	public KW_DISABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_DISABLE, 0);
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public rpAssignList(): RpAssignListContext {
		return this.getTypedRuleContext(RpAssignListContext, 0) as RpAssignListContext;
	}
	public KW_UNSET(): TerminalNode {
		return this.getToken(HiveParser.KW_UNSET, 0);
	}
	public rpUnassignList(): RpUnassignListContext {
		return this.getTypedRuleContext(RpUnassignListContext, 0) as RpUnassignListContext;
	}
	public KW_RENAME(): TerminalNode {
		return this.getToken(HiveParser.KW_RENAME, 0);
	}
	public KW_TO(): TerminalNode {
		return this.getToken(HiveParser.KW_TO, 0);
	}
	public activate(): ActivateContext {
		return this.getTypedRuleContext(ActivateContext, 0) as ActivateContext;
	}
	public enable(): EnableContext {
		return this.getTypedRuleContext(EnableContext, 0) as EnableContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterResourcePlanStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterResourcePlanStatement) {
	 		listener.enterAlterResourcePlanStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterResourcePlanStatement) {
	 		listener.exitAlterResourcePlanStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterResourcePlanStatement) {
			return visitor.visitAlterResourcePlanStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GlobalWmStatementContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_WORKLOAD(): TerminalNode {
		return this.getToken(HiveParser.KW_WORKLOAD, 0);
	}
	public KW_MANAGEMENT(): TerminalNode {
		return this.getToken(HiveParser.KW_MANAGEMENT, 0);
	}
	public KW_ENABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_ENABLE, 0);
	}
	public KW_DISABLE(): TerminalNode {
		return this.getToken(HiveParser.KW_DISABLE, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_globalWmStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterGlobalWmStatement) {
	 		listener.enterGlobalWmStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitGlobalWmStatement) {
	 		listener.exitGlobalWmStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitGlobalWmStatement) {
			return visitor.visitGlobalWmStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReplaceResourcePlanStatementContext extends ParserRuleContext {
	public _src!: Id_Context;
	public _dest!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_REPLACE(): TerminalNode {
		return this.getToken(HiveParser.KW_REPLACE, 0);
	}
	public KW_ACTIVE(): TerminalNode {
		return this.getToken(HiveParser.KW_ACTIVE, 0);
	}
	public KW_RESOURCE(): TerminalNode {
		return this.getToken(HiveParser.KW_RESOURCE, 0);
	}
	public KW_PLAN(): TerminalNode {
		return this.getToken(HiveParser.KW_PLAN, 0);
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_replaceResourcePlanStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterReplaceResourcePlanStatement) {
	 		listener.enterReplaceResourcePlanStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitReplaceResourcePlanStatement) {
	 		listener.exitReplaceResourcePlanStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitReplaceResourcePlanStatement) {
			return visitor.visitReplaceResourcePlanStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropResourcePlanStatementContext extends ParserRuleContext {
	public _name!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_RESOURCE(): TerminalNode {
		return this.getToken(HiveParser.KW_RESOURCE, 0);
	}
	public KW_PLAN(): TerminalNode {
		return this.getToken(HiveParser.KW_PLAN, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public ifExists(): IfExistsContext {
		return this.getTypedRuleContext(IfExistsContext, 0) as IfExistsContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropResourcePlanStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropResourcePlanStatement) {
	 		listener.enterDropResourcePlanStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropResourcePlanStatement) {
	 		listener.exitDropResourcePlanStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropResourcePlanStatement) {
			return visitor.visitDropResourcePlanStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PoolPathContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public DOT_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.DOT);
	}
	public DOT(i: number): TerminalNode {
		return this.getToken(HiveParser.DOT, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_poolPath;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPoolPath) {
	 		listener.enterPoolPath(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPoolPath) {
	 		listener.exitPoolPath(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPoolPath) {
			return visitor.visitPoolPath(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public triggerAtomExpression(): TriggerAtomExpressionContext {
		return this.getTypedRuleContext(TriggerAtomExpressionContext, 0) as TriggerAtomExpressionContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_triggerExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTriggerExpression) {
	 		listener.enterTriggerExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTriggerExpression) {
	 		listener.exitTriggerExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTriggerExpression) {
			return visitor.visitTriggerExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerExpressionStandaloneContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public triggerExpression(): TriggerExpressionContext {
		return this.getTypedRuleContext(TriggerExpressionContext, 0) as TriggerExpressionContext;
	}
	public EOF(): TerminalNode {
		return this.getToken(HiveParser.EOF, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_triggerExpressionStandalone;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTriggerExpressionStandalone) {
	 		listener.enterTriggerExpressionStandalone(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTriggerExpressionStandalone) {
	 		listener.exitTriggerExpressionStandalone(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTriggerExpressionStandalone) {
			return visitor.visitTriggerExpressionStandalone(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerOrExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public triggerAndExpression_list(): TriggerAndExpressionContext[] {
		return this.getTypedRuleContexts(TriggerAndExpressionContext) as TriggerAndExpressionContext[];
	}
	public triggerAndExpression(i: number): TriggerAndExpressionContext {
		return this.getTypedRuleContext(TriggerAndExpressionContext, i) as TriggerAndExpressionContext;
	}
	public KW_OR_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_OR);
	}
	public KW_OR(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_OR, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_triggerOrExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTriggerOrExpression) {
	 		listener.enterTriggerOrExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTriggerOrExpression) {
	 		listener.exitTriggerOrExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTriggerOrExpression) {
			return visitor.visitTriggerOrExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerAndExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public triggerAtomExpression_list(): TriggerAtomExpressionContext[] {
		return this.getTypedRuleContexts(TriggerAtomExpressionContext) as TriggerAtomExpressionContext[];
	}
	public triggerAtomExpression(i: number): TriggerAtomExpressionContext {
		return this.getTypedRuleContext(TriggerAtomExpressionContext, i) as TriggerAtomExpressionContext;
	}
	public KW_AND_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.KW_AND);
	}
	public KW_AND(i: number): TerminalNode {
		return this.getToken(HiveParser.KW_AND, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_triggerAndExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTriggerAndExpression) {
	 		listener.enterTriggerAndExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTriggerAndExpression) {
	 		listener.exitTriggerAndExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTriggerAndExpression) {
			return visitor.visitTriggerAndExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerAtomExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public comparisionOperator(): ComparisionOperatorContext {
		return this.getTypedRuleContext(ComparisionOperatorContext, 0) as ComparisionOperatorContext;
	}
	public triggerLiteral(): TriggerLiteralContext {
		return this.getTypedRuleContext(TriggerLiteralContext, 0) as TriggerLiteralContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_triggerAtomExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTriggerAtomExpression) {
	 		listener.enterTriggerAtomExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTriggerAtomExpression) {
	 		listener.exitTriggerAtomExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTriggerAtomExpression) {
			return visitor.visitTriggerAtomExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerLiteralContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_triggerLiteral;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTriggerLiteral) {
	 		listener.enterTriggerLiteral(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTriggerLiteral) {
	 		listener.exitTriggerLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTriggerLiteral) {
			return visitor.visitTriggerLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ComparisionOperatorContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public GREATERTHAN(): TerminalNode {
		return this.getToken(HiveParser.GREATERTHAN, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_comparisionOperator;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterComparisionOperator) {
	 		listener.enterComparisionOperator(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitComparisionOperator) {
	 		listener.exitComparisionOperator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitComparisionOperator) {
			return visitor.visitComparisionOperator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerActionExpressionContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_KILL(): TerminalNode {
		return this.getToken(HiveParser.KW_KILL, 0);
	}
	public KW_MOVE(): TerminalNode {
		return this.getToken(HiveParser.KW_MOVE, 0);
	}
	public KW_TO(): TerminalNode {
		return this.getToken(HiveParser.KW_TO, 0);
	}
	public poolPath(): PoolPathContext {
		return this.getTypedRuleContext(PoolPathContext, 0) as PoolPathContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_triggerActionExpression;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTriggerActionExpression) {
	 		listener.enterTriggerActionExpression(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTriggerActionExpression) {
	 		listener.exitTriggerActionExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTriggerActionExpression) {
			return visitor.visitTriggerActionExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerActionExpressionStandaloneContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public triggerActionExpression(): TriggerActionExpressionContext {
		return this.getTypedRuleContext(TriggerActionExpressionContext, 0) as TriggerActionExpressionContext;
	}
	public EOF(): TerminalNode {
		return this.getToken(HiveParser.EOF, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_triggerActionExpressionStandalone;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterTriggerActionExpressionStandalone) {
	 		listener.enterTriggerActionExpressionStandalone(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitTriggerActionExpressionStandalone) {
	 		listener.exitTriggerActionExpressionStandalone(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitTriggerActionExpressionStandalone) {
			return visitor.visitTriggerActionExpressionStandalone(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateTriggerStatementContext extends ParserRuleContext {
	public _rpName!: Id_Context;
	public _triggerName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_TRIGGER(): TerminalNode {
		return this.getToken(HiveParser.KW_TRIGGER, 0);
	}
	public DOT(): TerminalNode {
		return this.getToken(HiveParser.DOT, 0);
	}
	public KW_WHEN(): TerminalNode {
		return this.getToken(HiveParser.KW_WHEN, 0);
	}
	public triggerExpression(): TriggerExpressionContext {
		return this.getTypedRuleContext(TriggerExpressionContext, 0) as TriggerExpressionContext;
	}
	public KW_DO(): TerminalNode {
		return this.getToken(HiveParser.KW_DO, 0);
	}
	public triggerActionExpression(): TriggerActionExpressionContext {
		return this.getTypedRuleContext(TriggerActionExpressionContext, 0) as TriggerActionExpressionContext;
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createTriggerStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateTriggerStatement) {
	 		listener.enterCreateTriggerStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateTriggerStatement) {
	 		listener.exitCreateTriggerStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateTriggerStatement) {
			return visitor.visitCreateTriggerStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterTriggerStatementContext extends ParserRuleContext {
	public _rpName!: Id_Context;
	public _triggerName!: Id_Context;
	public _poolName!: PoolPathContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ALTER(): TerminalNode {
		return this.getToken(HiveParser.KW_ALTER, 0);
	}
	public KW_TRIGGER(): TerminalNode {
		return this.getToken(HiveParser.KW_TRIGGER, 0);
	}
	public DOT(): TerminalNode {
		return this.getToken(HiveParser.DOT, 0);
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public KW_WHEN(): TerminalNode {
		return this.getToken(HiveParser.KW_WHEN, 0);
	}
	public triggerExpression(): TriggerExpressionContext {
		return this.getTypedRuleContext(TriggerExpressionContext, 0) as TriggerExpressionContext;
	}
	public KW_DO(): TerminalNode {
		return this.getToken(HiveParser.KW_DO, 0);
	}
	public triggerActionExpression(): TriggerActionExpressionContext {
		return this.getTypedRuleContext(TriggerActionExpressionContext, 0) as TriggerActionExpressionContext;
	}
	public KW_ADD(): TerminalNode {
		return this.getToken(HiveParser.KW_ADD, 0);
	}
	public KW_TO(): TerminalNode {
		return this.getToken(HiveParser.KW_TO, 0);
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_FROM(): TerminalNode {
		return this.getToken(HiveParser.KW_FROM, 0);
	}
	public KW_POOL(): TerminalNode {
		return this.getToken(HiveParser.KW_POOL, 0);
	}
	public KW_UNMANAGED(): TerminalNode {
		return this.getToken(HiveParser.KW_UNMANAGED, 0);
	}
	public poolPath(): PoolPathContext {
		return this.getTypedRuleContext(PoolPathContext, 0) as PoolPathContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterTriggerStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterTriggerStatement) {
	 		listener.enterAlterTriggerStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterTriggerStatement) {
	 		listener.exitAlterTriggerStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterTriggerStatement) {
			return visitor.visitAlterTriggerStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropTriggerStatementContext extends ParserRuleContext {
	public _rpName!: Id_Context;
	public _triggerName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_TRIGGER(): TerminalNode {
		return this.getToken(HiveParser.KW_TRIGGER, 0);
	}
	public DOT(): TerminalNode {
		return this.getToken(HiveParser.DOT, 0);
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropTriggerStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropTriggerStatement) {
	 		listener.enterDropTriggerStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropTriggerStatement) {
	 		listener.exitDropTriggerStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropTriggerStatement) {
			return visitor.visitDropTriggerStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PoolAssignContext extends ParserRuleContext {
	public _allocFraction!: Token;
	public _parallelism!: Token;
	public _policy!: Token;
	public _path!: PoolPathContext;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ALLOC_FRACTION(): TerminalNode {
		return this.getToken(HiveParser.KW_ALLOC_FRACTION, 0);
	}
	public EQUAL(): TerminalNode {
		return this.getToken(HiveParser.EQUAL, 0);
	}
	public KW_QUERY_PARALLELISM(): TerminalNode {
		return this.getToken(HiveParser.KW_QUERY_PARALLELISM, 0);
	}
	public KW_SCHEDULING_POLICY(): TerminalNode {
		return this.getToken(HiveParser.KW_SCHEDULING_POLICY, 0);
	}
	public KW_PATH(): TerminalNode {
		return this.getToken(HiveParser.KW_PATH, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public poolPath(): PoolPathContext {
		return this.getTypedRuleContext(PoolPathContext, 0) as PoolPathContext;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_poolAssign;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPoolAssign) {
	 		listener.enterPoolAssign(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPoolAssign) {
	 		listener.exitPoolAssign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPoolAssign) {
			return visitor.visitPoolAssign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PoolAssignListContext extends ParserRuleContext {
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public poolAssign_list(): PoolAssignContext[] {
		return this.getTypedRuleContexts(PoolAssignContext) as PoolAssignContext[];
	}
	public poolAssign(i: number): PoolAssignContext {
		return this.getTypedRuleContext(PoolAssignContext, i) as PoolAssignContext;
	}
	public COMMA_list(): TerminalNode[] {
	    	return this.getTokens(HiveParser.COMMA);
	}
	public COMMA(i: number): TerminalNode {
		return this.getToken(HiveParser.COMMA, i);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_poolAssignList;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterPoolAssignList) {
	 		listener.enterPoolAssignList(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitPoolAssignList) {
	 		listener.exitPoolAssignList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitPoolAssignList) {
			return visitor.visitPoolAssignList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatePoolStatementContext extends ParserRuleContext {
	public _rpName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_POOL(): TerminalNode {
		return this.getToken(HiveParser.KW_POOL, 0);
	}
	public DOT(): TerminalNode {
		return this.getToken(HiveParser.DOT, 0);
	}
	public poolPath(): PoolPathContext {
		return this.getTypedRuleContext(PoolPathContext, 0) as PoolPathContext;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public poolAssignList(): PoolAssignListContext {
		return this.getTypedRuleContext(PoolAssignListContext, 0) as PoolAssignListContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createPoolStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreatePoolStatement) {
	 		listener.enterCreatePoolStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreatePoolStatement) {
	 		listener.exitCreatePoolStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreatePoolStatement) {
			return visitor.visitCreatePoolStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterPoolStatementContext extends ParserRuleContext {
	public _rpName!: Id_Context;
	public _triggerName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ALTER(): TerminalNode {
		return this.getToken(HiveParser.KW_ALTER, 0);
	}
	public KW_POOL(): TerminalNode {
		return this.getToken(HiveParser.KW_POOL, 0);
	}
	public DOT(): TerminalNode {
		return this.getToken(HiveParser.DOT, 0);
	}
	public poolPath(): PoolPathContext {
		return this.getTypedRuleContext(PoolPathContext, 0) as PoolPathContext;
	}
	public id__list(): Id_Context[] {
		return this.getTypedRuleContexts(Id_Context) as Id_Context[];
	}
	public id_(i: number): Id_Context {
		return this.getTypedRuleContext(Id_Context, i) as Id_Context;
	}
	public KW_SET(): TerminalNode {
		return this.getToken(HiveParser.KW_SET, 0);
	}
	public poolAssignList(): PoolAssignListContext {
		return this.getTypedRuleContext(PoolAssignListContext, 0) as PoolAssignListContext;
	}
	public KW_UNSET(): TerminalNode {
		return this.getToken(HiveParser.KW_UNSET, 0);
	}
	public KW_SCHEDULING_POLICY(): TerminalNode {
		return this.getToken(HiveParser.KW_SCHEDULING_POLICY, 0);
	}
	public KW_TRIGGER(): TerminalNode {
		return this.getToken(HiveParser.KW_TRIGGER, 0);
	}
	public KW_ADD(): TerminalNode {
		return this.getToken(HiveParser.KW_ADD, 0);
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterPoolStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterPoolStatement) {
	 		listener.enterAlterPoolStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterPoolStatement) {
	 		listener.exitAlterPoolStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterPoolStatement) {
			return visitor.visitAlterPoolStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropPoolStatementContext extends ParserRuleContext {
	public _rpName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_POOL(): TerminalNode {
		return this.getToken(HiveParser.KW_POOL, 0);
	}
	public DOT(): TerminalNode {
		return this.getToken(HiveParser.DOT, 0);
	}
	public poolPath(): PoolPathContext {
		return this.getTypedRuleContext(PoolPathContext, 0) as PoolPathContext;
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropPoolStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropPoolStatement) {
	 		listener.enterDropPoolStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropPoolStatement) {
	 		listener.exitDropPoolStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropPoolStatement) {
			return visitor.visitDropPoolStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateMappingStatementContext extends ParserRuleContext {
	public _mappingType!: Token;
	public _name!: Token;
	public _rpName!: Id_Context;
	public _path!: PoolPathContext;
	public _order!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_CREATE(): TerminalNode {
		return this.getToken(HiveParser.KW_CREATE, 0);
	}
	public KW_MAPPING(): TerminalNode {
		return this.getToken(HiveParser.KW_MAPPING, 0);
	}
	public KW_IN(): TerminalNode {
		return this.getToken(HiveParser.KW_IN, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_USER(): TerminalNode {
		return this.getToken(HiveParser.KW_USER, 0);
	}
	public KW_GROUP(): TerminalNode {
		return this.getToken(HiveParser.KW_GROUP, 0);
	}
	public KW_APPLICATION(): TerminalNode {
		return this.getToken(HiveParser.KW_APPLICATION, 0);
	}
	public KW_TO(): TerminalNode {
		return this.getToken(HiveParser.KW_TO, 0);
	}
	public unmanaged(): UnmanagedContext {
		return this.getTypedRuleContext(UnmanagedContext, 0) as UnmanagedContext;
	}
	public poolPath(): PoolPathContext {
		return this.getTypedRuleContext(PoolPathContext, 0) as PoolPathContext;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_ORDER(): TerminalNode {
		return this.getToken(HiveParser.KW_ORDER, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_createMappingStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterCreateMappingStatement) {
	 		listener.enterCreateMappingStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitCreateMappingStatement) {
	 		listener.exitCreateMappingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitCreateMappingStatement) {
			return visitor.visitCreateMappingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterMappingStatementContext extends ParserRuleContext {
	public _mappingType!: Token;
	public _name!: Token;
	public _rpName!: Id_Context;
	public _path!: PoolPathContext;
	public _order!: Token;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_ALTER(): TerminalNode {
		return this.getToken(HiveParser.KW_ALTER, 0);
	}
	public KW_MAPPING(): TerminalNode {
		return this.getToken(HiveParser.KW_MAPPING, 0);
	}
	public KW_IN(): TerminalNode {
		return this.getToken(HiveParser.KW_IN, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_USER(): TerminalNode {
		return this.getToken(HiveParser.KW_USER, 0);
	}
	public KW_GROUP(): TerminalNode {
		return this.getToken(HiveParser.KW_GROUP, 0);
	}
	public KW_APPLICATION(): TerminalNode {
		return this.getToken(HiveParser.KW_APPLICATION, 0);
	}
	public KW_TO(): TerminalNode {
		return this.getToken(HiveParser.KW_TO, 0);
	}
	public unmanaged(): UnmanagedContext {
		return this.getTypedRuleContext(UnmanagedContext, 0) as UnmanagedContext;
	}
	public poolPath(): PoolPathContext {
		return this.getTypedRuleContext(PoolPathContext, 0) as PoolPathContext;
	}
	public KW_WITH(): TerminalNode {
		return this.getToken(HiveParser.KW_WITH, 0);
	}
	public KW_ORDER(): TerminalNode {
		return this.getToken(HiveParser.KW_ORDER, 0);
	}
	public Number(): TerminalNode {
		return this.getToken(HiveParser.Number, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_alterMappingStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterAlterMappingStatement) {
	 		listener.enterAlterMappingStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitAlterMappingStatement) {
	 		listener.exitAlterMappingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitAlterMappingStatement) {
			return visitor.visitAlterMappingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropMappingStatementContext extends ParserRuleContext {
	public _mappingType!: Token;
	public _name!: Token;
	public _rpName!: Id_Context;
	constructor(parser?: HiveParser, parent?: ParserRuleContext, invokingState?: number) {
		super(parent, invokingState);
    	this.parser = parser;
	}
	public KW_DROP(): TerminalNode {
		return this.getToken(HiveParser.KW_DROP, 0);
	}
	public KW_MAPPING(): TerminalNode {
		return this.getToken(HiveParser.KW_MAPPING, 0);
	}
	public KW_IN(): TerminalNode {
		return this.getToken(HiveParser.KW_IN, 0);
	}
	public StringLiteral(): TerminalNode {
		return this.getToken(HiveParser.StringLiteral, 0);
	}
	public id_(): Id_Context {
		return this.getTypedRuleContext(Id_Context, 0) as Id_Context;
	}
	public KW_USER(): TerminalNode {
		return this.getToken(HiveParser.KW_USER, 0);
	}
	public KW_GROUP(): TerminalNode {
		return this.getToken(HiveParser.KW_GROUP, 0);
	}
	public KW_APPLICATION(): TerminalNode {
		return this.getToken(HiveParser.KW_APPLICATION, 0);
	}
    public get ruleIndex(): number {
    	return HiveParser.RULE_dropMappingStatement;
	}
	public enterRule(listener: HiveParserListener): void {
	    if(listener.enterDropMappingStatement) {
	 		listener.enterDropMappingStatement(this);
		}
	}
	public exitRule(listener: HiveParserListener): void {
	    if(listener.exitDropMappingStatement) {
	 		listener.exitDropMappingStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: HiveParserVisitor<Result>): Result {
		if (visitor.visitDropMappingStatement) {
			return visitor.visitDropMappingStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}

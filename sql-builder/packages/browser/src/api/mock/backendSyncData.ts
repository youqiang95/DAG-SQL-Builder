import crypto from 'crypto'

const stringToMd5 = (value: string)=>{
    const md5 = crypto.createHash('md5')
    return md5.update(value).digest('hex')
}

export const genUniqId = () => {
    const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        const r = (Math.random() * 16) | 0,
          v = c === 'x' ? r : (r & 0x3) | 0x8
        return v.toString(16)
    })
    return uuid + '-' + new Date().getTime().toString()
}

// mock backend data generated by filesystem
export const backendData = {
    id: genUniqId(),
    name: '我的项目',
    fileType: "RootFolder",
    location: "我的项目",
    isLeaf: false,
    children: [
        {
            id: genUniqId(),
            name: "test.js",
            location: "我的项目/test.js",
            fileType: "File",
            isLeaf: true,
            data: {language: 'javascript', value:"console.log('Hello World');"}
        },
        {
            id: genUniqId(),
            name: "test.css",
            location: "我的项目/test.css",
            fileType: "File",
            isLeaf: true,
            data: {language: 'css', value:"mo { background-color: var(--workbenchBackground); color: var(--foreground); }"}
        },
        {
            id: genUniqId(),
            name: "haha.sg",
            fileType: "File",
            location: "我的项目/haha.sg",
            isLeaf: true,
            data: {language:'sqlgraph', value:JSON.stringify({graphData: {nodes:[], edges:[]}, graphParams:{}})}
        },
        {
            id: genUniqId(),
            name: "子文件夹",
            isLeaf: false,
            fileType: "Folder",
            location: "我的项目/子文件夹",
            children: [{
                id: genUniqId(),
                name: "test.js",
                fileType: "File",
                location: "我的项目/子文件夹/test.js",
                isLeaf: true,
                data: {language: 'javascript', value:"console.log('Hello World');"}
            }, {
                id: genUniqId(),
                name: "haha.sg",
                fileType: "File",
                location: "我的项目/子文件夹/haha.sg",
                isLeaf: true,
                data: {language: 'sqlgraph', value:JSON.stringify({graphData: {nodes:[], edges:[]}, graphParams:{}})}
            }]
        }
    ]
}

// origindata to syncdata
const transformDataToSync = (tree:any) => {
    if(tree.isLeaf){
        let retData = {
            ...tree, 
            md5: stringToMd5(tree.data.value)
        } 
        delete retData.data
        return retData
    }
    else {
        let retData = {...tree}
        let childs = []
        if(tree.children && tree.children.length>0){
            for(let child of tree.children){
                childs.push(transformDataToSync(child))
            }
            retData.children = childs
        }
        return retData
    }
}

export const backendSyncData = transformDataToSync(backendData)